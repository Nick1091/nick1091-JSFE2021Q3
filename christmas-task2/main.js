(()=>{var t={211:function(t,e){!function(t){"use strict";function e(t){return"object"==typeof t&&"function"==typeof t.to}function n(t){t.parentElement.removeChild(t)}function r(t){return null!=t}function a(t){t.preventDefault()}function i(t){return"number"==typeof t&&!isNaN(t)&&isFinite(t)}function o(t,e,n){n>0&&(u(t,e),setTimeout((function(){d(t,e)}),n))}function s(t){return Math.max(Math.min(t,100),0)}function l(t){return Array.isArray(t)?t:[t]}function c(t){var e=(t=String(t)).split(".");return e.length>1?e[1].length:0}function u(t,e){t.classList&&!/\s/.test(e)?t.classList.add(e):t.className+=" "+e}function d(t,e){t.classList&&!/\s/.test(e)?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," ")}function p(t){var e=void 0!==window.pageXOffset,n="CSS1Compat"===(t.compatMode||"");return{x:e?window.pageXOffset:n?t.documentElement.scrollLeft:t.body.scrollLeft,y:e?window.pageYOffset:n?t.documentElement.scrollTop:t.body.scrollTop}}function f(t,e){return 100/(e-t)}function h(t,e,n){return 100*e/(t[n+1]-t[n])}function m(t,e){for(var n=1;t>=e[n];)n+=1;return n}function g(t,e,n){if(n>=t.slice(-1)[0])return 100;var r=m(n,t),a=t[r-1],i=t[r],o=e[r-1],s=e[r];return o+function(t,e){return h(t,t[0]<0?e+Math.abs(t[0]):e-t[0],0)}([a,i],n)/f(o,s)}function v(t,e,n,r){if(100===r)return r;var a=m(r,t),i=t[a-1],o=t[a];return n?r-i>(o-i)/2?o:i:e[a-1]?t[a-1]+function(t,e){return Math.round(t/e)*e}(r-t[a-1],e[a-1]):r}var y,S;t.PipsMode=void 0,(S=t.PipsMode||(t.PipsMode={})).Range="range",S.Steps="steps",S.Positions="positions",S.Count="count",S.Values="values",t.PipsType=void 0,(y=t.PipsType||(t.PipsType={}))[y.None=-1]="None",y[y.NoValue=0]="NoValue",y[y.LargeValue=1]="LargeValue",y[y.SmallValue=2]="SmallValue";var b=function(){function t(t,e,n){var r;this.xPct=[],this.xVal=[],this.xSteps=[],this.xNumSteps=[],this.xHighestCompleteStep=[],this.xSteps=[n||!1],this.xNumSteps=[!1],this.snap=e;var a=[];for(Object.keys(t).forEach((function(e){a.push([l(t[e]),e])})),a.sort((function(t,e){return t[0][0]-e[0][0]})),r=0;r<a.length;r++)this.handleEntryPoint(a[r][1],a[r][0]);for(this.xNumSteps=this.xSteps.slice(0),r=0;r<this.xNumSteps.length;r++)this.handleStepPoint(r,this.xNumSteps[r])}return t.prototype.getDistance=function(t){for(var e=[],n=0;n<this.xNumSteps.length-1;n++)e[n]=h(this.xVal,t,n);return e},t.prototype.getAbsoluteDistance=function(t,e,n){var r,a=0;if(t<this.xPct[this.xPct.length-1])for(;t>this.xPct[a+1];)a++;else t===this.xPct[this.xPct.length-1]&&(a=this.xPct.length-2);n||t!==this.xPct[a+1]||a++,null===e&&(e=[]);var i=1,o=e[a],s=0,l=0,c=0,u=0;for(r=n?(t-this.xPct[a])/(this.xPct[a+1]-this.xPct[a]):(this.xPct[a+1]-t)/(this.xPct[a+1]-this.xPct[a]);o>0;)s=this.xPct[a+1+u]-this.xPct[a+u],e[a+u]*i+100-100*r>100?(l=s*r,i=(o-100*r)/e[a+u],r=1):(l=e[a+u]*s/100*i,i=0),n?(c-=l,this.xPct.length+u>=1&&u--):(c+=l,this.xPct.length-u>=1&&u++),o=e[a+u]*i;return t+c},t.prototype.toStepping=function(t){return g(this.xVal,this.xPct,t)},t.prototype.fromStepping=function(t){return function(t,e,n){if(n>=100)return t.slice(-1)[0];var r=m(n,e),a=t[r-1],i=t[r],o=e[r-1];return function(t,e){return e*(t[1]-t[0])/100+t[0]}([a,i],(n-o)*f(o,e[r]))}(this.xVal,this.xPct,t)},t.prototype.getStep=function(t){return v(this.xPct,this.xSteps,this.snap,t)},t.prototype.getDefaultStep=function(t,e,n){var r=m(t,this.xPct);return(100===t||e&&t===this.xPct[r-1])&&(r=Math.max(r-1,1)),(this.xVal[r]-this.xVal[r-1])/n},t.prototype.getNearbySteps=function(t){var e=m(t,this.xPct);return{stepBefore:{startValue:this.xVal[e-2],step:this.xNumSteps[e-2],highestStep:this.xHighestCompleteStep[e-2]},thisStep:{startValue:this.xVal[e-1],step:this.xNumSteps[e-1],highestStep:this.xHighestCompleteStep[e-1]},stepAfter:{startValue:this.xVal[e],step:this.xNumSteps[e],highestStep:this.xHighestCompleteStep[e]}}},t.prototype.countStepDecimals=function(){var t=this.xNumSteps.map(c);return Math.max.apply(null,t)},t.prototype.hasNoSize=function(){return this.xVal[0]===this.xVal[this.xVal.length-1]},t.prototype.convert=function(t){return this.getStep(this.toStepping(t))},t.prototype.handleEntryPoint=function(t,e){var n;if(!i(n="min"===t?0:"max"===t?100:parseFloat(t))||!i(e[0]))throw new Error("noUiSlider: 'range' value isn't numeric.");this.xPct.push(n),this.xVal.push(e[0]);var r=Number(e[1]);n?this.xSteps.push(!isNaN(r)&&r):isNaN(r)||(this.xSteps[0]=r),this.xHighestCompleteStep.push(0)},t.prototype.handleStepPoint=function(t,e){if(e)if(this.xVal[t]!==this.xVal[t+1]){this.xSteps[t]=h([this.xVal[t],this.xVal[t+1]],e,0)/f(this.xPct[t],this.xPct[t+1]);var n=(this.xVal[t+1]-this.xVal[t])/this.xNumSteps[t],r=Math.ceil(Number(n.toFixed(3))-1),a=this.xVal[t]+this.xNumSteps[t]*r;this.xHighestCompleteStep[t]=a}else this.xSteps[t]=this.xHighestCompleteStep[t]=this.xVal[t]},t}(),x={to:function(t){return void 0===t?"":t.toFixed(2)},from:Number},w={target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",textDirectionLtr:"txt-dir-ltr",textDirectionRtl:"txt-dir-rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"},E=".__tooltips",N=".__aria";function P(t,e){if(!i(e))throw new Error("noUiSlider: 'step' is not numeric.");t.singleStep=e}function L(t,e){if(!i(e))throw new Error("noUiSlider: 'keyboardPageMultiplier' is not numeric.");t.keyboardPageMultiplier=e}function O(t,e){if(!i(e))throw new Error("noUiSlider: 'keyboardMultiplier' is not numeric.");t.keyboardMultiplier=e}function k(t,e){if(!i(e))throw new Error("noUiSlider: 'keyboardDefaultStep' is not numeric.");t.keyboardDefaultStep=e}function C(t,e){if("object"!=typeof e||Array.isArray(e))throw new Error("noUiSlider: 'range' is not an object.");if(void 0===e.min||void 0===e.max)throw new Error("noUiSlider: Missing 'min' or 'max' in 'range'.");t.spectrum=new b(e,t.snap||!1,t.singleStep)}function M(t,e){if(e=l(e),!Array.isArray(e)||!e.length)throw new Error("noUiSlider: 'start' option is incorrect.");t.handles=e.length,t.start=e}function T(t,e){if("boolean"!=typeof e)throw new Error("noUiSlider: 'snap' option must be a boolean.");t.snap=e}function V(t,e){if("boolean"!=typeof e)throw new Error("noUiSlider: 'animate' option must be a boolean.");t.animate=e}function A(t,e){if("number"!=typeof e)throw new Error("noUiSlider: 'animationDuration' option must be a number.");t.animationDuration=e}function q(t,e){var n,r=[!1];if("lower"===e?e=[!0,!1]:"upper"===e&&(e=[!1,!0]),!0===e||!1===e){for(n=1;n<t.handles;n++)r.push(e);r.push(!1)}else{if(!Array.isArray(e)||!e.length||e.length!==t.handles+1)throw new Error("noUiSlider: 'connect' option doesn't match handle count.");r=e}t.connect=r}function j(t,e){switch(e){case"horizontal":t.ort=0;break;case"vertical":t.ort=1;break;default:throw new Error("noUiSlider: 'orientation' option is invalid.")}}function F(t,e){if(!i(e))throw new Error("noUiSlider: 'margin' option must be numeric.");0!==e&&(t.margin=t.spectrum.getDistance(e))}function I(t,e){if(!i(e))throw new Error("noUiSlider: 'limit' option must be numeric.");if(t.limit=t.spectrum.getDistance(e),!t.limit||t.handles<2)throw new Error("noUiSlider: 'limit' option is only supported on linear sliders with 2 or more handles.")}function _(t,e){var n;if(!i(e)&&!Array.isArray(e))throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(e)&&2!==e.length&&!i(e[0])&&!i(e[1]))throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==e){for(Array.isArray(e)||(e=[e,e]),t.padding=[t.spectrum.getDistance(e[0]),t.spectrum.getDistance(e[1])],n=0;n<t.spectrum.xNumSteps.length-1;n++)if(t.padding[0][n]<0||t.padding[1][n]<0)throw new Error("noUiSlider: 'padding' option must be a positive number(s).");var r=e[0]+e[1],a=t.spectrum.xVal[0];if(r/(t.spectrum.xVal[t.spectrum.xVal.length-1]-a)>1)throw new Error("noUiSlider: 'padding' option must not exceed 100% of the range.")}}function U(t,e){switch(e){case"ltr":t.dir=0;break;case"rtl":t.dir=1;break;default:throw new Error("noUiSlider: 'direction' option was not recognized.")}}function D(t,e){if("string"!=typeof e)throw new Error("noUiSlider: 'behaviour' must be a string containing options.");var n=e.indexOf("tap")>=0,r=e.indexOf("drag")>=0,a=e.indexOf("fixed")>=0,i=e.indexOf("snap")>=0,o=e.indexOf("hover")>=0,s=e.indexOf("unconstrained")>=0,l=e.indexOf("drag-all")>=0;if(a){if(2!==t.handles)throw new Error("noUiSlider: 'fixed' behaviour must be used with 2 handles");F(t,t.start[1]-t.start[0])}if(s&&(t.margin||t.limit))throw new Error("noUiSlider: 'unconstrained' behaviour cannot be used with margin or limit");t.events={tap:n||i,drag:r,dragAll:l,fixed:a,snap:i,hover:o,unconstrained:s}}function H(t,n){if(!1!==n)if(!0===n||e(n)){t.tooltips=[];for(var r=0;r<t.handles;r++)t.tooltips.push(n)}else{if((n=l(n)).length!==t.handles)throw new Error("noUiSlider: must pass a formatter for all handles.");n.forEach((function(t){if("boolean"!=typeof t&&!e(t))throw new Error("noUiSlider: 'tooltips' must be passed a formatter or 'false'.")})),t.tooltips=n}}function J(t,e){if(e.length!==t.handles)throw new Error("noUiSlider: must pass a attributes for all handles.");t.handleAttributes=e}function $(t,n){if(!e(n))throw new Error("noUiSlider: 'ariaFormat' requires 'to' method.");t.ariaFormat=n}function z(t,n){if(!function(t){return e(t)&&"function"==typeof t.from}(n))throw new Error("noUiSlider: 'format' requires 'to' and 'from' methods.");t.format=n}function R(t,e){if("boolean"!=typeof e)throw new Error("noUiSlider: 'keyboardSupport' option must be a boolean.");t.keyboardSupport=e}function Y(t,e){t.documentElement=e}function B(t,e){if("string"!=typeof e&&!1!==e)throw new Error("noUiSlider: 'cssPrefix' must be a string or `false`.");t.cssPrefix=e}function X(t,e){if("object"!=typeof e)throw new Error("noUiSlider: 'cssClasses' must be an object.");"string"==typeof t.cssPrefix?(t.cssClasses={},Object.keys(e).forEach((function(n){t.cssClasses[n]=t.cssPrefix+e[n]}))):t.cssClasses=e}function W(t){var e={margin:null,limit:null,padding:null,animate:!0,animationDuration:300,ariaFormat:x,format:x},n={step:{r:!1,t:P},keyboardPageMultiplier:{r:!1,t:L},keyboardMultiplier:{r:!1,t:O},keyboardDefaultStep:{r:!1,t:k},start:{r:!0,t:M},connect:{r:!0,t:q},direction:{r:!0,t:U},snap:{r:!1,t:T},animate:{r:!1,t:V},animationDuration:{r:!1,t:A},range:{r:!0,t:C},orientation:{r:!1,t:j},margin:{r:!1,t:F},limit:{r:!1,t:I},padding:{r:!1,t:_},behaviour:{r:!0,t:D},ariaFormat:{r:!1,t:$},format:{r:!1,t:z},tooltips:{r:!1,t:H},keyboardSupport:{r:!0,t:R},documentElement:{r:!1,t:Y},cssPrefix:{r:!0,t:B},cssClasses:{r:!0,t:X},handleAttributes:{r:!1,t:J}},a={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:w,keyboardPageMultiplier:5,keyboardMultiplier:1,keyboardDefaultStep:10};t.format&&!t.ariaFormat&&(t.ariaFormat=t.format),Object.keys(n).forEach((function(i){if(r(t[i])||void 0!==a[i])n[i].t(e,r(t[i])?t[i]:a[i]);else if(n[i].r)throw new Error("noUiSlider: '"+i+"' is required.")})),e.pips=t.pips;var i=document.createElement("div"),o=void 0!==i.style.msTransform,s=void 0!==i.style.transform;e.transformRule=s?"transform":o?"msTransform":"webkitTransform";return e.style=[["left","top"],["right","bottom"]][e.dir][e.ort],e}function G(e,i,c){var f,h,m,g,v,y,S,b=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},x=window.CSS&&CSS.supports&&CSS.supports("touch-action","none")&&function(){var t=!1;try{var e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("test",null,e)}catch(t){}return t}(),w=e,P=i.spectrum,L=[],O=[],k=[],C=0,M={},T=e.ownerDocument,V=i.documentElement||T.documentElement,A=T.body,q="rtl"===T.dir||1===i.ort?0:100;function j(t,e){var n=T.createElement("div");return e&&u(n,e),t.appendChild(n),n}function F(t,e){var n=j(t,i.cssClasses.origin),r=j(n,i.cssClasses.handle);if(j(r,i.cssClasses.touchArea),r.setAttribute("data-handle",String(e)),i.keyboardSupport&&(r.setAttribute("tabindex","0"),r.addEventListener("keydown",(function(t){return function(t,e){if(U()||D(e))return!1;var n=["Left","Right"],r=["Down","Up"],a=["PageDown","PageUp"],o=["Home","End"];i.dir&&!i.ort?n.reverse():i.ort&&!i.dir&&(r.reverse(),a.reverse());var s,l=t.key.replace("Arrow",""),c=l===a[0],u=l===a[1],d=l===r[0]||l===n[0]||c,p=l===r[1]||l===n[1]||u,f=l===o[0],h=l===o[1];if(!(d||p||f||h))return!0;if(t.preventDefault(),p||d){var m=d?0:1,g=vt(e)[m];if(null===g)return!1;!1===g&&(g=P.getDefaultStep(O[e],d,i.keyboardDefaultStep)),g*=u||c?i.keyboardPageMultiplier:i.keyboardMultiplier,g=Math.max(g,1e-7),g*=d?-1:1,s=L[e]+g}else s=h?i.spectrum.xVal[i.spectrum.xVal.length-1]:i.spectrum.xVal[0];return pt(e,P.toStepping(s),!0,!0),ot("slide",e),ot("update",e),ot("change",e),ot("set",e),!1}(t,e)}))),void 0!==i.handleAttributes){var a=i.handleAttributes[e];Object.keys(a).forEach((function(t){r.setAttribute(t,a[t])}))}return r.setAttribute("role","slider"),r.setAttribute("aria-orientation",i.ort?"vertical":"horizontal"),0===e?u(r,i.cssClasses.handleLower):e===i.handles-1&&u(r,i.cssClasses.handleUpper),n}function I(t,e){return!!e&&j(t,i.cssClasses.connect)}function _(t,e){return!(!i.tooltips||!i.tooltips[e])&&j(t.firstChild,i.cssClasses.tooltip)}function U(){return w.hasAttribute("disabled")}function D(t){return h[t].hasAttribute("disabled")}function H(){v&&(it("update"+E),v.forEach((function(t){t&&n(t)})),v=null)}function J(){H(),v=h.map(_),at("update"+E,(function(t,e,n){if(v&&i.tooltips&&!1!==v[e]){var r=t[e];!0!==i.tooltips[e]&&(r=i.tooltips[e].to(n[e])),v[e].innerHTML=r}}))}function $(t,e){return t.map((function(t){return P.fromStepping(e?P.getStep(t):t)}))}function z(e){var n,r=function(e){if(e.mode===t.PipsMode.Range||e.mode===t.PipsMode.Steps)return P.xVal;if(e.mode===t.PipsMode.Count){if(e.values<2)throw new Error("noUiSlider: 'values' (>= 2) required for mode 'count'.");for(var n=e.values-1,r=100/n,a=[];n--;)a[n]=n*r;return a.push(100),$(a,e.stepped)}return e.mode===t.PipsMode.Positions?$(e.values,e.stepped):e.mode===t.PipsMode.Values?e.stepped?e.values.map((function(t){return P.fromStepping(P.getStep(P.toStepping(t)))})):e.values:[]}(e),a={},i=P.xVal[0],o=P.xVal[P.xVal.length-1],s=!1,l=!1,c=0;return(n=r.slice().sort((function(t,e){return t-e})),r=n.filter((function(t){return!this[t]&&(this[t]=!0)}),{}))[0]!==i&&(r.unshift(i),s=!0),r[r.length-1]!==o&&(r.push(o),l=!0),r.forEach((function(n,i){var o,u,d,p,f,h,m,g,v,y,S=n,b=r[i+1],x=e.mode===t.PipsMode.Steps;for(x&&(o=P.xNumSteps[i]),o||(o=b-S),void 0===b&&(b=S),o=Math.max(o,1e-7),u=S;u<=b;u=Number((u+o).toFixed(7))){for(g=(f=(p=P.toStepping(u))-c)/(e.density||1),y=f/(v=Math.round(g)),d=1;d<=v;d+=1)a[(h=c+d*y).toFixed(5)]=[P.fromStepping(h),0];m=r.indexOf(u)>-1?t.PipsType.LargeValue:x?t.PipsType.SmallValue:t.PipsType.NoValue,!i&&s&&u!==b&&(m=0),u===b&&l||(a[p.toFixed(5)]=[u,m]),c=p}})),a}function R(e,n,r){var a,o,s=T.createElement("div"),l=((a={})[t.PipsType.None]="",a[t.PipsType.NoValue]=i.cssClasses.valueNormal,a[t.PipsType.LargeValue]=i.cssClasses.valueLarge,a[t.PipsType.SmallValue]=i.cssClasses.valueSub,a),c=((o={})[t.PipsType.None]="",o[t.PipsType.NoValue]=i.cssClasses.markerNormal,o[t.PipsType.LargeValue]=i.cssClasses.markerLarge,o[t.PipsType.SmallValue]=i.cssClasses.markerSub,o),d=[i.cssClasses.valueHorizontal,i.cssClasses.valueVertical],p=[i.cssClasses.markerHorizontal,i.cssClasses.markerVertical];function f(t,e){var n=e===i.cssClasses.value,r=n?l:c;return e+" "+(n?d:p)[i.ort]+" "+r[t]}return u(s,i.cssClasses.pips),u(s,0===i.ort?i.cssClasses.pipsHorizontal:i.cssClasses.pipsVertical),Object.keys(e).forEach((function(a){!function(e,a,o){if((o=n?n(a,o):o)!==t.PipsType.None){var l=j(s,!1);l.className=f(o,i.cssClasses.marker),l.style[i.style]=e+"%",o>t.PipsType.NoValue&&((l=j(s,!1)).className=f(o,i.cssClasses.value),l.setAttribute("data-value",String(a)),l.style[i.style]=e+"%",l.innerHTML=String(r.to(a)))}}(a,e[a][0],e[a][1])})),s}function Y(){g&&(n(g),g=null)}function B(t){Y();var e=z(t),n=t.filter,r=t.format||{to:function(t){return String(Math.round(t))}};return g=w.appendChild(R(e,n,r))}function X(){var t=f.getBoundingClientRect(),e="offset"+["Width","Height"][i.ort];return 0===i.ort?t.width||f[e]:t.height||f[e]}function G(t,e,n,r){var a=function(a){var o,s,l=function(t,e,n){var r=0===t.type.indexOf("touch"),a=0===t.type.indexOf("mouse"),i=0===t.type.indexOf("pointer"),o=0,s=0;if(0===t.type.indexOf("MSPointer")&&(i=!0),"mousedown"===t.type&&!t.buttons&&!t.touches)return!1;if(r){var l=function(e){var r=e.target;return r===n||n.contains(r)||t.composed&&t.composedPath().shift()===n};if("touchstart"===t.type){var c=Array.prototype.filter.call(t.touches,l);if(c.length>1)return!1;o=c[0].pageX,s=c[0].pageY}else{var u=Array.prototype.find.call(t.changedTouches,l);if(!u)return!1;o=u.pageX,s=u.pageY}}return e=e||p(T),(a||i)&&(o=t.clientX+e.x,s=t.clientY+e.y),t.pageOffset=e,t.points=[o,s],t.cursor=a||i,t}(a,r.pageOffset,r.target||e);return!!l&&!(U()&&!r.doNotReject)&&(o=w,s=i.cssClasses.tap,!((o.classList?o.classList.contains(s):new RegExp("\\b"+s+"\\b").test(o.className))&&!r.doNotReject))&&!(t===b.start&&void 0!==l.buttons&&l.buttons>1)&&(!r.hover||!l.buttons)&&(x||l.preventDefault(),l.calcPoint=l.points[i.ort],void n(l,r))},o=[];return t.split(" ").forEach((function(t){e.addEventListener(t,a,!!x&&{passive:!0}),o.push([t,a])})),o}function K(t){var e,n,r,a,o,l,c=100*(t-(e=f,n=i.ort,r=e.getBoundingClientRect(),a=e.ownerDocument,o=a.documentElement,l=p(a),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(l.x=0),n?r.top+l.y-o.clientTop:r.left+l.x-o.clientLeft))/X();return c=s(c),i.dir?100-c:c}function Q(t,e){"mouseout"===t.type&&"HTML"===t.target.nodeName&&null===t.relatedTarget&&tt(t,e)}function Z(t,e){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===t.buttons&&0!==e.buttonsProperty)return tt(t,e);var n=(i.dir?-1:1)*(t.calcPoint-e.startCalcPoint);ct(n>0,100*n/e.baseSize,e.locations,e.handleNumbers,e.connect)}function tt(t,e){e.handle&&(d(e.handle,i.cssClasses.active),C-=1),e.listeners.forEach((function(t){V.removeEventListener(t[0],t[1])})),0===C&&(d(w,i.cssClasses.drag),dt(),t.cursor&&(A.style.cursor="",A.removeEventListener("selectstart",a))),e.handleNumbers.forEach((function(t){ot("change",t),ot("set",t),ot("end",t)}))}function et(t,e){if(!e.handleNumbers.some(D)){var n;1===e.handleNumbers.length&&(n=h[e.handleNumbers[0]].children[0],C+=1,u(n,i.cssClasses.active)),t.stopPropagation();var r=[],o=G(b.move,V,Z,{target:t.target,handle:n,connect:e.connect,listeners:r,startCalcPoint:t.calcPoint,baseSize:X(),pageOffset:t.pageOffset,handleNumbers:e.handleNumbers,buttonsProperty:t.buttons,locations:O.slice()}),s=G(b.end,V,tt,{target:t.target,handle:n,listeners:r,doNotReject:!0,handleNumbers:e.handleNumbers}),l=G("mouseout",V,Q,{target:t.target,handle:n,listeners:r,doNotReject:!0,handleNumbers:e.handleNumbers});r.push.apply(r,o.concat(s,l)),t.cursor&&(A.style.cursor=getComputedStyle(t.target).cursor,h.length>1&&u(w,i.cssClasses.drag),A.addEventListener("selectstart",a,!1)),e.handleNumbers.forEach((function(t){ot("start",t)}))}}function nt(t){t.stopPropagation();var e=K(t.calcPoint),n=function(t){var e=100,n=!1;return h.forEach((function(r,a){if(!D(a)){var i=O[a],o=Math.abs(i-t);(o<e||o<=e&&t>i||100===o&&100===e)&&(n=a,e=o)}})),n}(e);!1!==n&&(i.events.snap||o(w,i.cssClasses.tap,i.animationDuration),pt(n,e,!0,!0),dt(),ot("slide",n,!0),ot("update",n,!0),i.events.snap?et(t,{handleNumbers:[n]}):(ot("change",n,!0),ot("set",n,!0)))}function rt(t){var e=K(t.calcPoint),n=P.getStep(e),r=P.fromStepping(n);Object.keys(M).forEach((function(t){"hover"===t.split(".")[0]&&M[t].forEach((function(t){t.call(yt,r)}))}))}function at(t,e){M[t]=M[t]||[],M[t].push(e),"update"===t.split(".")[0]&&h.forEach((function(t,e){ot("update",e)}))}function it(t){var e=t&&t.split(".")[0],n=e?t.substring(e.length):t;Object.keys(M).forEach((function(t){var r=t.split(".")[0],a=t.substring(r.length);e&&e!==r||n&&n!==a||function(t){return t===N||t===E}(a)&&n!==a||delete M[t]}))}function ot(t,e,n){Object.keys(M).forEach((function(r){var a=r.split(".")[0];t===a&&M[r].forEach((function(t){t.call(yt,L.map(i.format.to),e,L.slice(),n||!1,O.slice(),yt)}))}))}function st(t,e,n,r,a,o){var l;return h.length>1&&!i.events.unconstrained&&(r&&e>0&&(l=P.getAbsoluteDistance(t[e-1],i.margin,!1),n=Math.max(n,l)),a&&e<h.length-1&&(l=P.getAbsoluteDistance(t[e+1],i.margin,!0),n=Math.min(n,l))),h.length>1&&i.limit&&(r&&e>0&&(l=P.getAbsoluteDistance(t[e-1],i.limit,!1),n=Math.min(n,l)),a&&e<h.length-1&&(l=P.getAbsoluteDistance(t[e+1],i.limit,!0),n=Math.max(n,l))),i.padding&&(0===e&&(l=P.getAbsoluteDistance(0,i.padding[0],!1),n=Math.max(n,l)),e===h.length-1&&(l=P.getAbsoluteDistance(100,i.padding[1],!0),n=Math.min(n,l))),!((n=s(n=P.getStep(n)))===t[e]&&!o)&&n}function lt(t,e){var n=i.ort;return(n?e:t)+", "+(n?t:e)}function ct(t,e,n,r,a){var i=n.slice(),o=r[0],s=[!t,t],l=[t,!t];r=r.slice(),t&&r.reverse(),r.length>1?r.forEach((function(t,n){var r=st(i,t,i[t]+e,s[n],l[n],!1);!1===r?e=0:(e=r-i[t],i[t]=r)})):s=l=[!0];var c=!1;r.forEach((function(t,r){c=pt(t,n[t]+e,s[r],l[r])||c})),c&&(r.forEach((function(t){ot("update",t),ot("slide",t)})),null!=a&&ot("drag",o))}function ut(t,e){return i.dir?100-t-e:t}function dt(){k.forEach((function(t){var e=O[t]>50?-1:1,n=3+(h.length+e*t);h[t].style.zIndex=String(n)}))}function pt(t,e,n,r,a){return a||(e=st(O,t,e,n,r,!1)),!1!==e&&(function(t,e){O[t]=e,L[t]=P.fromStepping(e);var n="translate("+lt(ut(e,0)-q+"%","0")+")";h[t].style[i.transformRule]=n,ft(t),ft(t+1)}(t,e),!0)}function ft(t){if(m[t]){var e=0,n=100;0!==t&&(e=O[t-1]),t!==m.length-1&&(n=O[t]);var r=n-e,a="translate("+lt(ut(e,r)+"%","0")+")",o="scale("+lt(r/100,"1")+")";m[t].style[i.transformRule]=a+" "+o}}function ht(t,e){return null===t||!1===t||void 0===t?O[e]:("number"==typeof t&&(t=String(t)),!1!==(t=i.format.from(t))&&(t=P.toStepping(t)),!1===t||isNaN(t)?O[e]:t)}function mt(t,e,n){var r=l(t),a=void 0===O[0];e=void 0===e||e,i.animate&&!a&&o(w,i.cssClasses.tap,i.animationDuration),k.forEach((function(t){pt(t,ht(r[t],t),!0,!1,n)}));var s=1===k.length?0:1;if(a&&P.hasNoSize()&&(n=!0,O[0]=0,k.length>1)){var c=100/(k.length-1);k.forEach((function(t){O[t]=t*c}))}for(;s<k.length;++s)k.forEach((function(t){pt(t,O[t],!0,!0,n)}));dt(),k.forEach((function(t){ot("update",t),null!==r[t]&&e&&ot("set",t)}))}function gt(t){if(void 0===t&&(t=!1),t)return 1===L.length?L[0]:L.slice(0);var e=L.map(i.format.to);return 1===e.length?e[0]:e}function vt(t){var e=O[t],n=P.getNearbySteps(e),r=L[t],a=n.thisStep.step,o=null;if(i.snap)return[r-n.stepBefore.startValue||null,n.stepAfter.startValue-r||null];!1!==a&&r+a>n.stepAfter.startValue&&(a=n.stepAfter.startValue-r),o=r>n.thisStep.startValue?n.thisStep.step:!1!==n.stepBefore.step&&r-n.stepBefore.highestStep,100===e?a=null:0===e&&(o=null);var s=P.countStepDecimals();return null!==a&&!1!==a&&(a=Number(a.toFixed(s))),null!==o&&!1!==o&&(o=Number(o.toFixed(s))),[o,a]}u(S=w,i.cssClasses.target),0===i.dir?u(S,i.cssClasses.ltr):u(S,i.cssClasses.rtl),0===i.ort?u(S,i.cssClasses.horizontal):u(S,i.cssClasses.vertical),u(S,"rtl"===getComputedStyle(S).direction?i.cssClasses.textDirectionRtl:i.cssClasses.textDirectionLtr),f=j(S,i.cssClasses.base),function(t,e){var n=j(e,i.cssClasses.connects);h=[],(m=[]).push(I(n,t[0]));for(var r=0;r<i.handles;r++)h.push(F(e,r)),k[r]=r,m.push(I(n,t[r+1]))}(i.connect,f),(y=i.events).fixed||h.forEach((function(t,e){G(b.start,t.children[0],et,{handleNumbers:[e]})})),y.tap&&G(b.start,f,nt,{}),y.hover&&G(b.move,f,rt,{hover:!0}),y.drag&&m.forEach((function(t,e){if(!1!==t&&0!==e&&e!==m.length-1){var n=h[e-1],r=h[e],a=[t],o=[n,r],s=[e-1,e];u(t,i.cssClasses.draggable),y.fixed&&(a.push(n.children[0]),a.push(r.children[0])),y.dragAll&&(o=h,s=k),a.forEach((function(e){G(b.start,e,et,{handles:o,handleNumbers:s,connect:t})}))}})),mt(i.start),i.pips&&B(i.pips),i.tooltips&&J(),it("update"+N),at("update"+N,(function(t,e,n,r,a){k.forEach((function(t){var e=h[t],r=st(O,t,0,!0,!0,!0),o=st(O,t,100,!0,!0,!0),s=a[t],l=String(i.ariaFormat.to(n[t]));r=P.fromStepping(r).toFixed(1),o=P.fromStepping(o).toFixed(1),s=P.fromStepping(s).toFixed(1),e.children[0].setAttribute("aria-valuemin",r),e.children[0].setAttribute("aria-valuemax",o),e.children[0].setAttribute("aria-valuenow",s),e.children[0].setAttribute("aria-valuetext",l)}))}));var yt={destroy:function(){for(it(N),it(E),Object.keys(i.cssClasses).forEach((function(t){d(w,i.cssClasses[t])}));w.firstChild;)w.removeChild(w.firstChild);delete w.noUiSlider},steps:function(){return k.map(vt)},on:at,off:it,get:gt,set:mt,setHandle:function(t,e,n,r){if(!((t=Number(t))>=0&&t<k.length))throw new Error("noUiSlider: invalid handle number, got: "+t);pt(t,ht(e,t),!0,!0,r),ot("update",t),n&&ot("set",t)},reset:function(t){mt(i.start,t)},__moveHandles:function(t,e,n){ct(t,e,O,n)},options:c,updateOptions:function(t,e){var n=gt(),a=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];a.forEach((function(e){void 0!==t[e]&&(c[e]=t[e])}));var o=W(c);a.forEach((function(e){void 0!==t[e]&&(i[e]=o[e])})),P=o.spectrum,i.margin=o.margin,i.limit=o.limit,i.padding=o.padding,i.pips?B(i.pips):Y(),i.tooltips?J():H(),O=[],mt(r(t.start)?t.start:n,e)},target:w,removePips:Y,removeTooltips:H,getPositions:function(){return O.slice()},getTooltips:function(){return v},getOrigins:function(){return h},pips:B};return yt}function K(t,e){if(!t||!t.nodeName)throw new Error("noUiSlider: create requires a single element, got: "+t);if(t.noUiSlider)throw new Error("noUiSlider: Slider was already initialized.");var n=G(t,W(e),e);return t.noUiSlider=n,n}var Q={__spectrum:b,cssClasses:w,create:K};t.create=K,t.cssClasses=w,t.default=Q,Object.defineProperty(t,"__esModule",{value:!0})}(e)}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";const t=class{mainRender(){return t=this,e=void 0,r=function*(){document.querySelector(".main").innerHTML='\n    <div class="first__page">\n      <div class="toy1"></div>\n      <div class="toy2"></div>\n      <div class="toy3"></div>\n      <h1 class="first__page-title">Новогодняя игра<span>«Наряди ёлку»</span></h1>\n      <button class="first__start-game">Начать</button>\n    </div>'},new((n=void 0)||(n=Promise))((function(a,i){function o(t){try{l(r.next(t))}catch(t){i(t)}}function s(t){try{l(r.throw(t))}catch(t){i(t)}}function l(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,s)}l((r=r.apply(t,e||[])).next())}));var t,e,n,r}};const e=class{getToyList(){return t=this,e=void 0,r=function*(){const t=yield fetch("./data.json");return yield t.json()},new((n=void 0)||(n=Promise))((function(a,i){function o(t){try{l(r.next(t))}catch(t){i(t)}}function s(t){try{l(r.throw(t))}catch(t){i(t)}}function l(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,s)}l((r=r.apply(t,e||[])).next())}));var t,e,n,r}};var r=n(211);const a=n.n(r)();class i{slidersRenderCount(){var t;const e=document.querySelector(".count-slider"),n=document.querySelectorAll(".toys-output");let r=[1,12];localStorage.getItem("valuesCount")&&(r=JSON.parse(localStorage.getItem("valuesCount"))),null!==e&&(null==a||a.create(e,{start:r,connect:!0,range:{min:1,max:12},step:1}),n[0].innerHTML=String((+r[0]).toFixed(0)),n[1].innerHTML=String((+r[1]).toFixed(0)),null===(t=e.noUiSlider)||void 0===t||t.on("change",((t,r)=>{n[r].innerHTML=`${(+t[r]).toFixed(0)}`,localStorage.setItem("valuesCount",JSON.stringify(e.noUiSlider.get()))})))}slidersRenderYears(){var t;const e=document.querySelector(".year-slider"),n=document.querySelectorAll(".toys-output");let r=[1940,2020];localStorage.getItem("valuesYear")&&(r=JSON.parse(localStorage.getItem("valuesYear"))),null!==e&&(null==a||a.create(e,{start:r,connect:!0,range:{min:1940,max:2020},step:10}),n[2].innerHTML=String((+r[0]).toFixed(0)),n[3].innerHTML=String((+r[1]).toFixed(0)),null===(t=e.noUiSlider)||void 0===t||t.on("change",((t,r)=>{n[r+2].innerHTML=`${(+t[r]).toFixed(0)}`,localStorage.setItem("valuesYear",JSON.stringify(e.noUiSlider.get()))})))}}class o{constructor(t,e){this.arr=[],this.array=[],this.arr=t,localStorage.getItem("object")&&(e=JSON.parse(localStorage.getItem("object"))),this.ObjectFlag=e}getFilterProperty(){var t,e,n,r;const a=Object.keys(this.ObjectFlag);for(let t=0;t<a.length-1;t++){const e=Object.keys(this.ObjectFlag[`${a[t]}`]),n=document.querySelector(`.${a[t]}`);for(let r=0;r<e.length;r++)!0===this.ObjectFlag[a[t]][e[r]]?null==n||n.querySelectorAll("button")[r].classList.add("active"):null==n||n.querySelectorAll("button")[r].classList.remove("active")}const i=document.querySelector(".favorite__input");if(null!==i&&(1==this.ObjectFlag[a[3]].favorite?i.checked=!0:i.checked=!1),null!==(null===(t=document.querySelector(`.${a[0]}`))||void 0===t?void 0:t.querySelector(".active"))){this.array=[];const t=Object.keys(this.ObjectFlag[a[0]]);for(let e=0;e<a[0].length;e++)!0===this.ObjectFlag[a[0]][t[e]]&&this.arr.forEach((n=>{t[e]===n[a[0]]&&this.array.push(n)}));this.arr=this.array}if(null!==(null===(e=document.querySelector(`.${a[1]}`))||void 0===e?void 0:e.querySelector(".active"))){this.array=[];const t=Object.keys(this.ObjectFlag[a[1]]);for(let e=0;e<a[1].length;e++)!0===this.ObjectFlag[a[1]][t[e]]&&this.arr.forEach((n=>{t[e]===n[a[1]]&&this.array.push(n)}));this.arr=this.array}if(null!==(null===(n=document.querySelector(`.${a[2]}`))||void 0===n?void 0:n.querySelector(".active"))){this.array=[];const t=Object.keys(this.ObjectFlag[a[2]]);for(let e=0;e<a[2].length;e++)!0===this.ObjectFlag[a[2]][t[e]]&&this.arr.forEach((n=>{t[e]===n[a[2]]&&this.array.push(n)}));this.arr=this.array}if(null===(r=document.querySelector(".favorite__input"))||void 0===r?void 0:r.checked){this.array=[];const t=Object.keys(this.ObjectFlag[a[3]]);this.arr.forEach((e=>{!0===e[t[0]]&&this.array.push(e)})),this.arr=this.array}return localStorage.setItem("object",JSON.stringify(this.ObjectFlag)),this.arr}}class s extends o{constructor(t,e,n,r){super(t,r),this.array=[],this.nodeList=e,this.element=n}getObjFilters(){const t=this.element.parentNode.dataset.filter,e=this.element.dataset.filter;"INPUT"==this.element.nodeName?!1===this.ObjectFlag[t][e]?(this.element.checked=!0,this.ObjectFlag[t][e]=!0):(this.ObjectFlag[t][e]=!1,this.element.checked=!1):!0===this.ObjectFlag[t][e]?(this.element.classList.toggle("active"),this.ObjectFlag[t][e]=!1):(this.ObjectFlag[t][e]=!0,this.element.classList.toggle("active"))}}let l=[1940,1950,1960,1970,1980,1990,2e3,2010,2020],c=[1,2,3,4,5,6,7,8,9,10,11,12];function u(t,e){const n=new o(t,e).getFilterProperty(),r=[];return n.forEach((t=>{for(let e=0;e<l.length;e++)+t.year===l[e]&&c.forEach((e=>{e===+t.count&&r.push(t)}))})),r}function d(t,e,n,r){return"count"===n&&(c=e),"year"===n&&(l=e),u(t,r)}const p=function(t){switch(document.querySelector(".sort-select").value){case"sort-name-max":t.sort(((t,e)=>t.name>e.name?1:-1));break;case"sort-name-min":t.sort(((t,e)=>t.name<e.name?1:-1));break;case"sort-year-max":t.sort(((t,e)=>+t.year>+e.year?1:-1));break;case"sort-year-min":t.sort(((t,e)=>+t.year<+e.year?1:-1))}return t};function f(t,e){return t.filter((t=>-1!==t.name.toLowerCase().indexOf(e.toLowerCase())))}let h=0;function m(t){const e=document.querySelector(".main__container");if(null!==e&&0===h){h=1;const n=document.createElement("div");n.className="overlay";const r=document.createElement("div"),a=document.createElement("div");a.className="close",r.className="popup",r.innerHTML=t,r.append(a),e.append(n),e.append(r),a.addEventListener("click",(()=>{r.remove(),n.remove(),h=0}))}}let g=[];localStorage.getItem("arrayFavorite")&&(g=JSON.parse(localStorage.getItem("arrayFavorite")));const v={shape:{шар:!1,колокольчик:!1,шишка:!1,снежинка:!1,фигурка:!1},color:{белый:!1,желтый:!1,красный:!1,синий:!1,зелёный:!1},size:{большой:!1,средний:!1,малый:!1},favorites:{favorite:!1}};function y(){const t=document.querySelector(".snow-setting"),e=setInterval((()=>{t.classList.contains("active")?function(){const t=document.querySelector(".tree-snow-container"),e=document.createElement("i");e.classList.add("fa-snowflake"),e.style.left=Math.random()*((null==t?void 0:t.clientWidth)-20)+"px",e.style.animationDuration=3*Math.random()+2+"s",e.style.opacity=`${Math.random()}`,e.style.width=10*Math.random()+10+"px",null==t||t.appendChild(e),setTimeout((()=>{e.remove()}),5e3)}():clearInterval(e)}),50)}const S=document.querySelector(".page-main"),b=document.querySelector(".page-first"),x=document.querySelector(".page-second");!function(){let n=new t,r=0;function a(){var o,l,c;switch(localStorage.getItem("count")&&(r=JSON.parse(localStorage.getItem("count"))),r){case 0:n=new t,n.mainRender(),null===(o=document.querySelector(".header__controls"))||void 0===o||o.setAttribute("id","hidden");break;case 1:n=new class{mainRender(){return t=this,e=void 0,r=function*(){const t=document.querySelector(".main");t.innerHTML="";const e=document.createElement("div"),n=document.createElement("div"),r=document.createElement("div");e.className="background-blur",n.className="main__container",r.className="card__container",n.innerHTML='\n        <div class="controls-panel">                  \n          <div class="filters-meaning">\n              <div class="controls-title">Фильтры по значению</div>\n              <div data-filter ="shape" class="shape">Форма:  \n                  <button data-filter="шар"></button>\n                  <button data-filter="колокольчик"></button>\n                  <button data-filter="шишка"></button>\n                  <button data-filter="снежинка"></button>\n                  <button data-filter="фигурка"></button>\n              </div>\n              <div data-filter ="color" class="color">Цвет:   \n                  <button data-filter="белый"></button>\n                  <button data-filter="желтый"></button>\n                  <button data-filter="красный"></button>\n                  <button data-filter="синий"></button>\n                  <button data-filter="зелёный"></button>\n              </div>\n              <div data-filter ="size" class="size">Размер: \n                  <button data-filter="большой"></button>\n                  <button data-filter="средний"></button>\n                  <button data-filter="малый"></button>\n              </div>\n              <div class="favorite__toys">Только любимые:\n                  <div data-filter ="favorites"class="favorite__form favorites">\n                    <input type="checkbox" data-filter ="favorite" class="favorite__input" id="checkbox"/>\n                    <label for="checkbox" class="favorite__input-label"></label>\n                  </div>   \n              </div> \n          </div>\n          <div class="filters-range">\n                <div class="controls-title">Фильтры по диапазону</div>\n                <div class="count-toys">\n                    <span class="control-span">Количество экземпляров:</span> \n                    <div data-filter ="count-slider" class="count-toys-container">\n                        <output class="toys-output">1</output>\n                        <div class="count-slider"></div>\n                        <output class="toys-output">12</output>\n                    </div>          \n                </div>\n                <div class="year">\n                <span class="control-span">Год приобретения:</span> \n                    <div data-filter ="years-slider" class="year-toys-container">\n                        <output class="toys-output">1940</output>\n                        <div class="year-slider"></div>\n                        <output class="toys-output">2020</output>\n                    </div>          \n                </div>\n          </div>\n          <div class="filters-sort">\n              <div class="controls-title">Сортировка</div>\n              <select class="sort-select">\n                <option selected value="sort-name-max">По названию от «А» до «Я»</option>\n                <option value="sort-name-min">По названию от «Я» до «А»</option>\n                <option value="sort-year-max">По году приобретения первые</option>\n                <option value="sort-year-min">По году приобретения последние</option>\n              </select>\n              <button class="resetSettings">Сброс настроек</button>\n              <button class="reset">Сброс фильтров</button>\n          </div>\n        </div> ',t.append(e),e.append(n),e.append(r)},new((n=void 0)||(n=Promise))((function(a,i){function o(t){try{l(r.next(t))}catch(t){i(t)}}function s(t){try{l(r.throw(t))}catch(t){i(t)}}function l(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,s)}l((r=r.apply(t,e||[])).next())}));var t,e,n,r}},n.mainRender(),null===(l=document.querySelector(".header__controls"))||void 0===l||l.removeAttribute("id"),(new class{getCard(){var t,n,r,a,o,l,c;return a=this,o=void 0,c=function*(){const a=document.querySelector(".favorite__input"),o=document.querySelectorAll(".toys-output"),l=document.querySelector(".count-slider"),c=document.querySelector(".year-slider"),h=document.querySelector(".search"),y=document.querySelector(".sort-select"),S=new i;S.slidersRenderCount(),S.slidersRenderYears();const b=new e,x=yield b.getToyList();let w=!1,E=[];const N=x;let P=!1;function L(t){let e=u(P?f(N,h.value):t,v);!1!==w&&(e=p(e)),function(t){const e=document.querySelector(".card__container");null!==e&&(e.innerHTML=""),document.querySelector(".selected span").innerHTML=`${g.length}`,t.forEach((t=>{const n=document.createElement("div");n.className="card",n.dataset.num=t.num,n.innerHTML=`\n    <h2 class="card__title">${t.name}</h2>\n    <img src="./assets/toys/${t.num}.png" alt="toy" class="card-img">\n    <div class="card__info">\n      <p class="count">Количество: <span>${t.count}</span></p>\n      <p class="year">Год покупки: <span>${t.year}</span></p>\n      <p class="form">Форма: <span>${t.shape}</span></p>\n      <p class="color">Цвет: <span>${t.color}</span></p>\n      <p class="size">Размер: <span>${t.size}</span></p>\n      <p class="favorite">Любимая: <span>${t.favorite?"да":"нет"}</span></p>\n    </div>\n    <div class="mark"></div>`,e.append(n),g.forEach((e=>{JSON.stringify(e)===JSON.stringify(t)&&n.lastChild.classList.add("active")})),n.addEventListener("click",(()=>{!function(t,e){g.length<20?e.lastChild.classList.contains("active")?(e.lastChild.classList.toggle("active"),g=g.filter((e=>JSON.stringify(e)!==JSON.stringify(t)))):(g.push(t),e.lastChild.classList.toggle("active")):e.lastChild.classList.contains("active")?(e.lastChild.classList.toggle("active"),g=g.filter((e=>JSON.stringify(e)!==JSON.stringify(t)))):m("Извините, все слоты заполнены"),document.querySelector(".selected span").innerHTML=`${g.length}`,localStorage.setItem("arrayFavorite",JSON.stringify(g))}(t,n)}))}))}(e),0===e.length&&m("Извините, совпадений не обнаружено")}localStorage.getItem("isCountSort")&&(w=JSON.parse(localStorage.getItem("isCountSort"))),localStorage.getItem("flagSearch")&&(P=JSON.parse(localStorage.getItem("flagSearch"))),localStorage.getItem("SortData")&&(y.value=JSON.parse(localStorage.getItem("SortData"))),localStorage.getItem("SortSearch")&&(h.value=JSON.parse(localStorage.getItem("SortSearch"))),L(N);const O=document.querySelectorAll(".filters-meaning button, .favorite__input");O.forEach((t=>{t.addEventListener("click",(()=>{E=function(t){const e=new s(N,O,t,v);return e.getObjFilters(),E=e.getFilterProperty(),E}(t),L(E)}))}));const k=[],C=[];null!==l&&(null===(t=l.noUiSlider)||void 0===t||t.on("update",(t=>{k.length=0;const e=t.map((t=>(+t).toFixed(0)));for(let t=+e[0];t<=+e[1];t++)k.push(t);E=d(N,k,"count",v),L(E)}))),null!==c&&(null===(n=c.noUiSlider)||void 0===n||n.on("update",(t=>{C.length=0;const e=t.map((t=>(+t).toFixed(0)));for(let t=+e[0];t<=+e[1];)C.push(t),t+=10;E=d(N,C,"year",v),L(E)}))),null!==y&&y.addEventListener("input",(()=>{w=!0,localStorage.setItem("SortData",JSON.stringify(y.value)),localStorage.setItem("isCountSort",JSON.stringify(w)),E=u(N,v),E=p(E),L(E)})),h.addEventListener("change",(()=>{localStorage.setItem("SortSearch",JSON.stringify(h.value)),localStorage.setItem("flagSearch",JSON.stringify(P)),h.value.length>0&&(P=!0),L(f(N,h.value))}));const M=document.querySelector(".reset");null==M||M.addEventListener("click",(()=>{var t,e;P=!1,function(t,e,n,r){for(const e in t)for(const n in t[e])t[e][n]=!1;localStorage.setItem("object",JSON.stringify(t)),e.forEach((t=>{t.classList.remove("active")})),r.checked=!1,n.value=""}(v,O,h,a),null===(t=l.noUiSlider)||void 0===t||t.set([1,12]),null===(e=c.noUiSlider)||void 0===e||e.set([1940,2020]),o[0].innerHTML="1",o[1].innerHTML="12",o[2].innerHTML="1940",o[3].innerHTML="2020",L(N)})),null===(r=document.querySelector(".resetSettings"))||void 0===r||r.addEventListener("click",(()=>{localStorage.clear()}))},new((l=void 0)||(l=Promise))((function(t,e){function n(t){try{i(c.next(t))}catch(t){e(t)}}function r(t){try{i(c.throw(t))}catch(t){e(t)}}function i(e){var a;e.done?t(e.value):(a=e.value,a instanceof l?a:new l((function(t){t(a)}))).then(n,r)}i((c=c.apply(a,o||[])).next())}))}}).getCard();break;case 2:n=new class{mainRender(){return t=this,e=void 0,r=function*(){const t=document.querySelector(".main");t.innerHTML="";const e=document.createElement("div");e.className="background-blur",e.innerHTML='\n          <div class = "second-container">\n            <div class="settings-menu">\n              <div class="snow-audio-settings">\n                <div class="audio-setting"></div>\n                <div class="snow-setting"></div>\n                <div class="storage-setting">Сброс настроек</div>\n              </div>\n              <div class="tree-settings">\n                <h2 class="title-tree-settings">ВЫБЕРИТЕ ЁЛКУ</h2>\n                <div class="tree-settings-container">\n                  <div class="green-tree tree-item" data-tree="1"></div>\n                  <div class="green-tree tree-item" data-tree="2"></div>\n                  <div class="green-tree tree-item" data-tree="3"></div>\n                  <div class="green-tree tree-item" data-tree="4"></div>\n                  <div class="green-tree tree-item" data-tree="5"></div>\n                  <div class="green-tree tree-item" data-tree="6"></div>\n                </div>\n              </div>\n              <div class="bg-settings">\n                <h2 class="title-bg-settings">ВЫБЕРИТЕ ФОН</h2>\n                <div class="bg-items">\n                  <div class="bg-item" data-bg="1"></div>\n                  <div class="bg-item" data-bg="2"></div>\n                  <div class="bg-item" data-bg="3"></div>\n                  <div class="bg-item" data-bg="4"></div>\n                  <div class="bg-item" data-bg="5"></div>\n                  <div class="bg-item" data-bg="6"></div>\n                  <div class="bg-item" data-bg="7"></div>\n                  <div class="bg-item" data-bg="8"></div>\n                </div>  \n              </div>\n              <div class="lights-settings">\n                <h2 class="title-lights-settings">ГИРЛЯНДА</h2>\n                <div class="lights">\n                  <div class="lights-btn">\n                    <button class="btn-color multicolor-btn" data-color="multicolor"></button>\n                    <button class="btn-color red-btn" data-color="red"></button>\n                    <button class="btn-color blue-btn" data-color="blue"></button>\n                    <button class="btn-color yellow-btn" data-color="yellow"></button>\n                    <button class="btn-color green-btn" data-color="green"></button>\n                  </div>\n                  <button class="turn-lights">\n                    <input type="checkbox" name="turn-lights" class="turn-lights-checkbox" id="turn-lights-id">\n                    <label class="turn-lights-label" for="turn-lights-id">\n                      <div class="turn-lights-inner"></div>\n                      <div class="turn-lights-switch"></div>\n                    </label>\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div class="tree-container">\n              <div class="tree-snow-container">\n              </div>\n              <div class="tree-lights-container"></div>\n              <map name="tree-map">\n                <area coords="365,699,189,706,113,683,31,608,2,555,2,539,18,437,73,351,106,224,161,134,243,-1,306,75,353,144,399,221,424,359,452,459,496,550,444,664" shape="poly">\n              </map>\n              <map name="tree-map" class="map"></map>\n              <img src="" class="main-tree" usemap="#tree-map" alt="tree">\n            </div>\n            <div class="choice-menu">\n              <div class="choice-favorite">\n                <h2 class="choice-favorite-title">ИГРУШКИ</h2>\n                <div class="choice-favorite-toys">\n                </div>\n              </div>\n              <div class="choice-tree">\n                <h2 class="tree-decorate-title">ВЫ НАРЯДИЛИ</h2>\n                <div class="tree-decorate-container">\n                  <div class="tree-decorate"></div>\n                  <div class="tree-decorate"></div>\n                  <div class="tree-decorate"></div>\n                  <div class="tree-decorate"></div>\n                </div>\n              </div>\n            </div>\n          </div>',t.append(e)},new((n=void 0)||(n=Promise))((function(a,i){function o(t){try{l(r.next(t))}catch(t){i(t)}}function s(t){try{l(r.throw(t))}catch(t){i(t)}}function l(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,s)}l((r=r.apply(t,e||[])).next())}));var t,e,n,r}},n.mainRender(),null===(c=document.querySelector(".header__controls"))||void 0===c||c.setAttribute("id","hidden"),(new class{getPageTree(){var t,n,r,a,i;return n=this,r=void 0,i=function*(){!function(){let t=!1;const e=document.querySelector(".audio-setting"),n=document.querySelector(".audio");function r(){e.classList.toggle("active"),n.volume=.4,n.play(),window.removeEventListener("click",r)}localStorage.getItem("isPlay")&&(t=JSON.parse(localStorage.getItem("isPlay"))),window.addEventListener("load",(()=>{t&&window.addEventListener("click",r)})),e.addEventListener("click",(r=>{r.stopPropagation(),e.classList.toggle("active"),e.classList.contains("active")?(n.volume=.4,n.play(),t=!0):(n.pause(),t=!1),localStorage.setItem("isPlay",JSON.stringify(t))}))}();let n=!1;const r=document.querySelector(".snow-setting");localStorage.getItem("isSnow")&&(n=JSON.parse(localStorage.getItem("isSnow"))),!0===n&&(r.classList.add("active"),y()),localStorage.setItem("isSnow",JSON.stringify(n)),r.addEventListener("click",(()=>{r.classList.toggle("active"),n=!!r.classList.contains("active"),localStorage.setItem("isSnow",JSON.stringify(n)),y()})),null===(t=document.querySelector(".storage-setting"))||void 0===t||t.addEventListener("click",(()=>{localStorage.clear()})),function(){const t=document.querySelectorAll(".green-tree"),e=document.querySelector(".main-tree");let n="1";localStorage.getItem("isTree")&&(n=JSON.parse(localStorage.getItem("isTree"))),e.src=`../../assets/tree/-${n}.png`,t.forEach((t=>{t.addEventListener("click",(r=>{console.log(r.currentTarget),e.src=`../../assets/tree/-${t.dataset.tree}.png`,n=t.dataset.tree,localStorage.setItem("isTree",JSON.stringify(n))}))}))}(),function(){let t="1";const e=document.querySelector(".tree-container"),n=document.querySelectorAll(".bg-items");localStorage.getItem("isBgNumber")&&(t=JSON.parse(localStorage.getItem("isBgNumber"))),e.style.backgroundImage=`url(../../assets/bg/${t}.jpg)`,n.forEach((n=>{n.addEventListener("click",(n=>{n.stopPropagation(),e.style.backgroundImage=`url(../../assets/bg/${n.target.dataset.bg}.jpg)`,t=n.target.dataset.bg,localStorage.setItem("isBgNumber",JSON.stringify(t))}))}))}(),function(){const t=document.querySelector("#turn-lights-id"),e=document.querySelector(".tree-lights-container");t.addEventListener("click",(()=>{const t=[[88,5],[80,9],[86,13],[80,18],[82,18],[78,20],[70,28],[74,38]];for(let n=0;n<8;n++){const r=document.createElement("ul");r.classList.add("chain-garland");const a=120+60*n,i=120+60*n;r.style.height=`${i}px`,r.style.width=`${a}px`;let o=t[n][0];for(let e=0;e<t[n][1];e++){const t=document.createElement("li");t.style.transform=`rotate(${o}deg) translate(${i-50}px) rotate(-${o}deg)`,t.classList.add("li"),console.log(o),o+=2,r.append(t)}e.append(r)}}))}();const a=new e;let i=(yield a.getToyList()).slice(0,20);localStorage.getItem("arrayFavorite")&&(i=JSON.parse(localStorage.getItem("arrayFavorite")).length>0?JSON.parse(localStorage.getItem("arrayFavorite")):i);const o=document.querySelector(".choice-favorite-toys");i.forEach(((t,e)=>{const n=document.createElement("div");n.className="choice-toy",n.dataset.num=`${e}`;const r=document.createElement("p");r.className="choice-number-img",r.innerText=t.count;const a=[];for(let n=0;n<+t.count;n++){const r=document.createElement("img");r.className="choice-img",r.alt="toy",r.draggable=!0,r.dataset.number=`${e}`,r.id=`${t.num}-${n}`,r.src=`../../assets/toys/${t.num}.png`,a.push(r)}n.append(r),n.append(...a),null==o||o.append(n)})),function(){const t=document.querySelector("area"),e=document.querySelectorAll(".choice-img"),n=document.querySelectorAll(".choice-toy");let r,a;function i(t){var e;r=t.offsetX,a=t.offsetY,null===(e=t.dataTransfer)||void 0===e||e.setData("text",t.target.id)}function o(t){const e=t.target.dataset.number;r!==t.offsetX&&a!==t.offsetY&&(n[+e].append(t.target),t.target.style.left="",t.target.style.top=""),console.log(n[+e]),console.log(n[+e].firstChild),console.log(t.target),n[+e].firstChild.innerHTML=`${n[+e].querySelectorAll(".choice-img").length}`}function s(e){var n,i;if(e.preventDefault(),"drop"!=e.type)return;const o=null===(n=e.dataTransfer)||void 0===n?void 0:n.getData("text"),s=document.getElementById(o);s.style.left=e.pageX-r+"px",s.style.top=e.pageY-a-70+"px",t==e.target&&(s.parentNode.removeChild(s),null===(i=e.target)||void 0===i||i.appendChild(s))}e.forEach((t=>{t.addEventListener("dragstart",i),t.addEventListener("dragend",o)})),t.addEventListener("dragover",s),t.addEventListener("drop",s)}()},new((a=void 0)||(a=Promise))((function(t,e){function o(t){try{l(i.next(t))}catch(t){e(t)}}function s(t){try{l(i.throw(t))}catch(t){e(t)}}function l(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(t){t(n)}))).then(o,s)}l((i=i.apply(n,r||[])).next())}))}}).getPageTree()}const h=document.querySelector(".first__start-game");null==h||h.addEventListener("click",(()=>{r=1,localStorage.setItem("count",JSON.stringify(r)),a()}))}const o=document.querySelector(".first__start-game");null==o||o.addEventListener("click",(()=>{r=1,localStorage.setItem("count",JSON.stringify(r)),a()})),S.addEventListener("click",(()=>{r=0,localStorage.setItem("count",JSON.stringify(r)),a()})),b.addEventListener("click",(()=>{r=1,localStorage.setItem("count",JSON.stringify(r)),a()})),x.addEventListener("click",(()=>{r=2,localStorage.setItem("count",JSON.stringify(r)),a()})),a()}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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UjVCLGFBQWFJLFFBQVEsUUFBU0YsS0FBS0csVUFBVXVCLElBQzdDb0MsT0FFRkEsSVV2RUYwRixJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL25vdWlzbGlkZXIvZGlzdC9ub3Vpc2xpZGVyLmpzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3Qvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3Qvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9zcmMvbWFpblBhZ2UvcmVuZGVyL3JlbmRlci50cyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9zcmMvbG9hZGVyL2xvYWRlci50cyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9zcmMvZmlyc3RQYWdlL3NsaWRlci9zbGlkZXJzUmVuZGVyLnRzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3NyYy9maXJzdFBhZ2UvZmlsdGVycy9maWx0ZXJQcm9wZXJ0eS50cyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9zcmMvZmlyc3RQYWdlL2ZpbHRlcnMvY2hhbmdlT2JqZWN0LnRzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3NyYy9maXJzdFBhZ2UvZmlsdGVycy9vdGhlckZpbHRlci50cyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9zcmMvZmlyc3RQYWdlL3JlbmRlckNhcmQvcmVuZGVyQ2FyZC50cyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9zcmMvZmlyc3RQYWdlL2NvbnRyb2xsZXJGaWx0ZXJzL3ZhcmlhYmxlcy9vYmplY3QudHMiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vc3JjL3NlY29uZFBhZ2Uvc25vd0Rvd24vc25vd0Rvd24udHMiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vc3JjL3NlY29uZFBhZ2UvdHJlZVJlbmRlci90cmVlUmVuZGVyLnRzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3NyYy90dXJuZXIudHMiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vc3JjL2ZpcnN0UGFnZS9yZW5kZXIvcmVuZGVyLnRzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3NyYy9maXJzdFBhZ2UvY29udHJvbGxlckZpbHRlcnMvQ29udHJvbGxlckZpbHRlcnMudHMiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vc3JjL2ZpcnN0UGFnZS9yZXNldC9yZXNldC50cyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9zcmMvc2Vjb25kUGFnZS9yZW5kZXIvcmVuZGVyLnRzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3NyYy9zZWNvbmRQYWdlL2F1ZGlvUGxheS9hdWRpb1BsYXkudHMiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vc3JjL3NlY29uZFBhZ2UvdHJlZXNTdGFydC90cmVlc1N0YXJ0LnRzIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3NyYy9zZWNvbmRQYWdlL2JnU3RhcnQvYmdTdGFydC50cyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9zcmMvc2Vjb25kUGFnZS90cmVlUmVuZGVyL2dldEdhcmxhbmQvZ2V0R2FybGFuZC50cyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9zcmMvc2Vjb25kUGFnZS90cmVlUmVuZGVyL2hhbmRsZURyYWdnbGUvaGFuZGxlRHJhZ2dsZS50cyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC5ub1VpU2xpZGVyID0ge30pKTtcbn0odGhpcywgKGZ1bmN0aW9uIChleHBvcnRzKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIGV4cG9ydHMuUGlwc01vZGUgPSB2b2lkIDA7XG4gICAgKGZ1bmN0aW9uIChQaXBzTW9kZSkge1xuICAgICAgICBQaXBzTW9kZVtcIlJhbmdlXCJdID0gXCJyYW5nZVwiO1xuICAgICAgICBQaXBzTW9kZVtcIlN0ZXBzXCJdID0gXCJzdGVwc1wiO1xuICAgICAgICBQaXBzTW9kZVtcIlBvc2l0aW9uc1wiXSA9IFwicG9zaXRpb25zXCI7XG4gICAgICAgIFBpcHNNb2RlW1wiQ291bnRcIl0gPSBcImNvdW50XCI7XG4gICAgICAgIFBpcHNNb2RlW1wiVmFsdWVzXCJdID0gXCJ2YWx1ZXNcIjtcbiAgICB9KShleHBvcnRzLlBpcHNNb2RlIHx8IChleHBvcnRzLlBpcHNNb2RlID0ge30pKTtcbiAgICBleHBvcnRzLlBpcHNUeXBlID0gdm9pZCAwO1xuICAgIChmdW5jdGlvbiAoUGlwc1R5cGUpIHtcbiAgICAgICAgUGlwc1R5cGVbUGlwc1R5cGVbXCJOb25lXCJdID0gLTFdID0gXCJOb25lXCI7XG4gICAgICAgIFBpcHNUeXBlW1BpcHNUeXBlW1wiTm9WYWx1ZVwiXSA9IDBdID0gXCJOb1ZhbHVlXCI7XG4gICAgICAgIFBpcHNUeXBlW1BpcHNUeXBlW1wiTGFyZ2VWYWx1ZVwiXSA9IDFdID0gXCJMYXJnZVZhbHVlXCI7XG4gICAgICAgIFBpcHNUeXBlW1BpcHNUeXBlW1wiU21hbGxWYWx1ZVwiXSA9IDJdID0gXCJTbWFsbFZhbHVlXCI7XG4gICAgfSkoZXhwb3J0cy5QaXBzVHlwZSB8fCAoZXhwb3J0cy5QaXBzVHlwZSA9IHt9KSk7XG4gICAgLy9yZWdpb24gSGVscGVyIE1ldGhvZHNcbiAgICBmdW5jdGlvbiBpc1ZhbGlkRm9ybWF0dGVyKGVudHJ5KSB7XG4gICAgICAgIHJldHVybiBpc1ZhbGlkUGFydGlhbEZvcm1hdHRlcihlbnRyeSkgJiYgdHlwZW9mIGVudHJ5LmZyb20gPT09IFwiZnVuY3Rpb25cIjtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNWYWxpZFBhcnRpYWxGb3JtYXR0ZXIoZW50cnkpIHtcbiAgICAgICAgLy8gcGFydGlhbCBmb3JtYXR0ZXJzIG9ubHkgbmVlZCBhIHRvIGZ1bmN0aW9uIGFuZCBub3QgYSBmcm9tIGZ1bmN0aW9uXG4gICAgICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGVudHJ5LnRvID09PSBcImZ1bmN0aW9uXCI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoZWwpIHtcbiAgICAgICAgZWwucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChlbCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBCaW5kYWJsZSB2ZXJzaW9uXG4gICAgZnVuY3Rpb24gcHJldmVudERlZmF1bHQoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIC8vIFJlbW92ZXMgZHVwbGljYXRlcyBmcm9tIGFuIGFycmF5LlxuICAgIGZ1bmN0aW9uIHVuaXF1ZShhcnJheSkge1xuICAgICAgICByZXR1cm4gYXJyYXkuZmlsdGVyKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXNbYV0gPyAodGhpc1thXSA9IHRydWUpIDogZmFsc2U7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9XG4gICAgLy8gUm91bmQgYSB2YWx1ZSB0byB0aGUgY2xvc2VzdCAndG8nLlxuICAgIGZ1bmN0aW9uIGNsb3Nlc3QodmFsdWUsIHRvKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlIC8gdG8pICogdG87XG4gICAgfVxuICAgIC8vIEN1cnJlbnQgcG9zaXRpb24gb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byB0aGUgZG9jdW1lbnQuXG4gICAgZnVuY3Rpb24gb2Zmc2V0KGVsZW0sIG9yaWVudGF0aW9uKSB7XG4gICAgICAgIHZhciByZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdmFyIGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcbiAgICAgICAgdmFyIGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICB2YXIgcGFnZU9mZnNldCA9IGdldFBhZ2VPZmZzZXQoZG9jKTtcbiAgICAgICAgLy8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGNvbnRhaW5zIGxlZnQgc2Nyb2xsIGluIENocm9tZSBvbiBBbmRyb2lkLlxuICAgICAgICAvLyBJIGhhdmVuJ3QgZm91bmQgYSBmZWF0dXJlIGRldGVjdGlvbiB0aGF0IHByb3ZlcyB0aGlzLiBXb3JzdCBjYXNlXG4gICAgICAgIC8vIHNjZW5hcmlvIG9uIG1pcy1tYXRjaDogdGhlICd0YXAnIGZlYXR1cmUgb24gaG9yaXpvbnRhbCBzbGlkZXJzIGJyZWFrcy5cbiAgICAgICAgaWYgKC93ZWJraXQuKkNocm9tZS4qTW9iaWxlL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgICAgICAgcGFnZU9mZnNldC54ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3JpZW50YXRpb24gPyByZWN0LnRvcCArIHBhZ2VPZmZzZXQueSAtIGRvY0VsZW0uY2xpZW50VG9wIDogcmVjdC5sZWZ0ICsgcGFnZU9mZnNldC54IC0gZG9jRWxlbS5jbGllbnRMZWZ0O1xuICAgIH1cbiAgICAvLyBDaGVja3Mgd2hldGhlciBhIHZhbHVlIGlzIG51bWVyaWNhbC5cbiAgICBmdW5jdGlvbiBpc051bWVyaWMoYSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGEgPT09IFwibnVtYmVyXCIgJiYgIWlzTmFOKGEpICYmIGlzRmluaXRlKGEpO1xuICAgIH1cbiAgICAvLyBTZXRzIGEgY2xhc3MgYW5kIHJlbW92ZXMgaXQgYWZ0ZXIgW2R1cmF0aW9uXSBtcy5cbiAgICBmdW5jdGlvbiBhZGRDbGFzc0ZvcihlbGVtZW50LCBjbGFzc05hbWUsIGR1cmF0aW9uKSB7XG4gICAgICAgIGlmIChkdXJhdGlvbiA+IDApIHtcbiAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIExpbWl0cyBhIHZhbHVlIHRvIDAgLSAxMDBcbiAgICBmdW5jdGlvbiBsaW1pdChhKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihhLCAxMDApLCAwKTtcbiAgICB9XG4gICAgLy8gV3JhcHMgYSB2YXJpYWJsZSBhcyBhbiBhcnJheSwgaWYgaXQgaXNuJ3Qgb25lIHlldC5cbiAgICAvLyBOb3RlIHRoYXQgYW4gaW5wdXQgYXJyYXkgaXMgcmV0dXJuZWQgYnkgcmVmZXJlbmNlIVxuICAgIGZ1bmN0aW9uIGFzQXJyYXkoYSkge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhKSA/IGEgOiBbYV07XG4gICAgfVxuICAgIC8vIENvdW50cyBkZWNpbWFsc1xuICAgIGZ1bmN0aW9uIGNvdW50RGVjaW1hbHMobnVtU3RyKSB7XG4gICAgICAgIG51bVN0ciA9IFN0cmluZyhudW1TdHIpO1xuICAgICAgICB2YXIgcGllY2VzID0gbnVtU3RyLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgcmV0dXJuIHBpZWNlcy5sZW5ndGggPiAxID8gcGllY2VzWzFdLmxlbmd0aCA6IDA7XG4gICAgfVxuICAgIC8vIGh0dHA6Ly95b3VtaWdodG5vdG5lZWRqcXVlcnkuY29tLyNhZGRfY2xhc3NcbiAgICBmdW5jdGlvbiBhZGRDbGFzcyhlbCwgY2xhc3NOYW1lKSB7XG4gICAgICAgIGlmIChlbC5jbGFzc0xpc3QgJiYgIS9cXHMvLnRlc3QoY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWwuY2xhc3NOYW1lICs9IFwiIFwiICsgY2xhc3NOYW1lO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGh0dHA6Ly95b3VtaWdodG5vdG5lZWRqcXVlcnkuY29tLyNyZW1vdmVfY2xhc3NcbiAgICBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbCwgY2xhc3NOYW1lKSB7XG4gICAgICAgIGlmIChlbC5jbGFzc0xpc3QgJiYgIS9cXHMvLnRlc3QoY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWwuY2xhc3NOYW1lID0gZWwuY2xhc3NOYW1lLnJlcGxhY2UobmV3IFJlZ0V4cChcIihefFxcXFxiKVwiICsgY2xhc3NOYW1lLnNwbGl0KFwiIFwiKS5qb2luKFwifFwiKSArIFwiKFxcXFxifCQpXCIsIFwiZ2lcIiksIFwiIFwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBodHRwczovL3BsYWluanMuY29tL2phdmFzY3JpcHQvYXR0cmlidXRlcy9hZGRpbmctcmVtb3ZpbmctYW5kLXRlc3RpbmctZm9yLWNsYXNzZXMtOS9cbiAgICBmdW5jdGlvbiBoYXNDbGFzcyhlbCwgY2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiBlbC5jbGFzc0xpc3QgPyBlbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSA6IG5ldyBSZWdFeHAoXCJcXFxcYlwiICsgY2xhc3NOYW1lICsgXCJcXFxcYlwiKS50ZXN0KGVsLmNsYXNzTmFtZSk7XG4gICAgfVxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cvc2Nyb2xsWSNOb3Rlc1xuICAgIGZ1bmN0aW9uIGdldFBhZ2VPZmZzZXQoZG9jKSB7XG4gICAgICAgIHZhciBzdXBwb3J0UGFnZU9mZnNldCA9IHdpbmRvdy5wYWdlWE9mZnNldCAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgaXNDU1MxQ29tcGF0ID0gKGRvYy5jb21wYXRNb2RlIHx8IFwiXCIpID09PSBcIkNTUzFDb21wYXRcIjtcbiAgICAgICAgdmFyIHggPSBzdXBwb3J0UGFnZU9mZnNldFxuICAgICAgICAgICAgPyB3aW5kb3cucGFnZVhPZmZzZXRcbiAgICAgICAgICAgIDogaXNDU1MxQ29tcGF0XG4gICAgICAgICAgICAgICAgPyBkb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnRcbiAgICAgICAgICAgICAgICA6IGRvYy5ib2R5LnNjcm9sbExlZnQ7XG4gICAgICAgIHZhciB5ID0gc3VwcG9ydFBhZ2VPZmZzZXRcbiAgICAgICAgICAgID8gd2luZG93LnBhZ2VZT2Zmc2V0XG4gICAgICAgICAgICA6IGlzQ1NTMUNvbXBhdFxuICAgICAgICAgICAgICAgID8gZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3BcbiAgICAgICAgICAgICAgICA6IGRvYy5ib2R5LnNjcm9sbFRvcDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICB5OiB5XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIHdlIHByb3ZpZGUgYSBmdW5jdGlvbiB0byBjb21wdXRlIGNvbnN0YW50cyBpbnN0ZWFkXG4gICAgLy8gb2YgYWNjZXNzaW5nIHdpbmRvdy4qIGFzIHNvb24gYXMgdGhlIG1vZHVsZSBuZWVkcyBpdFxuICAgIC8vIHNvIHRoYXQgd2UgZG8gbm90IGNvbXB1dGUgYW55dGhpbmcgaWYgbm90IG5lZWRlZFxuICAgIGZ1bmN0aW9uIGdldEFjdGlvbnMoKSB7XG4gICAgICAgIC8vIERldGVybWluZSB0aGUgZXZlbnRzIHRvIGJpbmQuIElFMTEgaW1wbGVtZW50cyBwb2ludGVyRXZlbnRzIHdpdGhvdXRcbiAgICAgICAgLy8gYSBwcmVmaXgsIHdoaWNoIGJyZWFrcyBjb21wYXRpYmlsaXR5IHdpdGggdGhlIElFMTAgaW1wbGVtZW50YXRpb24uXG4gICAgICAgIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnBvaW50ZXJFbmFibGVkXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICBzdGFydDogXCJwb2ludGVyZG93blwiLFxuICAgICAgICAgICAgICAgIG1vdmU6IFwicG9pbnRlcm1vdmVcIixcbiAgICAgICAgICAgICAgICBlbmQ6IFwicG9pbnRlcnVwXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogd2luZG93Lm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkXG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBcIk1TUG9pbnRlckRvd25cIixcbiAgICAgICAgICAgICAgICAgICAgbW92ZTogXCJNU1BvaW50ZXJNb3ZlXCIsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogXCJNU1BvaW50ZXJVcFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogXCJtb3VzZWRvd24gdG91Y2hzdGFydFwiLFxuICAgICAgICAgICAgICAgICAgICBtb3ZlOiBcIm1vdXNlbW92ZSB0b3VjaG1vdmVcIixcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBcIm1vdXNldXAgdG91Y2hlbmRcIlxuICAgICAgICAgICAgICAgIH07XG4gICAgfVxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL0V2ZW50TGlzdGVuZXJPcHRpb25zL2Jsb2IvZ2gtcGFnZXMvZXhwbGFpbmVyLm1kXG4gICAgLy8gSXNzdWUgIzc4NVxuICAgIGZ1bmN0aW9uIGdldFN1cHBvcnRzUGFzc2l2ZSgpIHtcbiAgICAgICAgdmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIFwicGFzc2l2ZVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIiwgbnVsbCwgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlICovXG4gICAgICAgIHJldHVybiBzdXBwb3J0c1Bhc3NpdmU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lKCkge1xuICAgICAgICByZXR1cm4gd2luZG93LkNTUyAmJiBDU1Muc3VwcG9ydHMgJiYgQ1NTLnN1cHBvcnRzKFwidG91Y2gtYWN0aW9uXCIsIFwibm9uZVwiKTtcbiAgICB9XG4gICAgLy9lbmRyZWdpb25cbiAgICAvL3JlZ2lvbiBSYW5nZSBDYWxjdWxhdGlvblxuICAgIC8vIERldGVybWluZSB0aGUgc2l6ZSBvZiBhIHN1Yi1yYW5nZSBpbiByZWxhdGlvbiB0byBhIGZ1bGwgcmFuZ2UuXG4gICAgZnVuY3Rpb24gc3ViUmFuZ2VSYXRpbyhwYSwgcGIpIHtcbiAgICAgICAgcmV0dXJuIDEwMCAvIChwYiAtIHBhKTtcbiAgICB9XG4gICAgLy8gKHBlcmNlbnRhZ2UpIEhvdyBtYW55IHBlcmNlbnQgaXMgdGhpcyB2YWx1ZSBvZiB0aGlzIHJhbmdlP1xuICAgIGZ1bmN0aW9uIGZyb21QZXJjZW50YWdlKHJhbmdlLCB2YWx1ZSwgc3RhcnRSYW5nZSkge1xuICAgICAgICByZXR1cm4gKHZhbHVlICogMTAwKSAvIChyYW5nZVtzdGFydFJhbmdlICsgMV0gLSByYW5nZVtzdGFydFJhbmdlXSk7XG4gICAgfVxuICAgIC8vIChwZXJjZW50YWdlKSBXaGVyZSBpcyB0aGlzIHZhbHVlIG9uIHRoaXMgcmFuZ2U/XG4gICAgZnVuY3Rpb24gdG9QZXJjZW50YWdlKHJhbmdlLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZnJvbVBlcmNlbnRhZ2UocmFuZ2UsIHJhbmdlWzBdIDwgMCA/IHZhbHVlICsgTWF0aC5hYnMocmFuZ2VbMF0pIDogdmFsdWUgLSByYW5nZVswXSwgMCk7XG4gICAgfVxuICAgIC8vICh2YWx1ZSkgSG93IG11Y2ggaXMgdGhpcyBwZXJjZW50YWdlIG9uIHRoaXMgcmFuZ2U/XG4gICAgZnVuY3Rpb24gaXNQZXJjZW50YWdlKHJhbmdlLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKHZhbHVlICogKHJhbmdlWzFdIC0gcmFuZ2VbMF0pKSAvIDEwMCArIHJhbmdlWzBdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRKKHZhbHVlLCBhcnIpIHtcbiAgICAgICAgdmFyIGogPSAxO1xuICAgICAgICB3aGlsZSAodmFsdWUgPj0gYXJyW2pdKSB7XG4gICAgICAgICAgICBqICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGo7XG4gICAgfVxuICAgIC8vIChwZXJjZW50YWdlKSBJbnB1dCBhIHZhbHVlLCBmaW5kIHdoZXJlLCBvbiBhIHNjYWxlIG9mIDAtMTAwLCBpdCBhcHBsaWVzLlxuICAgIGZ1bmN0aW9uIHRvU3RlcHBpbmcoeFZhbCwgeFBjdCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID49IHhWYWwuc2xpY2UoLTEpWzBdKSB7XG4gICAgICAgICAgICByZXR1cm4gMTAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgeFZhbCk7XG4gICAgICAgIHZhciB2YSA9IHhWYWxbaiAtIDFdO1xuICAgICAgICB2YXIgdmIgPSB4VmFsW2pdO1xuICAgICAgICB2YXIgcGEgPSB4UGN0W2ogLSAxXTtcbiAgICAgICAgdmFyIHBiID0geFBjdFtqXTtcbiAgICAgICAgcmV0dXJuIHBhICsgdG9QZXJjZW50YWdlKFt2YSwgdmJdLCB2YWx1ZSkgLyBzdWJSYW5nZVJhdGlvKHBhLCBwYik7XG4gICAgfVxuICAgIC8vICh2YWx1ZSkgSW5wdXQgYSBwZXJjZW50YWdlLCBmaW5kIHdoZXJlIGl0IGlzIG9uIHRoZSBzcGVjaWZpZWQgcmFuZ2UuXG4gICAgZnVuY3Rpb24gZnJvbVN0ZXBwaW5nKHhWYWwsIHhQY3QsIHZhbHVlKSB7XG4gICAgICAgIC8vIFRoZXJlIGlzIG5vIHJhbmdlIGdyb3VwIHRoYXQgZml0cyAxMDBcbiAgICAgICAgaWYgKHZhbHVlID49IDEwMCkge1xuICAgICAgICAgICAgcmV0dXJuIHhWYWwuc2xpY2UoLTEpWzBdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgeFBjdCk7XG4gICAgICAgIHZhciB2YSA9IHhWYWxbaiAtIDFdO1xuICAgICAgICB2YXIgdmIgPSB4VmFsW2pdO1xuICAgICAgICB2YXIgcGEgPSB4UGN0W2ogLSAxXTtcbiAgICAgICAgdmFyIHBiID0geFBjdFtqXTtcbiAgICAgICAgcmV0dXJuIGlzUGVyY2VudGFnZShbdmEsIHZiXSwgKHZhbHVlIC0gcGEpICogc3ViUmFuZ2VSYXRpbyhwYSwgcGIpKTtcbiAgICB9XG4gICAgLy8gKHBlcmNlbnRhZ2UpIEdldCB0aGUgc3RlcCB0aGF0IGFwcGxpZXMgYXQgYSBjZXJ0YWluIHZhbHVlLlxuICAgIGZ1bmN0aW9uIGdldFN0ZXAoeFBjdCwgeFN0ZXBzLCBzbmFwLCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IDEwMCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgeFBjdCk7XG4gICAgICAgIHZhciBhID0geFBjdFtqIC0gMV07XG4gICAgICAgIHZhciBiID0geFBjdFtqXTtcbiAgICAgICAgLy8gSWYgJ3NuYXAnIGlzIHNldCwgc3RlcHMgYXJlIHVzZWQgYXMgZml4ZWQgcG9pbnRzIG9uIHRoZSBzbGlkZXIuXG4gICAgICAgIGlmIChzbmFwKSB7XG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IHBvc2l0aW9uLCBhIG9yIGIuXG4gICAgICAgICAgICBpZiAodmFsdWUgLSBhID4gKGIgLSBhKSAvIDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG4gICAgICAgIGlmICgheFN0ZXBzW2ogLSAxXSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4UGN0W2ogLSAxXSArIGNsb3Nlc3QodmFsdWUgLSB4UGN0W2ogLSAxXSwgeFN0ZXBzW2ogLSAxXSk7XG4gICAgfVxuICAgIC8vZW5kcmVnaW9uXG4gICAgLy9yZWdpb24gU3BlY3RydW1cbiAgICB2YXIgU3BlY3RydW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIFNwZWN0cnVtKGVudHJ5LCBzbmFwLCBzaW5nbGVTdGVwKSB7XG4gICAgICAgICAgICB0aGlzLnhQY3QgPSBbXTtcbiAgICAgICAgICAgIHRoaXMueFZhbCA9IFtdO1xuICAgICAgICAgICAgdGhpcy54U3RlcHMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMueE51bVN0ZXBzID0gW107XG4gICAgICAgICAgICB0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwID0gW107XG4gICAgICAgICAgICB0aGlzLnhTdGVwcyA9IFtzaW5nbGVTdGVwIHx8IGZhbHNlXTtcbiAgICAgICAgICAgIHRoaXMueE51bVN0ZXBzID0gW2ZhbHNlXTtcbiAgICAgICAgICAgIHRoaXMuc25hcCA9IHNuYXA7XG4gICAgICAgICAgICB2YXIgaW5kZXg7XG4gICAgICAgICAgICB2YXIgb3JkZXJlZCA9IFtdO1xuICAgICAgICAgICAgLy8gTWFwIHRoZSBvYmplY3Qga2V5cyB0byBhbiBhcnJheS5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGVudHJ5KS5mb3JFYWNoKGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgIG9yZGVyZWQucHVzaChbYXNBcnJheShlbnRyeVtpbmRleF0pLCBpbmRleF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBTb3J0IGFsbCBlbnRyaWVzIGJ5IHZhbHVlIChudW1lcmljIHNvcnQpLlxuICAgICAgICAgICAgb3JkZXJlZC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFbMF1bMF0gLSBiWzBdWzBdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBDb252ZXJ0IGFsbCBlbnRyaWVzIHRvIHN1YnJhbmdlcy5cbiAgICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IG9yZGVyZWQubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVFbnRyeVBvaW50KG9yZGVyZWRbaW5kZXhdWzFdLCBvcmRlcmVkW2luZGV4XVswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTdG9yZSB0aGUgYWN0dWFsIHN0ZXAgdmFsdWVzLlxuICAgICAgICAgICAgLy8geFN0ZXBzIGlzIHNvcnRlZCBpbiB0aGUgc2FtZSBvcmRlciBhcyB4UGN0IGFuZCB4VmFsLlxuICAgICAgICAgICAgdGhpcy54TnVtU3RlcHMgPSB0aGlzLnhTdGVwcy5zbGljZSgwKTtcbiAgICAgICAgICAgIC8vIENvbnZlcnQgYWxsIG51bWVyaWMgc3RlcHMgdG8gdGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIHN1YnJhbmdlIHRoZXkgcmVwcmVzZW50LlxuICAgICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGhpcy54TnVtU3RlcHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVTdGVwUG9pbnQoaW5kZXgsIHRoaXMueE51bVN0ZXBzW2luZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgU3BlY3RydW0ucHJvdG90eXBlLmdldERpc3RhbmNlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZGlzdGFuY2VzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy54TnVtU3RlcHMubGVuZ3RoIC0gMTsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGRpc3RhbmNlc1tpbmRleF0gPSBmcm9tUGVyY2VudGFnZSh0aGlzLnhWYWwsIHZhbHVlLCBpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGlzdGFuY2VzO1xuICAgICAgICB9O1xuICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIHBlcmNlbnR1YWwgZGlzdGFuY2Ugb3ZlciB0aGUgd2hvbGUgc2NhbGUgb2YgcmFuZ2VzLlxuICAgICAgICAvLyBkaXJlY3Rpb246IDAgPSBiYWNrd2FyZHMgLyAxID0gZm9yd2FyZHNcbiAgICAgICAgU3BlY3RydW0ucHJvdG90eXBlLmdldEFic29sdXRlRGlzdGFuY2UgPSBmdW5jdGlvbiAodmFsdWUsIGRpc3RhbmNlcywgZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgeFBjdF9pbmRleCA9IDA7XG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgcmFuZ2Ugd2hlcmUgdG8gc3RhcnQgY2FsY3VsYXRpb25cbiAgICAgICAgICAgIGlmICh2YWx1ZSA8IHRoaXMueFBjdFt0aGlzLnhQY3QubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAodmFsdWUgPiB0aGlzLnhQY3RbeFBjdF9pbmRleCArIDFdKSB7XG4gICAgICAgICAgICAgICAgICAgIHhQY3RfaW5kZXgrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PT0gdGhpcy54UGN0W3RoaXMueFBjdC5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgICAgIHhQY3RfaW5kZXggPSB0aGlzLnhQY3QubGVuZ3RoIC0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIGxvb2tpbmcgYmFja3dhcmRzIGFuZCB0aGUgdmFsdWUgaXMgZXhhY3RseSBhdCBhIHJhbmdlIHNlcGFyYXRvciB0aGVuIGxvb2sgb25lIHJhbmdlIGZ1cnRoZXJcbiAgICAgICAgICAgIGlmICghZGlyZWN0aW9uICYmIHZhbHVlID09PSB0aGlzLnhQY3RbeFBjdF9pbmRleCArIDFdKSB7XG4gICAgICAgICAgICAgICAgeFBjdF9pbmRleCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRpc3RhbmNlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRpc3RhbmNlcyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHN0YXJ0X2ZhY3RvcjtcbiAgICAgICAgICAgIHZhciByZXN0X2ZhY3RvciA9IDE7XG4gICAgICAgICAgICB2YXIgcmVzdF9yZWxfZGlzdGFuY2UgPSBkaXN0YW5jZXNbeFBjdF9pbmRleF07XG4gICAgICAgICAgICB2YXIgcmFuZ2VfcGN0ID0gMDtcbiAgICAgICAgICAgIHZhciByZWxfcmFuZ2VfZGlzdGFuY2UgPSAwO1xuICAgICAgICAgICAgdmFyIGFic19kaXN0YW5jZV9jb3VudGVyID0gMDtcbiAgICAgICAgICAgIHZhciByYW5nZV9jb3VudGVyID0gMDtcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB3aGF0IHBhcnQgb2YgdGhlIHN0YXJ0IHJhbmdlIHRoZSB2YWx1ZSBpc1xuICAgICAgICAgICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgIHN0YXJ0X2ZhY3RvciA9ICh2YWx1ZSAtIHRoaXMueFBjdFt4UGN0X2luZGV4XSkgLyAodGhpcy54UGN0W3hQY3RfaW5kZXggKyAxXSAtIHRoaXMueFBjdFt4UGN0X2luZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGFydF9mYWN0b3IgPSAodGhpcy54UGN0W3hQY3RfaW5kZXggKyAxXSAtIHZhbHVlKSAvICh0aGlzLnhQY3RbeFBjdF9pbmRleCArIDFdIC0gdGhpcy54UGN0W3hQY3RfaW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERvIHVudGlsIHRoZSBjb21wbGV0ZSBkaXN0YW5jZSBhY3Jvc3MgcmFuZ2VzIGlzIGNhbGN1bGF0ZWRcbiAgICAgICAgICAgIHdoaWxlIChyZXN0X3JlbF9kaXN0YW5jZSA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIHBlcmNlbnRhZ2Ugb2YgdG90YWwgcmFuZ2VcbiAgICAgICAgICAgICAgICByYW5nZV9wY3QgPSB0aGlzLnhQY3RbeFBjdF9pbmRleCArIDEgKyByYW5nZV9jb3VudGVyXSAtIHRoaXMueFBjdFt4UGN0X2luZGV4ICsgcmFuZ2VfY291bnRlcl07XG4gICAgICAgICAgICAgICAgLy8gRGV0ZWN0IGlmIHRoZSBtYXJnaW4sIHBhZGRpbmcgb3IgbGltaXQgaXMgbGFyZ2VyIHRoZW4gdGhlIGN1cnJlbnQgcmFuZ2UgYW5kIGNhbGN1bGF0ZVxuICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZXNbeFBjdF9pbmRleCArIHJhbmdlX2NvdW50ZXJdICogcmVzdF9mYWN0b3IgKyAxMDAgLSBzdGFydF9mYWN0b3IgKiAxMDAgPiAxMDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgbGFyZ2VyIHRoZW4gdGFrZSB0aGUgcGVyY2VudHVhbCBkaXN0YW5jZSBvZiB0aGUgd2hvbGUgcmFuZ2VcbiAgICAgICAgICAgICAgICAgICAgcmVsX3JhbmdlX2Rpc3RhbmNlID0gcmFuZ2VfcGN0ICogc3RhcnRfZmFjdG9yO1xuICAgICAgICAgICAgICAgICAgICAvLyBSZXN0IGZhY3RvciBvZiByZWxhdGl2ZSBwZXJjZW50dWFsIGRpc3RhbmNlIHN0aWxsIHRvIGJlIGNhbGN1bGF0ZWRcbiAgICAgICAgICAgICAgICAgICAgcmVzdF9mYWN0b3IgPSAocmVzdF9yZWxfZGlzdGFuY2UgLSAxMDAgKiBzdGFydF9mYWN0b3IpIC8gZGlzdGFuY2VzW3hQY3RfaW5kZXggKyByYW5nZV9jb3VudGVyXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHN0YXJ0IGZhY3RvciB0byAxIGFzIGZvciBuZXh0IHJhbmdlIGl0IGRvZXMgbm90IGFwcGx5LlxuICAgICAgICAgICAgICAgICAgICBzdGFydF9mYWN0b3IgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgc21hbGxlciBvciBlcXVhbCB0aGVuIHRha2UgdGhlIHBlcmNlbnR1YWwgZGlzdGFuY2Ugb2YgdGhlIGNhbGN1bGF0ZSBwZXJjZW50dWFsIHBhcnQgb2YgdGhhdCByYW5nZVxuICAgICAgICAgICAgICAgICAgICByZWxfcmFuZ2VfZGlzdGFuY2UgPSAoKGRpc3RhbmNlc1t4UGN0X2luZGV4ICsgcmFuZ2VfY291bnRlcl0gKiByYW5nZV9wY3QpIC8gMTAwKSAqIHJlc3RfZmFjdG9yO1xuICAgICAgICAgICAgICAgICAgICAvLyBObyByZXN0IGxlZnQgYXMgdGhlIHJlc3QgZml0cyBpbiBjdXJyZW50IHJhbmdlXG4gICAgICAgICAgICAgICAgICAgIHJlc3RfZmFjdG9yID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBhYnNfZGlzdGFuY2VfY291bnRlciA9IGFic19kaXN0YW5jZV9jb3VudGVyIC0gcmVsX3JhbmdlX2Rpc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICAvLyBMaW1pdCByYW5nZSB0byBmaXJzdCByYW5nZSB3aGVuIGRpc3RhbmNlIGJlY29tZXMgb3V0c2lkZSBvZiBtaW5pbXVtIHJhbmdlXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnhQY3QubGVuZ3RoICsgcmFuZ2VfY291bnRlciA+PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZV9jb3VudGVyLS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFic19kaXN0YW5jZV9jb3VudGVyID0gYWJzX2Rpc3RhbmNlX2NvdW50ZXIgKyByZWxfcmFuZ2VfZGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgIC8vIExpbWl0IHJhbmdlIHRvIGxhc3QgcmFuZ2Ugd2hlbiBkaXN0YW5jZSBiZWNvbWVzIG91dHNpZGUgb2YgbWF4aW11bSByYW5nZVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy54UGN0Lmxlbmd0aCAtIHJhbmdlX2NvdW50ZXIgPj0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VfY291bnRlcisrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFJlc3Qgb2YgcmVsYXRpdmUgcGVyY2VudHVhbCBkaXN0YW5jZSBzdGlsbCB0byBiZSBjYWxjdWxhdGVkXG4gICAgICAgICAgICAgICAgcmVzdF9yZWxfZGlzdGFuY2UgPSBkaXN0YW5jZXNbeFBjdF9pbmRleCArIHJhbmdlX2NvdW50ZXJdICogcmVzdF9mYWN0b3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgKyBhYnNfZGlzdGFuY2VfY291bnRlcjtcbiAgICAgICAgfTtcbiAgICAgICAgU3BlY3RydW0ucHJvdG90eXBlLnRvU3RlcHBpbmcgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdG9TdGVwcGluZyh0aGlzLnhWYWwsIHRoaXMueFBjdCwgdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9O1xuICAgICAgICBTcGVjdHJ1bS5wcm90b3R5cGUuZnJvbVN0ZXBwaW5nID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbVN0ZXBwaW5nKHRoaXMueFZhbCwgdGhpcy54UGN0LCB2YWx1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIFNwZWN0cnVtLnByb3RvdHlwZS5nZXRTdGVwID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGdldFN0ZXAodGhpcy54UGN0LCB0aGlzLnhTdGVwcywgdGhpcy5zbmFwLCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH07XG4gICAgICAgIFNwZWN0cnVtLnByb3RvdHlwZS5nZXREZWZhdWx0U3RlcCA9IGZ1bmN0aW9uICh2YWx1ZSwgaXNEb3duLCBzaXplKSB7XG4gICAgICAgICAgICB2YXIgaiA9IGdldEoodmFsdWUsIHRoaXMueFBjdCk7XG4gICAgICAgICAgICAvLyBXaGVuIGF0IHRoZSB0b3Agb3Igc3RlcHBpbmcgZG93biwgbG9vayBhdCB0aGUgcHJldmlvdXMgc3ViLXJhbmdlXG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IDEwMCB8fCAoaXNEb3duICYmIHZhbHVlID09PSB0aGlzLnhQY3RbaiAtIDFdKSkge1xuICAgICAgICAgICAgICAgIGogPSBNYXRoLm1heChqIC0gMSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMueFZhbFtqXSAtIHRoaXMueFZhbFtqIC0gMV0pIC8gc2l6ZTtcbiAgICAgICAgfTtcbiAgICAgICAgU3BlY3RydW0ucHJvdG90eXBlLmdldE5lYXJieVN0ZXBzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgaiA9IGdldEoodmFsdWUsIHRoaXMueFBjdCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN0ZXBCZWZvcmU6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRWYWx1ZTogdGhpcy54VmFsW2ogLSAyXSxcbiAgICAgICAgICAgICAgICAgICAgc3RlcDogdGhpcy54TnVtU3RlcHNbaiAtIDJdLFxuICAgICAgICAgICAgICAgICAgICBoaWdoZXN0U3RlcDogdGhpcy54SGlnaGVzdENvbXBsZXRlU3RlcFtqIC0gMl1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRoaXNTdGVwOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWU6IHRoaXMueFZhbFtqIC0gMV0sXG4gICAgICAgICAgICAgICAgICAgIHN0ZXA6IHRoaXMueE51bVN0ZXBzW2ogLSAxXSxcbiAgICAgICAgICAgICAgICAgICAgaGlnaGVzdFN0ZXA6IHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbaiAtIDFdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdGVwQWZ0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRWYWx1ZTogdGhpcy54VmFsW2pdLFxuICAgICAgICAgICAgICAgICAgICBzdGVwOiB0aGlzLnhOdW1TdGVwc1tqXSxcbiAgICAgICAgICAgICAgICAgICAgaGlnaGVzdFN0ZXA6IHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbal1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICBTcGVjdHJ1bS5wcm90b3R5cGUuY291bnRTdGVwRGVjaW1hbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RlcERlY2ltYWxzID0gdGhpcy54TnVtU3RlcHMubWFwKGNvdW50RGVjaW1hbHMpO1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIHN0ZXBEZWNpbWFscyk7XG4gICAgICAgIH07XG4gICAgICAgIFNwZWN0cnVtLnByb3RvdHlwZS5oYXNOb1NpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy54VmFsWzBdID09PSB0aGlzLnhWYWxbdGhpcy54VmFsLmxlbmd0aCAtIDFdO1xuICAgICAgICB9O1xuICAgICAgICAvLyBPdXRzaWRlIHRlc3RpbmdcbiAgICAgICAgU3BlY3RydW0ucHJvdG90eXBlLmNvbnZlcnQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN0ZXAodGhpcy50b1N0ZXBwaW5nKHZhbHVlKSk7XG4gICAgICAgIH07XG4gICAgICAgIFNwZWN0cnVtLnByb3RvdHlwZS5oYW5kbGVFbnRyeVBvaW50ID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIHBlcmNlbnRhZ2U7XG4gICAgICAgICAgICAvLyBDb3ZlcnQgbWluL21heCBzeW50YXggdG8gMCBhbmQgMTAwLlxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSBcIm1pblwiKSB7XG4gICAgICAgICAgICAgICAgcGVyY2VudGFnZSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpbmRleCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIHBlcmNlbnRhZ2UgPSAxMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZXJjZW50YWdlID0gcGFyc2VGbG9hdChpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgY29ycmVjdCBpbnB1dC5cbiAgICAgICAgICAgIGlmICghaXNOdW1lcmljKHBlcmNlbnRhZ2UpIHx8ICFpc051bWVyaWModmFsdWVbMF0pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ3JhbmdlJyB2YWx1ZSBpc24ndCBudW1lcmljLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFN0b3JlIHZhbHVlcy5cbiAgICAgICAgICAgIHRoaXMueFBjdC5wdXNoKHBlcmNlbnRhZ2UpO1xuICAgICAgICAgICAgdGhpcy54VmFsLnB1c2godmFsdWVbMF0pO1xuICAgICAgICAgICAgdmFyIHZhbHVlMSA9IE51bWJlcih2YWx1ZVsxXSk7XG4gICAgICAgICAgICAvLyBOYU4gd2lsbCBldmFsdWF0ZSB0byBmYWxzZSB0b28sIGJ1dCB0byBrZWVwXG4gICAgICAgICAgICAvLyBsb2dnaW5nIGNsZWFyLCBzZXQgc3RlcCBleHBsaWNpdGx5LiBNYWtlIHN1cmVcbiAgICAgICAgICAgIC8vIG5vdCB0byBvdmVycmlkZSB0aGUgJ3N0ZXAnIHNldHRpbmcgd2l0aCBmYWxzZS5cbiAgICAgICAgICAgIGlmICghcGVyY2VudGFnZSkge1xuICAgICAgICAgICAgICAgIGlmICghaXNOYU4odmFsdWUxKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnhTdGVwc1swXSA9IHZhbHVlMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnhTdGVwcy5wdXNoKGlzTmFOKHZhbHVlMSkgPyBmYWxzZSA6IHZhbHVlMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwLnB1c2goMCk7XG4gICAgICAgIH07XG4gICAgICAgIFNwZWN0cnVtLnByb3RvdHlwZS5oYW5kbGVTdGVwUG9pbnQgPSBmdW5jdGlvbiAoaSwgbikge1xuICAgICAgICAgICAgLy8gSWdub3JlICdmYWxzZScgc3RlcHBpbmcuXG4gICAgICAgICAgICBpZiAoIW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTdGVwIG92ZXIgemVyby1sZW5ndGggcmFuZ2VzICgjOTQ4KTtcbiAgICAgICAgICAgIGlmICh0aGlzLnhWYWxbaV0gPT09IHRoaXMueFZhbFtpICsgMV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnhTdGVwc1tpXSA9IHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbaV0gPSB0aGlzLnhWYWxbaV07XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRmFjdG9yIHRvIHJhbmdlIHJhdGlvXG4gICAgICAgICAgICB0aGlzLnhTdGVwc1tpXSA9XG4gICAgICAgICAgICAgICAgZnJvbVBlcmNlbnRhZ2UoW3RoaXMueFZhbFtpXSwgdGhpcy54VmFsW2kgKyAxXV0sIG4sIDApIC8gc3ViUmFuZ2VSYXRpbyh0aGlzLnhQY3RbaV0sIHRoaXMueFBjdFtpICsgMV0pO1xuICAgICAgICAgICAgdmFyIHRvdGFsU3RlcHMgPSAodGhpcy54VmFsW2kgKyAxXSAtIHRoaXMueFZhbFtpXSkgLyB0aGlzLnhOdW1TdGVwc1tpXTtcbiAgICAgICAgICAgIHZhciBoaWdoZXN0U3RlcCA9IE1hdGguY2VpbChOdW1iZXIodG90YWxTdGVwcy50b0ZpeGVkKDMpKSAtIDEpO1xuICAgICAgICAgICAgdmFyIHN0ZXAgPSB0aGlzLnhWYWxbaV0gKyB0aGlzLnhOdW1TdGVwc1tpXSAqIGhpZ2hlc3RTdGVwO1xuICAgICAgICAgICAgdGhpcy54SGlnaGVzdENvbXBsZXRlU3RlcFtpXSA9IHN0ZXA7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBTcGVjdHJ1bTtcbiAgICB9KCkpO1xuICAgIC8vZW5kcmVnaW9uXG4gICAgLy9yZWdpb24gT3B0aW9uc1xuICAgIC8qXHRFdmVyeSBpbnB1dCBvcHRpb24gaXMgdGVzdGVkIGFuZCBwYXJzZWQuIFRoaXMgd2lsbCBwcmV2ZW50XG4gICAgICAgIGVuZGxlc3MgdmFsaWRhdGlvbiBpbiBpbnRlcm5hbCBtZXRob2RzLiBUaGVzZSB0ZXN0cyBhcmVcbiAgICAgICAgc3RydWN0dXJlZCB3aXRoIGFuIGl0ZW0gZm9yIGV2ZXJ5IG9wdGlvbiBhdmFpbGFibGUuIEFuXG4gICAgICAgIG9wdGlvbiBjYW4gYmUgbWFya2VkIGFzIHJlcXVpcmVkIGJ5IHNldHRpbmcgdGhlICdyJyBmbGFnLlxuICAgICAgICBUaGUgdGVzdGluZyBmdW5jdGlvbiBpcyBwcm92aWRlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgICAgICAgIC0gVGhlIHByb3ZpZGVkIHZhbHVlIGZvciB0aGUgb3B0aW9uO1xuICAgICAgICAgICAgLSBBIHJlZmVyZW5jZSB0byB0aGUgb3B0aW9ucyBvYmplY3Q7XG4gICAgICAgICAgICAtIFRoZSBuYW1lIGZvciB0aGUgb3B0aW9uO1xuXG4gICAgICAgIFRoZSB0ZXN0aW5nIGZ1bmN0aW9uIHJldHVybnMgZmFsc2Ugd2hlbiBhbiBlcnJvciBpcyBkZXRlY3RlZCxcbiAgICAgICAgb3IgdHJ1ZSB3aGVuIGV2ZXJ5dGhpbmcgaXMgT0suIEl0IGNhbiBhbHNvIG1vZGlmeSB0aGUgb3B0aW9uXG4gICAgICAgIG9iamVjdCwgdG8gbWFrZSBzdXJlIGFsbCB2YWx1ZXMgY2FuIGJlIGNvcnJlY3RseSBsb29wZWQgZWxzZXdoZXJlLiAqL1xuICAgIC8vcmVnaW9uIERlZmF1bHRzXG4gICAgdmFyIGRlZmF1bHRGb3JtYXR0ZXIgPSB7XG4gICAgICAgIHRvOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IHZhbHVlLnRvRml4ZWQoMik7XG4gICAgICAgIH0sXG4gICAgICAgIGZyb206IE51bWJlclxuICAgIH07XG4gICAgdmFyIGNzc0NsYXNzZXMgPSB7XG4gICAgICAgIHRhcmdldDogXCJ0YXJnZXRcIixcbiAgICAgICAgYmFzZTogXCJiYXNlXCIsXG4gICAgICAgIG9yaWdpbjogXCJvcmlnaW5cIixcbiAgICAgICAgaGFuZGxlOiBcImhhbmRsZVwiLFxuICAgICAgICBoYW5kbGVMb3dlcjogXCJoYW5kbGUtbG93ZXJcIixcbiAgICAgICAgaGFuZGxlVXBwZXI6IFwiaGFuZGxlLXVwcGVyXCIsXG4gICAgICAgIHRvdWNoQXJlYTogXCJ0b3VjaC1hcmVhXCIsXG4gICAgICAgIGhvcml6b250YWw6IFwiaG9yaXpvbnRhbFwiLFxuICAgICAgICB2ZXJ0aWNhbDogXCJ2ZXJ0aWNhbFwiLFxuICAgICAgICBiYWNrZ3JvdW5kOiBcImJhY2tncm91bmRcIixcbiAgICAgICAgY29ubmVjdDogXCJjb25uZWN0XCIsXG4gICAgICAgIGNvbm5lY3RzOiBcImNvbm5lY3RzXCIsXG4gICAgICAgIGx0cjogXCJsdHJcIixcbiAgICAgICAgcnRsOiBcInJ0bFwiLFxuICAgICAgICB0ZXh0RGlyZWN0aW9uTHRyOiBcInR4dC1kaXItbHRyXCIsXG4gICAgICAgIHRleHREaXJlY3Rpb25SdGw6IFwidHh0LWRpci1ydGxcIixcbiAgICAgICAgZHJhZ2dhYmxlOiBcImRyYWdnYWJsZVwiLFxuICAgICAgICBkcmFnOiBcInN0YXRlLWRyYWdcIixcbiAgICAgICAgdGFwOiBcInN0YXRlLXRhcFwiLFxuICAgICAgICBhY3RpdmU6IFwiYWN0aXZlXCIsXG4gICAgICAgIHRvb2x0aXA6IFwidG9vbHRpcFwiLFxuICAgICAgICBwaXBzOiBcInBpcHNcIixcbiAgICAgICAgcGlwc0hvcml6b250YWw6IFwicGlwcy1ob3Jpem9udGFsXCIsXG4gICAgICAgIHBpcHNWZXJ0aWNhbDogXCJwaXBzLXZlcnRpY2FsXCIsXG4gICAgICAgIG1hcmtlcjogXCJtYXJrZXJcIixcbiAgICAgICAgbWFya2VySG9yaXpvbnRhbDogXCJtYXJrZXItaG9yaXpvbnRhbFwiLFxuICAgICAgICBtYXJrZXJWZXJ0aWNhbDogXCJtYXJrZXItdmVydGljYWxcIixcbiAgICAgICAgbWFya2VyTm9ybWFsOiBcIm1hcmtlci1ub3JtYWxcIixcbiAgICAgICAgbWFya2VyTGFyZ2U6IFwibWFya2VyLWxhcmdlXCIsXG4gICAgICAgIG1hcmtlclN1YjogXCJtYXJrZXItc3ViXCIsXG4gICAgICAgIHZhbHVlOiBcInZhbHVlXCIsXG4gICAgICAgIHZhbHVlSG9yaXpvbnRhbDogXCJ2YWx1ZS1ob3Jpem9udGFsXCIsXG4gICAgICAgIHZhbHVlVmVydGljYWw6IFwidmFsdWUtdmVydGljYWxcIixcbiAgICAgICAgdmFsdWVOb3JtYWw6IFwidmFsdWUtbm9ybWFsXCIsXG4gICAgICAgIHZhbHVlTGFyZ2U6IFwidmFsdWUtbGFyZ2VcIixcbiAgICAgICAgdmFsdWVTdWI6IFwidmFsdWUtc3ViXCJcbiAgICB9O1xuICAgIC8vIE5hbWVzcGFjZXMgb2YgaW50ZXJuYWwgZXZlbnQgbGlzdGVuZXJzXG4gICAgdmFyIElOVEVSTkFMX0VWRU5UX05TID0ge1xuICAgICAgICB0b29sdGlwczogXCIuX190b29sdGlwc1wiLFxuICAgICAgICBhcmlhOiBcIi5fX2FyaWFcIlxuICAgIH07XG4gICAgLy9lbmRyZWdpb25cbiAgICBmdW5jdGlvbiB0ZXN0U3RlcChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmICghaXNOdW1lcmljKGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ3N0ZXAnIGlzIG5vdCBudW1lcmljLlwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgc3RlcCBvcHRpb24gY2FuIHN0aWxsIGJlIHVzZWQgdG8gc2V0IHN0ZXBwaW5nXG4gICAgICAgIC8vIGZvciBsaW5lYXIgc2xpZGVycy4gT3ZlcndyaXR0ZW4gaWYgc2V0IGluICdyYW5nZScuXG4gICAgICAgIHBhcnNlZC5zaW5nbGVTdGVwID0gZW50cnk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RLZXlib2FyZFBhZ2VNdWx0aXBsaWVyKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAna2V5Ym9hcmRQYWdlTXVsdGlwbGllcicgaXMgbm90IG51bWVyaWMuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlZC5rZXlib2FyZFBhZ2VNdWx0aXBsaWVyID0gZW50cnk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RLZXlib2FyZE11bHRpcGxpZXIocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAoIWlzTnVtZXJpYyhlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdrZXlib2FyZE11bHRpcGxpZXInIGlzIG5vdCBudW1lcmljLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWQua2V5Ym9hcmRNdWx0aXBsaWVyID0gZW50cnk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RLZXlib2FyZERlZmF1bHRTdGVwKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAna2V5Ym9hcmREZWZhdWx0U3RlcCcgaXMgbm90IG51bWVyaWMuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlZC5rZXlib2FyZERlZmF1bHRTdGVwID0gZW50cnk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RSYW5nZShwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIEZpbHRlciBpbmNvcnJlY3QgaW5wdXQuXG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwib2JqZWN0XCIgfHwgQXJyYXkuaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdyYW5nZScgaXMgbm90IGFuIG9iamVjdC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2F0Y2ggbWlzc2luZyBzdGFydCBvciBlbmQuXG4gICAgICAgIGlmIChlbnRyeS5taW4gPT09IHVuZGVmaW5lZCB8fCBlbnRyeS5tYXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogTWlzc2luZyAnbWluJyBvciAnbWF4JyBpbiAncmFuZ2UnLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWQuc3BlY3RydW0gPSBuZXcgU3BlY3RydW0oZW50cnksIHBhcnNlZC5zbmFwIHx8IGZhbHNlLCBwYXJzZWQuc2luZ2xlU3RlcCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RTdGFydChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGVudHJ5ID0gYXNBcnJheShlbnRyeSk7XG4gICAgICAgIC8vIFZhbGlkYXRlIGlucHV0LiBWYWx1ZXMgYXJlbid0IHRlc3RlZCwgYXMgdGhlIHB1YmxpYyAudmFsIG1ldGhvZFxuICAgICAgICAvLyB3aWxsIGFsd2F5cyBwcm92aWRlIGEgdmFsaWQgbG9jYXRpb24uXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRyeSkgfHwgIWVudHJ5Lmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ3N0YXJ0JyBvcHRpb24gaXMgaW5jb3JyZWN0LlwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdG9yZSB0aGUgbnVtYmVyIG9mIGhhbmRsZXMuXG4gICAgICAgIHBhcnNlZC5oYW5kbGVzID0gZW50cnkubGVuZ3RoO1xuICAgICAgICAvLyBXaGVuIHRoZSBzbGlkZXIgaXMgaW5pdGlhbGl6ZWQsIHRoZSAudmFsIG1ldGhvZCB3aWxsXG4gICAgICAgIC8vIGJlIGNhbGxlZCB3aXRoIHRoZSBzdGFydCBvcHRpb25zLlxuICAgICAgICBwYXJzZWQuc3RhcnQgPSBlbnRyeTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdFNuYXAocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ3NuYXAnIG9wdGlvbiBtdXN0IGJlIGEgYm9vbGVhbi5cIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5mb3JjZSAxMDAlIHN0ZXBwaW5nIHdpdGhpbiBzdWJyYW5nZXMuXG4gICAgICAgIHBhcnNlZC5zbmFwID0gZW50cnk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RBbmltYXRlKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdhbmltYXRlJyBvcHRpb24gbXVzdCBiZSBhIGJvb2xlYW4uXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuZm9yY2UgMTAwJSBzdGVwcGluZyB3aXRoaW4gc3VicmFuZ2VzLlxuICAgICAgICBwYXJzZWQuYW5pbWF0ZSA9IGVudHJ5O1xuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXN0QW5pbWF0aW9uRHVyYXRpb24ocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnYW5pbWF0aW9uRHVyYXRpb24nIG9wdGlvbiBtdXN0IGJlIGEgbnVtYmVyLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWQuYW5pbWF0aW9uRHVyYXRpb24gPSBlbnRyeTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdENvbm5lY3QocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICB2YXIgY29ubmVjdCA9IFtmYWxzZV07XG4gICAgICAgIHZhciBpO1xuICAgICAgICAvLyBNYXAgbGVnYWN5IG9wdGlvbnNcbiAgICAgICAgaWYgKGVudHJ5ID09PSBcImxvd2VyXCIpIHtcbiAgICAgICAgICAgIGVudHJ5ID0gW3RydWUsIGZhbHNlXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChlbnRyeSA9PT0gXCJ1cHBlclwiKSB7XG4gICAgICAgICAgICBlbnRyeSA9IFtmYWxzZSwgdHJ1ZV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGFuZGxlIGJvb2xlYW4gb3B0aW9uc1xuICAgICAgICBpZiAoZW50cnkgPT09IHRydWUgfHwgZW50cnkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgcGFyc2VkLmhhbmRsZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbm5lY3QucHVzaChlbnRyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25uZWN0LnB1c2goZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlamVjdCBpbnZhbGlkIGlucHV0XG4gICAgICAgIGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KGVudHJ5KSB8fCAhZW50cnkubGVuZ3RoIHx8IGVudHJ5Lmxlbmd0aCAhPT0gcGFyc2VkLmhhbmRsZXMgKyAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnY29ubmVjdCcgb3B0aW9uIGRvZXNuJ3QgbWF0Y2ggaGFuZGxlIGNvdW50LlwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbm5lY3QgPSBlbnRyeTtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWQuY29ubmVjdCA9IGNvbm5lY3Q7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RPcmllbnRhdGlvbihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIFNldCBvcmllbnRhdGlvbiB0byBhbiBhIG51bWVyaWNhbCB2YWx1ZSBmb3IgZWFzeVxuICAgICAgICAvLyBhcnJheSBzZWxlY3Rpb24uXG4gICAgICAgIHN3aXRjaCAoZW50cnkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJob3Jpem9udGFsXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VkLm9ydCA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidmVydGljYWxcIjpcbiAgICAgICAgICAgICAgICBwYXJzZWQub3J0ID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ29yaWVudGF0aW9uJyBvcHRpb24gaXMgaW52YWxpZC5cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdE1hcmdpbihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmICghaXNOdW1lcmljKGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ21hcmdpbicgb3B0aW9uIG11c3QgYmUgbnVtZXJpYy5cIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSXNzdWUgIzU4MlxuICAgICAgICBpZiAoZW50cnkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWQubWFyZ2luID0gcGFyc2VkLnNwZWN0cnVtLmdldERpc3RhbmNlKGVudHJ5KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdExpbWl0KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnbGltaXQnIG9wdGlvbiBtdXN0IGJlIG51bWVyaWMuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlZC5saW1pdCA9IHBhcnNlZC5zcGVjdHJ1bS5nZXREaXN0YW5jZShlbnRyeSk7XG4gICAgICAgIGlmICghcGFyc2VkLmxpbWl0IHx8IHBhcnNlZC5oYW5kbGVzIDwgMikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ2xpbWl0JyBvcHRpb24gaXMgb25seSBzdXBwb3J0ZWQgb24gbGluZWFyIHNsaWRlcnMgd2l0aCAyIG9yIG1vcmUgaGFuZGxlcy5cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdFBhZGRpbmcocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICB2YXIgaW5kZXg7XG4gICAgICAgIGlmICghaXNOdW1lcmljKGVudHJ5KSAmJiAhQXJyYXkuaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBiZSBudW1lcmljIG9yIGFycmF5IG9mIGV4YWN0bHkgMiBudW1iZXJzLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlbnRyeSkgJiYgIShlbnRyeS5sZW5ndGggPT09IDIgfHwgaXNOdW1lcmljKGVudHJ5WzBdKSB8fCBpc051bWVyaWMoZW50cnlbMV0pKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ3BhZGRpbmcnIG9wdGlvbiBtdXN0IGJlIG51bWVyaWMgb3IgYXJyYXkgb2YgZXhhY3RseSAyIG51bWJlcnMuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbnRyeSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgICAgIGVudHJ5ID0gW2VudHJ5LCBlbnRyeV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gJ2dldERpc3RhbmNlJyByZXR1cm5zIGZhbHNlIGZvciBpbnZhbGlkIHZhbHVlcy5cbiAgICAgICAgcGFyc2VkLnBhZGRpbmcgPSBbcGFyc2VkLnNwZWN0cnVtLmdldERpc3RhbmNlKGVudHJ5WzBdKSwgcGFyc2VkLnNwZWN0cnVtLmdldERpc3RhbmNlKGVudHJ5WzFdKV07XG4gICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHBhcnNlZC5zcGVjdHJ1bS54TnVtU3RlcHMubGVuZ3RoIC0gMTsgaW5kZXgrKykge1xuICAgICAgICAgICAgLy8gbGFzdCBcInJhbmdlXCIgY2FuJ3QgY29udGFpbiBzdGVwIHNpemUgYXMgaXQgaXMgcHVyZWx5IGFuIGVuZHBvaW50LlxuICAgICAgICAgICAgaWYgKHBhcnNlZC5wYWRkaW5nWzBdW2luZGV4XSA8IDAgfHwgcGFyc2VkLnBhZGRpbmdbMV1baW5kZXhdIDwgMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcihzKS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRvdGFsUGFkZGluZyA9IGVudHJ5WzBdICsgZW50cnlbMV07XG4gICAgICAgIHZhciBmaXJzdFZhbHVlID0gcGFyc2VkLnNwZWN0cnVtLnhWYWxbMF07XG4gICAgICAgIHZhciBsYXN0VmFsdWUgPSBwYXJzZWQuc3BlY3RydW0ueFZhbFtwYXJzZWQuc3BlY3RydW0ueFZhbC5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKHRvdGFsUGFkZGluZyAvIChsYXN0VmFsdWUgLSBmaXJzdFZhbHVlKSA+IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBub3QgZXhjZWVkIDEwMCUgb2YgdGhlIHJhbmdlLlwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXN0RGlyZWN0aW9uKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgLy8gU2V0IGRpcmVjdGlvbiBhcyBhIG51bWVyaWNhbCB2YWx1ZSBmb3IgZWFzeSBwYXJzaW5nLlxuICAgICAgICAvLyBJbnZlcnQgY29ubmVjdGlvbiBmb3IgUlRMIHNsaWRlcnMsIHNvIHRoYXQgdGhlIHByb3BlclxuICAgICAgICAvLyBoYW5kbGVzIGdldCB0aGUgY29ubmVjdC9iYWNrZ3JvdW5kIGNsYXNzZXMuXG4gICAgICAgIHN3aXRjaCAoZW50cnkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJsdHJcIjpcbiAgICAgICAgICAgICAgICBwYXJzZWQuZGlyID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJydGxcIjpcbiAgICAgICAgICAgICAgICBwYXJzZWQuZGlyID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ2RpcmVjdGlvbicgb3B0aW9uIHdhcyBub3QgcmVjb2duaXplZC5cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdEJlaGF2aW91cihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgaW5wdXQgaXMgYSBzdHJpbmcuXG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdiZWhhdmlvdXInIG11c3QgYmUgYSBzdHJpbmcgY29udGFpbmluZyBvcHRpb25zLlwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgc3RyaW5nIGNvbnRhaW5zIGFueSBrZXl3b3Jkcy5cbiAgICAgICAgLy8gTm9uZSBhcmUgcmVxdWlyZWQuXG4gICAgICAgIHZhciB0YXAgPSBlbnRyeS5pbmRleE9mKFwidGFwXCIpID49IDA7XG4gICAgICAgIHZhciBkcmFnID0gZW50cnkuaW5kZXhPZihcImRyYWdcIikgPj0gMDtcbiAgICAgICAgdmFyIGZpeGVkID0gZW50cnkuaW5kZXhPZihcImZpeGVkXCIpID49IDA7XG4gICAgICAgIHZhciBzbmFwID0gZW50cnkuaW5kZXhPZihcInNuYXBcIikgPj0gMDtcbiAgICAgICAgdmFyIGhvdmVyID0gZW50cnkuaW5kZXhPZihcImhvdmVyXCIpID49IDA7XG4gICAgICAgIHZhciB1bmNvbnN0cmFpbmVkID0gZW50cnkuaW5kZXhPZihcInVuY29uc3RyYWluZWRcIikgPj0gMDtcbiAgICAgICAgdmFyIGRyYWdBbGwgPSBlbnRyeS5pbmRleE9mKFwiZHJhZy1hbGxcIikgPj0gMDtcbiAgICAgICAgaWYgKGZpeGVkKSB7XG4gICAgICAgICAgICBpZiAocGFyc2VkLmhhbmRsZXMgIT09IDIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnZml4ZWQnIGJlaGF2aW91ciBtdXN0IGJlIHVzZWQgd2l0aCAyIGhhbmRsZXNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVc2UgbWFyZ2luIHRvIGVuZm9yY2UgZml4ZWQgc3RhdGVcbiAgICAgICAgICAgIHRlc3RNYXJnaW4ocGFyc2VkLCBwYXJzZWQuc3RhcnRbMV0gLSBwYXJzZWQuc3RhcnRbMF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1bmNvbnN0cmFpbmVkICYmIChwYXJzZWQubWFyZ2luIHx8IHBhcnNlZC5saW1pdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICd1bmNvbnN0cmFpbmVkJyBiZWhhdmlvdXIgY2Fubm90IGJlIHVzZWQgd2l0aCBtYXJnaW4gb3IgbGltaXRcIik7XG4gICAgICAgIH1cbiAgICAgICAgcGFyc2VkLmV2ZW50cyA9IHtcbiAgICAgICAgICAgIHRhcDogdGFwIHx8IHNuYXAsXG4gICAgICAgICAgICBkcmFnOiBkcmFnLFxuICAgICAgICAgICAgZHJhZ0FsbDogZHJhZ0FsbCxcbiAgICAgICAgICAgIGZpeGVkOiBmaXhlZCxcbiAgICAgICAgICAgIHNuYXA6IHNuYXAsXG4gICAgICAgICAgICBob3ZlcjogaG92ZXIsXG4gICAgICAgICAgICB1bmNvbnN0cmFpbmVkOiB1bmNvbnN0cmFpbmVkXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RUb29sdGlwcyhwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW50cnkgPT09IHRydWUgfHwgaXNWYWxpZFBhcnRpYWxGb3JtYXR0ZXIoZW50cnkpKSB7XG4gICAgICAgICAgICBwYXJzZWQudG9vbHRpcHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyc2VkLmhhbmRsZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIHBhcnNlZC50b29sdGlwcy5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVudHJ5ID0gYXNBcnJheShlbnRyeSk7XG4gICAgICAgICAgICBpZiAoZW50cnkubGVuZ3RoICE9PSBwYXJzZWQuaGFuZGxlcykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6IG11c3QgcGFzcyBhIGZvcm1hdHRlciBmb3IgYWxsIGhhbmRsZXMuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW50cnkuZm9yRWFjaChmdW5jdGlvbiAoZm9ybWF0dGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmb3JtYXR0ZXIgIT09IFwiYm9vbGVhblwiICYmICFpc1ZhbGlkUGFydGlhbEZvcm1hdHRlcihmb3JtYXR0ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICd0b29sdGlwcycgbXVzdCBiZSBwYXNzZWQgYSBmb3JtYXR0ZXIgb3IgJ2ZhbHNlJy5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwYXJzZWQudG9vbHRpcHMgPSBlbnRyeTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXN0SGFuZGxlQXR0cmlidXRlcyhwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmIChlbnRyeS5sZW5ndGggIT09IHBhcnNlZC5oYW5kbGVzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiBtdXN0IHBhc3MgYSBhdHRyaWJ1dGVzIGZvciBhbGwgaGFuZGxlcy5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcGFyc2VkLmhhbmRsZUF0dHJpYnV0ZXMgPSBlbnRyeTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdEFyaWFGb3JtYXQocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAoIWlzVmFsaWRQYXJ0aWFsRm9ybWF0dGVyKGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ2FyaWFGb3JtYXQnIHJlcXVpcmVzICd0bycgbWV0aG9kLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWQuYXJpYUZvcm1hdCA9IGVudHJ5O1xuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXN0Rm9ybWF0KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc1ZhbGlkRm9ybWF0dGVyKGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ2Zvcm1hdCcgcmVxdWlyZXMgJ3RvJyBhbmQgJ2Zyb20nIG1ldGhvZHMuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlZC5mb3JtYXQgPSBlbnRyeTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdEtleWJvYXJkU3VwcG9ydChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAna2V5Ym9hcmRTdXBwb3J0JyBvcHRpb24gbXVzdCBiZSBhIGJvb2xlYW4uXCIpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlZC5rZXlib2FyZFN1cHBvcnQgPSBlbnRyeTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdERvY3VtZW50RWxlbWVudChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYW4gYWR2YW5jZWQgb3B0aW9uLiBQYXNzZWQgdmFsdWVzIGFyZSB1c2VkIHdpdGhvdXQgdmFsaWRhdGlvbi5cbiAgICAgICAgcGFyc2VkLmRvY3VtZW50RWxlbWVudCA9IGVudHJ5O1xuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXN0Q3NzUHJlZml4KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJzdHJpbmdcIiAmJiBlbnRyeSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdjc3NQcmVmaXgnIG11c3QgYmUgYSBzdHJpbmcgb3IgYGZhbHNlYC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcGFyc2VkLmNzc1ByZWZpeCA9IGVudHJ5O1xuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXN0Q3NzQ2xhc3NlcyhwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdjc3NDbGFzc2VzJyBtdXN0IGJlIGFuIG9iamVjdC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBwYXJzZWQuY3NzUHJlZml4ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBwYXJzZWQuY3NzQ2xhc3NlcyA9IHt9O1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoZW50cnkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIHBhcnNlZC5jc3NDbGFzc2VzW2tleV0gPSBwYXJzZWQuY3NzUHJlZml4ICsgZW50cnlba2V5XTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VkLmNzc0NsYXNzZXMgPSBlbnRyeTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBUZXN0IGFsbCBkZXZlbG9wZXIgc2V0dGluZ3MgYW5kIHBhcnNlIHRvIGFzc3VtcHRpb24tc2FmZSB2YWx1ZXMuXG4gICAgZnVuY3Rpb24gdGVzdE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICAvLyBUbyBwcm92ZSBhIGZpeCBmb3IgIzUzNywgZnJlZXplIG9wdGlvbnMgaGVyZS5cbiAgICAgICAgLy8gSWYgdGhlIG9iamVjdCBpcyBtb2RpZmllZCwgYW4gZXJyb3Igd2lsbCBiZSB0aHJvd24uXG4gICAgICAgIC8vIE9iamVjdC5mcmVlemUob3B0aW9ucyk7XG4gICAgICAgIHZhciBwYXJzZWQgPSB7XG4gICAgICAgICAgICBtYXJnaW46IG51bGwsXG4gICAgICAgICAgICBsaW1pdDogbnVsbCxcbiAgICAgICAgICAgIHBhZGRpbmc6IG51bGwsXG4gICAgICAgICAgICBhbmltYXRlOiB0cnVlLFxuICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246IDMwMCxcbiAgICAgICAgICAgIGFyaWFGb3JtYXQ6IGRlZmF1bHRGb3JtYXR0ZXIsXG4gICAgICAgICAgICBmb3JtYXQ6IGRlZmF1bHRGb3JtYXR0ZXJcbiAgICAgICAgfTtcbiAgICAgICAgLy8gVGVzdHMgYXJlIGV4ZWN1dGVkIGluIHRoZSBvcmRlciB0aGV5IGFyZSBwcmVzZW50ZWQgaGVyZS5cbiAgICAgICAgdmFyIHRlc3RzID0ge1xuICAgICAgICAgICAgc3RlcDogeyByOiBmYWxzZSwgdDogdGVzdFN0ZXAgfSxcbiAgICAgICAgICAgIGtleWJvYXJkUGFnZU11bHRpcGxpZXI6IHsgcjogZmFsc2UsIHQ6IHRlc3RLZXlib2FyZFBhZ2VNdWx0aXBsaWVyIH0sXG4gICAgICAgICAgICBrZXlib2FyZE11bHRpcGxpZXI6IHsgcjogZmFsc2UsIHQ6IHRlc3RLZXlib2FyZE11bHRpcGxpZXIgfSxcbiAgICAgICAgICAgIGtleWJvYXJkRGVmYXVsdFN0ZXA6IHsgcjogZmFsc2UsIHQ6IHRlc3RLZXlib2FyZERlZmF1bHRTdGVwIH0sXG4gICAgICAgICAgICBzdGFydDogeyByOiB0cnVlLCB0OiB0ZXN0U3RhcnQgfSxcbiAgICAgICAgICAgIGNvbm5lY3Q6IHsgcjogdHJ1ZSwgdDogdGVzdENvbm5lY3QgfSxcbiAgICAgICAgICAgIGRpcmVjdGlvbjogeyByOiB0cnVlLCB0OiB0ZXN0RGlyZWN0aW9uIH0sXG4gICAgICAgICAgICBzbmFwOiB7IHI6IGZhbHNlLCB0OiB0ZXN0U25hcCB9LFxuICAgICAgICAgICAgYW5pbWF0ZTogeyByOiBmYWxzZSwgdDogdGVzdEFuaW1hdGUgfSxcbiAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiB7IHI6IGZhbHNlLCB0OiB0ZXN0QW5pbWF0aW9uRHVyYXRpb24gfSxcbiAgICAgICAgICAgIHJhbmdlOiB7IHI6IHRydWUsIHQ6IHRlc3RSYW5nZSB9LFxuICAgICAgICAgICAgb3JpZW50YXRpb246IHsgcjogZmFsc2UsIHQ6IHRlc3RPcmllbnRhdGlvbiB9LFxuICAgICAgICAgICAgbWFyZ2luOiB7IHI6IGZhbHNlLCB0OiB0ZXN0TWFyZ2luIH0sXG4gICAgICAgICAgICBsaW1pdDogeyByOiBmYWxzZSwgdDogdGVzdExpbWl0IH0sXG4gICAgICAgICAgICBwYWRkaW5nOiB7IHI6IGZhbHNlLCB0OiB0ZXN0UGFkZGluZyB9LFxuICAgICAgICAgICAgYmVoYXZpb3VyOiB7IHI6IHRydWUsIHQ6IHRlc3RCZWhhdmlvdXIgfSxcbiAgICAgICAgICAgIGFyaWFGb3JtYXQ6IHsgcjogZmFsc2UsIHQ6IHRlc3RBcmlhRm9ybWF0IH0sXG4gICAgICAgICAgICBmb3JtYXQ6IHsgcjogZmFsc2UsIHQ6IHRlc3RGb3JtYXQgfSxcbiAgICAgICAgICAgIHRvb2x0aXBzOiB7IHI6IGZhbHNlLCB0OiB0ZXN0VG9vbHRpcHMgfSxcbiAgICAgICAgICAgIGtleWJvYXJkU3VwcG9ydDogeyByOiB0cnVlLCB0OiB0ZXN0S2V5Ym9hcmRTdXBwb3J0IH0sXG4gICAgICAgICAgICBkb2N1bWVudEVsZW1lbnQ6IHsgcjogZmFsc2UsIHQ6IHRlc3REb2N1bWVudEVsZW1lbnQgfSxcbiAgICAgICAgICAgIGNzc1ByZWZpeDogeyByOiB0cnVlLCB0OiB0ZXN0Q3NzUHJlZml4IH0sXG4gICAgICAgICAgICBjc3NDbGFzc2VzOiB7IHI6IHRydWUsIHQ6IHRlc3RDc3NDbGFzc2VzIH0sXG4gICAgICAgICAgICBoYW5kbGVBdHRyaWJ1dGVzOiB7IHI6IGZhbHNlLCB0OiB0ZXN0SGFuZGxlQXR0cmlidXRlcyB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgIGNvbm5lY3Q6IGZhbHNlLFxuICAgICAgICAgICAgZGlyZWN0aW9uOiBcImx0clwiLFxuICAgICAgICAgICAgYmVoYXZpb3VyOiBcInRhcFwiLFxuICAgICAgICAgICAgb3JpZW50YXRpb246IFwiaG9yaXpvbnRhbFwiLFxuICAgICAgICAgICAga2V5Ym9hcmRTdXBwb3J0OiB0cnVlLFxuICAgICAgICAgICAgY3NzUHJlZml4OiBcIm5vVWktXCIsXG4gICAgICAgICAgICBjc3NDbGFzc2VzOiBjc3NDbGFzc2VzLFxuICAgICAgICAgICAga2V5Ym9hcmRQYWdlTXVsdGlwbGllcjogNSxcbiAgICAgICAgICAgIGtleWJvYXJkTXVsdGlwbGllcjogMSxcbiAgICAgICAgICAgIGtleWJvYXJkRGVmYXVsdFN0ZXA6IDEwXG4gICAgICAgIH07XG4gICAgICAgIC8vIEFyaWFGb3JtYXQgZGVmYXVsdHMgdG8gcmVndWxhciBmb3JtYXQsIGlmIGFueS5cbiAgICAgICAgaWYgKG9wdGlvbnMuZm9ybWF0ICYmICFvcHRpb25zLmFyaWFGb3JtYXQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYXJpYUZvcm1hdCA9IG9wdGlvbnMuZm9ybWF0O1xuICAgICAgICB9XG4gICAgICAgIC8vIFJ1biBhbGwgb3B0aW9ucyB0aHJvdWdoIGEgdGVzdGluZyBtZWNoYW5pc20gdG8gZW5zdXJlIGNvcnJlY3RcbiAgICAgICAgLy8gaW5wdXQuIEl0IHNob3VsZCBiZSBub3RlZCB0aGF0IG9wdGlvbnMgbWlnaHQgZ2V0IG1vZGlmaWVkIHRvXG4gICAgICAgIC8vIGJlIGhhbmRsZWQgcHJvcGVybHkuIEUuZy4gd3JhcHBpbmcgaW50ZWdlcnMgaW4gYXJyYXlzLlxuICAgICAgICBPYmplY3Qua2V5cyh0ZXN0cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIG9wdGlvbiBpc24ndCBzZXQsIGJ1dCBpdCBpcyByZXF1aXJlZCwgdGhyb3cgYW4gZXJyb3IuXG4gICAgICAgICAgICBpZiAoIWlzU2V0KG9wdGlvbnNbbmFtZV0pICYmIGRlZmF1bHRzW25hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGVzdHNbbmFtZV0ucikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnXCIgKyBuYW1lICsgXCInIGlzIHJlcXVpcmVkLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGVzdHNbbmFtZV0udChwYXJzZWQsICFpc1NldChvcHRpb25zW25hbWVdKSA/IGRlZmF1bHRzW25hbWVdIDogb3B0aW9uc1tuYW1lXSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBGb3J3YXJkIHBpcHMgb3B0aW9uc1xuICAgICAgICBwYXJzZWQucGlwcyA9IG9wdGlvbnMucGlwcztcbiAgICAgICAgLy8gQWxsIHJlY2VudCBicm93c2VycyBhY2NlcHQgdW5wcmVmaXhlZCB0cmFuc2Zvcm0uXG4gICAgICAgIC8vIFdlIG5lZWQgLW1zLSBmb3IgSUU5IGFuZCAtd2Via2l0LSBmb3Igb2xkZXIgQW5kcm9pZDtcbiAgICAgICAgLy8gQXNzdW1lIHVzZSBvZiAtd2Via2l0LSBpZiB1bnByZWZpeGVkIGFuZCAtbXMtIGFyZSBub3Qgc3VwcG9ydGVkLlxuICAgICAgICAvLyBodHRwczovL2Nhbml1c2UuY29tLyNmZWF0PXRyYW5zZm9ybXMyZFxuICAgICAgICB2YXIgZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHZhciBtc1ByZWZpeCA9IGQuc3R5bGUubXNUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIG5vUHJlZml4ID0gZC5zdHlsZS50cmFuc2Zvcm0gIT09IHVuZGVmaW5lZDtcbiAgICAgICAgcGFyc2VkLnRyYW5zZm9ybVJ1bGUgPSBub1ByZWZpeCA/IFwidHJhbnNmb3JtXCIgOiBtc1ByZWZpeCA/IFwibXNUcmFuc2Zvcm1cIiA6IFwid2Via2l0VHJhbnNmb3JtXCI7XG4gICAgICAgIC8vIFBpcHMgZG9uJ3QgbW92ZSwgc28gd2UgY2FuIHBsYWNlIHRoZW0gdXNpbmcgbGVmdC90b3AuXG4gICAgICAgIHZhciBzdHlsZXMgPSBbXG4gICAgICAgICAgICBbXCJsZWZ0XCIsIFwidG9wXCJdLFxuICAgICAgICAgICAgW1wicmlnaHRcIiwgXCJib3R0b21cIl1cbiAgICAgICAgXTtcbiAgICAgICAgcGFyc2VkLnN0eWxlID0gc3R5bGVzW3BhcnNlZC5kaXJdW3BhcnNlZC5vcnRdO1xuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiAgICAvL2VuZHJlZ2lvblxuICAgIGZ1bmN0aW9uIHNjb3BlKHRhcmdldCwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zKSB7XG4gICAgICAgIHZhciBhY3Rpb25zID0gZ2V0QWN0aW9ucygpO1xuICAgICAgICB2YXIgc3VwcG9ydHNUb3VjaEFjdGlvbk5vbmUgPSBnZXRTdXBwb3J0c1RvdWNoQWN0aW9uTm9uZSgpO1xuICAgICAgICB2YXIgc3VwcG9ydHNQYXNzaXZlID0gc3VwcG9ydHNUb3VjaEFjdGlvbk5vbmUgJiYgZ2V0U3VwcG9ydHNQYXNzaXZlKCk7XG4gICAgICAgIC8vIEFsbCB2YXJpYWJsZXMgbG9jYWwgdG8gJ3Njb3BlJyBhcmUgcHJlZml4ZWQgd2l0aCAnc2NvcGVfJ1xuICAgICAgICAvLyBTbGlkZXIgRE9NIE5vZGVzXG4gICAgICAgIHZhciBzY29wZV9UYXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHZhciBzY29wZV9CYXNlO1xuICAgICAgICB2YXIgc2NvcGVfSGFuZGxlcztcbiAgICAgICAgdmFyIHNjb3BlX0Nvbm5lY3RzO1xuICAgICAgICB2YXIgc2NvcGVfUGlwcztcbiAgICAgICAgdmFyIHNjb3BlX1Rvb2x0aXBzO1xuICAgICAgICAvLyBTbGlkZXIgc3RhdGUgdmFsdWVzXG4gICAgICAgIHZhciBzY29wZV9TcGVjdHJ1bSA9IG9wdGlvbnMuc3BlY3RydW07XG4gICAgICAgIHZhciBzY29wZV9WYWx1ZXMgPSBbXTtcbiAgICAgICAgdmFyIHNjb3BlX0xvY2F0aW9ucyA9IFtdO1xuICAgICAgICB2YXIgc2NvcGVfSGFuZGxlTnVtYmVycyA9IFtdO1xuICAgICAgICB2YXIgc2NvcGVfQWN0aXZlSGFuZGxlc0NvdW50ID0gMDtcbiAgICAgICAgdmFyIHNjb3BlX0V2ZW50cyA9IHt9O1xuICAgICAgICAvLyBEb2N1bWVudCBOb2Rlc1xuICAgICAgICB2YXIgc2NvcGVfRG9jdW1lbnQgPSB0YXJnZXQub3duZXJEb2N1bWVudDtcbiAgICAgICAgdmFyIHNjb3BlX0RvY3VtZW50RWxlbWVudCA9IG9wdGlvbnMuZG9jdW1lbnRFbGVtZW50IHx8IHNjb3BlX0RvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgdmFyIHNjb3BlX0JvZHkgPSBzY29wZV9Eb2N1bWVudC5ib2R5O1xuICAgICAgICAvLyBGb3IgaG9yaXpvbnRhbCBzbGlkZXJzIGluIHN0YW5kYXJkIGx0ciBkb2N1bWVudHMsXG4gICAgICAgIC8vIG1ha2UgLm5vVWktb3JpZ2luIG92ZXJmbG93IHRvIHRoZSBsZWZ0IHNvIHRoZSBkb2N1bWVudCBkb2Vzbid0IHNjcm9sbC5cbiAgICAgICAgdmFyIHNjb3BlX0Rpck9mZnNldCA9IHNjb3BlX0RvY3VtZW50LmRpciA9PT0gXCJydGxcIiB8fCBvcHRpb25zLm9ydCA9PT0gMSA/IDAgOiAxMDA7XG4gICAgICAgIC8vIENyZWF0ZXMgYSBub2RlLCBhZGRzIGl0IHRvIHRhcmdldCwgcmV0dXJucyB0aGUgbmV3IG5vZGUuXG4gICAgICAgIGZ1bmN0aW9uIGFkZE5vZGVUbyhhZGRUYXJnZXQsIGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgdmFyIGRpdiA9IHNjb3BlX0RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoZGl2LCBjbGFzc05hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkVGFyZ2V0LmFwcGVuZENoaWxkKGRpdik7XG4gICAgICAgICAgICByZXR1cm4gZGl2O1xuICAgICAgICB9XG4gICAgICAgIC8vIEFwcGVuZCBhIG9yaWdpbiB0byB0aGUgYmFzZVxuICAgICAgICBmdW5jdGlvbiBhZGRPcmlnaW4oYmFzZSwgaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgb3JpZ2luID0gYWRkTm9kZVRvKGJhc2UsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5vcmlnaW4pO1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGFkZE5vZGVUbyhvcmlnaW4sIG9wdGlvbnMuY3NzQ2xhc3Nlcy5oYW5kbGUpO1xuICAgICAgICAgICAgYWRkTm9kZVRvKGhhbmRsZSwgb3B0aW9ucy5jc3NDbGFzc2VzLnRvdWNoQXJlYSk7XG4gICAgICAgICAgICBoYW5kbGUuc2V0QXR0cmlidXRlKFwiZGF0YS1oYW5kbGVcIiwgU3RyaW5nKGhhbmRsZU51bWJlcikpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMua2V5Ym9hcmRTdXBwb3J0KSB7XG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy90YWJpbmRleFxuICAgICAgICAgICAgICAgIC8vIDAgPSBmb2N1c2FibGUgYW5kIHJlYWNoYWJsZVxuICAgICAgICAgICAgICAgIGhhbmRsZS5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIjBcIik7XG4gICAgICAgICAgICAgICAgaGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnRLZXlkb3duKGV2ZW50LCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGFuZGxlQXR0cmlidXRlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZXNfMSA9IG9wdGlvbnMuaGFuZGxlQXR0cmlidXRlc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXNfMSkuZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZS5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCBhdHRyaWJ1dGVzXzFbYXR0cmlidXRlXSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYW5kbGUuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcInNsaWRlclwiKTtcbiAgICAgICAgICAgIGhhbmRsZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLW9yaWVudGF0aW9uXCIsIG9wdGlvbnMub3J0ID8gXCJ2ZXJ0aWNhbFwiIDogXCJob3Jpem9udGFsXCIpO1xuICAgICAgICAgICAgaWYgKGhhbmRsZU51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGhhbmRsZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmhhbmRsZUxvd2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGhhbmRsZU51bWJlciA9PT0gb3B0aW9ucy5oYW5kbGVzIC0gMSkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGhhbmRsZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmhhbmRsZVVwcGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvcmlnaW47XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW5zZXJ0IG5vZGVzIGZvciBjb25uZWN0IGVsZW1lbnRzXG4gICAgICAgIGZ1bmN0aW9uIGFkZENvbm5lY3QoYmFzZSwgYWRkKSB7XG4gICAgICAgICAgICBpZiAoIWFkZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhZGROb2RlVG8oYmFzZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmNvbm5lY3QpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFkZCBoYW5kbGVzIHRvIHRoZSBzbGlkZXIgYmFzZS5cbiAgICAgICAgZnVuY3Rpb24gYWRkRWxlbWVudHMoY29ubmVjdE9wdGlvbnMsIGJhc2UpIHtcbiAgICAgICAgICAgIHZhciBjb25uZWN0QmFzZSA9IGFkZE5vZGVUbyhiYXNlLCBvcHRpb25zLmNzc0NsYXNzZXMuY29ubmVjdHMpO1xuICAgICAgICAgICAgc2NvcGVfSGFuZGxlcyA9IFtdO1xuICAgICAgICAgICAgc2NvcGVfQ29ubmVjdHMgPSBbXTtcbiAgICAgICAgICAgIHNjb3BlX0Nvbm5lY3RzLnB1c2goYWRkQ29ubmVjdChjb25uZWN0QmFzZSwgY29ubmVjdE9wdGlvbnNbMF0pKTtcbiAgICAgICAgICAgIC8vIFs6Ojo6Tz09PT1PPT09PU89PT09XVxuICAgICAgICAgICAgLy8gY29ubmVjdE9wdGlvbnMgPSBbMCwgMSwgMSwgMV1cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5oYW5kbGVzOyBpKyspIHtcbiAgICAgICAgICAgICAgICAvLyBLZWVwIGEgbGlzdCBvZiBhbGwgYWRkZWQgaGFuZGxlcy5cbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVzLnB1c2goYWRkT3JpZ2luKGJhc2UsIGkpKTtcbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzW2ldID0gaTtcbiAgICAgICAgICAgICAgICBzY29wZV9Db25uZWN0cy5wdXNoKGFkZENvbm5lY3QoY29ubmVjdEJhc2UsIGNvbm5lY3RPcHRpb25zW2kgKyAxXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEluaXRpYWxpemUgYSBzaW5nbGUgc2xpZGVyLlxuICAgICAgICBmdW5jdGlvbiBhZGRTbGlkZXIoYWRkVGFyZ2V0KSB7XG4gICAgICAgICAgICAvLyBBcHBseSBjbGFzc2VzIGFuZCBkYXRhIHRvIHRoZSB0YXJnZXQuXG4gICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50YXJnZXQpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGlyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMubHRyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnJ0bCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5vcnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5ob3Jpem9udGFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnZlcnRpY2FsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0ZXh0RGlyZWN0aW9uID0gZ2V0Q29tcHV0ZWRTdHlsZShhZGRUYXJnZXQpLmRpcmVjdGlvbjtcbiAgICAgICAgICAgIGlmICh0ZXh0RGlyZWN0aW9uID09PSBcInJ0bFwiKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudGV4dERpcmVjdGlvblJ0bCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50ZXh0RGlyZWN0aW9uTHRyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhZGROb2RlVG8oYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMuYmFzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYWRkVG9vbHRpcChoYW5kbGUsIGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLnRvb2x0aXBzIHx8ICFvcHRpb25zLnRvb2x0aXBzW2hhbmRsZU51bWJlcl0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWRkTm9kZVRvKGhhbmRsZS5maXJzdENoaWxkLCBvcHRpb25zLmNzc0NsYXNzZXMudG9vbHRpcCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNTbGlkZXJEaXNhYmxlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzY29wZV9UYXJnZXQuaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGlzYWJsZSB0aGUgc2xpZGVyIGRyYWdnaW5nIGlmIGFueSBoYW5kbGUgaXMgZGlzYWJsZWRcbiAgICAgICAgZnVuY3Rpb24gaXNIYW5kbGVEaXNhYmxlZChoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGVPcmlnaW4gPSBzY29wZV9IYW5kbGVzW2hhbmRsZU51bWJlcl07XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlT3JpZ2luLmhhc0F0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZVRvb2x0aXBzKCkge1xuICAgICAgICAgICAgaWYgKHNjb3BlX1Rvb2x0aXBzKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnQoXCJ1cGRhdGVcIiArIElOVEVSTkFMX0VWRU5UX05TLnRvb2x0aXBzKTtcbiAgICAgICAgICAgICAgICBzY29wZV9Ub29sdGlwcy5mb3JFYWNoKGZ1bmN0aW9uICh0b29sdGlwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b29sdGlwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50KHRvb2x0aXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc2NvcGVfVG9vbHRpcHMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFRoZSB0b29sdGlwcyBvcHRpb24gaXMgYSBzaG9ydGhhbmQgZm9yIHVzaW5nIHRoZSAndXBkYXRlJyBldmVudC5cbiAgICAgICAgZnVuY3Rpb24gdG9vbHRpcHMoKSB7XG4gICAgICAgICAgICByZW1vdmVUb29sdGlwcygpO1xuICAgICAgICAgICAgLy8gVG9vbHRpcHMgYXJlIGFkZGVkIHdpdGggb3B0aW9ucy50b29sdGlwcyBpbiBvcmlnaW5hbCBvcmRlci5cbiAgICAgICAgICAgIHNjb3BlX1Rvb2x0aXBzID0gc2NvcGVfSGFuZGxlcy5tYXAoYWRkVG9vbHRpcCk7XG4gICAgICAgICAgICBiaW5kRXZlbnQoXCJ1cGRhdGVcIiArIElOVEVSTkFMX0VWRU5UX05TLnRvb2x0aXBzLCBmdW5jdGlvbiAodmFsdWVzLCBoYW5kbGVOdW1iZXIsIHVuZW5jb2RlZCkge1xuICAgICAgICAgICAgICAgIGlmICghc2NvcGVfVG9vbHRpcHMgfHwgIW9wdGlvbnMudG9vbHRpcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc2NvcGVfVG9vbHRpcHNbaGFuZGxlTnVtYmVyXSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZm9ybWF0dGVkVmFsdWUgPSB2YWx1ZXNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy50b29sdGlwc1toYW5kbGVOdW1iZXJdICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZFZhbHVlID0gb3B0aW9ucy50b29sdGlwc1toYW5kbGVOdW1iZXJdLnRvKHVuZW5jb2RlZFtoYW5kbGVOdW1iZXJdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2NvcGVfVG9vbHRpcHNbaGFuZGxlTnVtYmVyXS5pbm5lckhUTUwgPSBmb3JtYXR0ZWRWYWx1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGFyaWEoKSB7XG4gICAgICAgICAgICByZW1vdmVFdmVudChcInVwZGF0ZVwiICsgSU5URVJOQUxfRVZFTlRfTlMuYXJpYSk7XG4gICAgICAgICAgICBiaW5kRXZlbnQoXCJ1cGRhdGVcIiArIElOVEVSTkFMX0VWRU5UX05TLmFyaWEsIGZ1bmN0aW9uICh2YWx1ZXMsIGhhbmRsZU51bWJlciwgdW5lbmNvZGVkLCB0YXAsIHBvc2l0aW9ucykge1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBBcmlhIFZhbHVlcyBmb3IgYWxsIGhhbmRsZXMsIGFzIGEgY2hhbmdlIGluIG9uZSBjaGFuZ2VzIG1pbiBhbmQgbWF4IHZhbHVlcyBmb3IgdGhlIG5leHQuXG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlID0gc2NvcGVfSGFuZGxlc1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBtaW4gPSBjaGVja0hhbmRsZVBvc2l0aW9uKHNjb3BlX0xvY2F0aW9ucywgaW5kZXgsIDAsIHRydWUsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF4ID0gY2hlY2tIYW5kbGVQb3NpdGlvbihzY29wZV9Mb2NhdGlvbnMsIGluZGV4LCAxMDAsIHRydWUsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm93ID0gcG9zaXRpb25zW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9ybWF0dGVkIHZhbHVlIGZvciBkaXNwbGF5XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gU3RyaW5nKG9wdGlvbnMuYXJpYUZvcm1hdC50byh1bmVuY29kZWRbaW5kZXhdKSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1hcCB0byBzbGlkZXIgcmFuZ2UgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhtaW4pLnRvRml4ZWQoMSk7XG4gICAgICAgICAgICAgICAgICAgIG1heCA9IHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhtYXgpLnRvRml4ZWQoMSk7XG4gICAgICAgICAgICAgICAgICAgIG5vdyA9IHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhub3cpLnRvRml4ZWQoMSk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZS5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbWluXCIsIG1pbik7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZS5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbWF4XCIsIG1heCk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZS5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbm93XCIsIG5vdyk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZS5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVldGV4dFwiLCB0ZXh0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldEdyb3VwKHBpcHMpIHtcbiAgICAgICAgICAgIC8vIFVzZSB0aGUgcmFuZ2UuXG4gICAgICAgICAgICBpZiAocGlwcy5tb2RlID09PSBleHBvcnRzLlBpcHNNb2RlLlJhbmdlIHx8IHBpcHMubW9kZSA9PT0gZXhwb3J0cy5QaXBzTW9kZS5TdGVwcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9TcGVjdHJ1bS54VmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBpcHMubW9kZSA9PT0gZXhwb3J0cy5QaXBzTW9kZS5Db3VudCkge1xuICAgICAgICAgICAgICAgIGlmIChwaXBzLnZhbHVlcyA8IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ3ZhbHVlcycgKD49IDIpIHJlcXVpcmVkIGZvciBtb2RlICdjb3VudCcuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBEaXZpZGUgMCAtIDEwMCBpbiAnY291bnQnIHBhcnRzLlxuICAgICAgICAgICAgICAgIHZhciBpbnRlcnZhbCA9IHBpcHMudmFsdWVzIC0gMTtcbiAgICAgICAgICAgICAgICB2YXIgc3ByZWFkID0gMTAwIC8gaW50ZXJ2YWw7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgICAgICAgICAgIC8vIExpc3QgdGhlc2UgcGFydHMgYW5kIGhhdmUgdGhlbSBoYW5kbGVkIGFzICdwb3NpdGlvbnMnLlxuICAgICAgICAgICAgICAgIHdoaWxlIChpbnRlcnZhbC0tKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpbnRlcnZhbF0gPSBpbnRlcnZhbCAqIHNwcmVhZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2goMTAwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFwVG9SYW5nZSh2YWx1ZXMsIHBpcHMuc3RlcHBlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGlwcy5tb2RlID09PSBleHBvcnRzLlBpcHNNb2RlLlBvc2l0aW9ucykge1xuICAgICAgICAgICAgICAgIC8vIE1hcCBhbGwgcGVyY2VudGFnZXMgdG8gb24tcmFuZ2UgdmFsdWVzLlxuICAgICAgICAgICAgICAgIHJldHVybiBtYXBUb1JhbmdlKHBpcHMudmFsdWVzLCBwaXBzLnN0ZXBwZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBpcHMubW9kZSA9PT0gZXhwb3J0cy5QaXBzTW9kZS5WYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdmFsdWUgbXVzdCBiZSBzdGVwcGVkLCBpdCBuZWVkcyB0byBiZSBjb252ZXJ0ZWQgdG8gYSBwZXJjZW50YWdlIGZpcnN0LlxuICAgICAgICAgICAgICAgIGlmIChwaXBzLnN0ZXBwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBpcHMudmFsdWVzLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgdG8gcGVyY2VudGFnZSwgYXBwbHkgc3RlcCwgcmV0dXJuIHRvIHZhbHVlLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhzY29wZV9TcGVjdHJ1bS5nZXRTdGVwKHNjb3BlX1NwZWN0cnVtLnRvU3RlcHBpbmcodmFsdWUpKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIHdlIGNhbiBzaW1wbHkgdXNlIHRoZSB2YWx1ZXMuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBpcHMudmFsdWVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtdOyAvLyBwaXBzLm1vZGUgPSBuZXZlclxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1hcFRvUmFuZ2UodmFsdWVzLCBzdGVwcGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKHN0ZXBwZWQgPyBzY29wZV9TcGVjdHJ1bS5nZXRTdGVwKHZhbHVlKSA6IHZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlU3ByZWFkKHBpcHMpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNhZmVJbmNyZW1lbnQodmFsdWUsIGluY3JlbWVudCkge1xuICAgICAgICAgICAgICAgIC8vIEF2b2lkIGZsb2F0aW5nIHBvaW50IHZhcmlhbmNlIGJ5IGRyb3BwaW5nIHRoZSBzbWFsbGVzdCBkZWNpbWFsIHBsYWNlcy5cbiAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyKCh2YWx1ZSArIGluY3JlbWVudCkudG9GaXhlZCg3KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZ3JvdXAgPSBnZXRHcm91cChwaXBzKTtcbiAgICAgICAgICAgIHZhciBpbmRleGVzID0ge307XG4gICAgICAgICAgICB2YXIgZmlyc3RJblJhbmdlID0gc2NvcGVfU3BlY3RydW0ueFZhbFswXTtcbiAgICAgICAgICAgIHZhciBsYXN0SW5SYW5nZSA9IHNjb3BlX1NwZWN0cnVtLnhWYWxbc2NvcGVfU3BlY3RydW0ueFZhbC5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIHZhciBpZ25vcmVGaXJzdCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGlnbm9yZUxhc3QgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBwcmV2UGN0ID0gMDtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIGNvcHkgb2YgdGhlIGdyb3VwLCBzb3J0IGl0IGFuZCBmaWx0ZXIgYXdheSBhbGwgZHVwbGljYXRlcy5cbiAgICAgICAgICAgIGdyb3VwID0gdW5pcXVlKGdyb3VwLnNsaWNlKCkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgcmFuZ2Ugc3RhcnRzIHdpdGggdGhlIGZpcnN0IGVsZW1lbnQuXG4gICAgICAgICAgICBpZiAoZ3JvdXBbMF0gIT09IGZpcnN0SW5SYW5nZSkge1xuICAgICAgICAgICAgICAgIGdyb3VwLnVuc2hpZnQoZmlyc3RJblJhbmdlKTtcbiAgICAgICAgICAgICAgICBpZ25vcmVGaXJzdCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBMaWtld2lzZSBmb3IgdGhlIGxhc3Qgb25lLlxuICAgICAgICAgICAgaWYgKGdyb3VwW2dyb3VwLmxlbmd0aCAtIDFdICE9PSBsYXN0SW5SYW5nZSkge1xuICAgICAgICAgICAgICAgIGdyb3VwLnB1c2gobGFzdEluUmFuZ2UpO1xuICAgICAgICAgICAgICAgIGlnbm9yZUxhc3QgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ3JvdXAuZm9yRWFjaChmdW5jdGlvbiAoY3VycmVudCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgc3RlcCBhbmQgdGhlIGxvd2VyICsgdXBwZXIgcG9zaXRpb25zLlxuICAgICAgICAgICAgICAgIHZhciBzdGVwO1xuICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgIHZhciBxO1xuICAgICAgICAgICAgICAgIHZhciBsb3cgPSBjdXJyZW50O1xuICAgICAgICAgICAgICAgIHZhciBoaWdoID0gZ3JvdXBbaW5kZXggKyAxXTtcbiAgICAgICAgICAgICAgICB2YXIgbmV3UGN0O1xuICAgICAgICAgICAgICAgIHZhciBwY3REaWZmZXJlbmNlO1xuICAgICAgICAgICAgICAgIHZhciBwY3RQb3M7XG4gICAgICAgICAgICAgICAgdmFyIHR5cGU7XG4gICAgICAgICAgICAgICAgdmFyIHN0ZXBzO1xuICAgICAgICAgICAgICAgIHZhciByZWFsU3RlcHM7XG4gICAgICAgICAgICAgICAgdmFyIHN0ZXBTaXplO1xuICAgICAgICAgICAgICAgIHZhciBpc1N0ZXBzID0gcGlwcy5tb2RlID09PSBleHBvcnRzLlBpcHNNb2RlLlN0ZXBzO1xuICAgICAgICAgICAgICAgIC8vIFdoZW4gdXNpbmcgJ3N0ZXBzJyBtb2RlLCB1c2UgdGhlIHByb3ZpZGVkIHN0ZXBzLlxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgd2UnbGwgc3RlcCBvbiB0byB0aGUgbmV4dCBzdWJyYW5nZS5cbiAgICAgICAgICAgICAgICBpZiAoaXNTdGVwcykge1xuICAgICAgICAgICAgICAgICAgICBzdGVwID0gc2NvcGVfU3BlY3RydW0ueE51bVN0ZXBzW2luZGV4XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gRGVmYXVsdCB0byBhICdmdWxsJyBzdGVwLlxuICAgICAgICAgICAgICAgIGlmICghc3RlcCkge1xuICAgICAgICAgICAgICAgICAgICBzdGVwID0gaGlnaCAtIGxvdztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWYgaGlnaCBpcyB1bmRlZmluZWQgd2UgYXJlIGF0IHRoZSBsYXN0IHN1YnJhbmdlLiBNYWtlIHN1cmUgaXQgaXRlcmF0ZXMgb25jZSAoIzEwODgpXG4gICAgICAgICAgICAgICAgaWYgKGhpZ2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBoaWdoID0gbG93O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgc3RlcCBpc24ndCAwLCB3aGljaCB3b3VsZCBjYXVzZSBhbiBpbmZpbml0ZSBsb29wICgjNjU0KVxuICAgICAgICAgICAgICAgIHN0ZXAgPSBNYXRoLm1heChzdGVwLCAwLjAwMDAwMDEpO1xuICAgICAgICAgICAgICAgIC8vIEZpbmQgYWxsIHN0ZXBzIGluIHRoZSBzdWJyYW5nZS5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBsb3c7IGkgPD0gaGlnaDsgaSA9IHNhZmVJbmNyZW1lbnQoaSwgc3RlcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBwZXJjZW50YWdlIHZhbHVlIGZvciB0aGUgY3VycmVudCBzdGVwLFxuICAgICAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIHNpemUgZm9yIHRoZSBzdWJyYW5nZS5cbiAgICAgICAgICAgICAgICAgICAgbmV3UGN0ID0gc2NvcGVfU3BlY3RydW0udG9TdGVwcGluZyhpKTtcbiAgICAgICAgICAgICAgICAgICAgcGN0RGlmZmVyZW5jZSA9IG5ld1BjdCAtIHByZXZQY3Q7XG4gICAgICAgICAgICAgICAgICAgIHN0ZXBzID0gcGN0RGlmZmVyZW5jZSAvIChwaXBzLmRlbnNpdHkgfHwgMSk7XG4gICAgICAgICAgICAgICAgICAgIHJlYWxTdGVwcyA9IE1hdGgucm91bmQoc3RlcHMpO1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHJhdGlvIHJlcHJlc2VudHMgdGhlIGFtb3VudCBvZiBwZXJjZW50YWdlLXNwYWNlIGEgcG9pbnQgaW5kaWNhdGVzLlxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgYSBkZW5zaXR5IDEgdGhlIHBvaW50cy9wZXJjZW50YWdlID0gMS4gRm9yIGRlbnNpdHkgMiwgdGhhdCBwZXJjZW50YWdlIG5lZWRzIHRvIGJlIHJlLWRpdmlkZWQuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJvdW5kIHRoZSBwZXJjZW50YWdlIG9mZnNldCB0byBhbiBldmVuIG51bWJlciwgdGhlbiBkaXZpZGUgYnkgdHdvXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIHNwcmVhZCB0aGUgb2Zmc2V0IG9uIGJvdGggc2lkZXMgb2YgdGhlIHJhbmdlLlxuICAgICAgICAgICAgICAgICAgICBzdGVwU2l6ZSA9IHBjdERpZmZlcmVuY2UgLyByZWFsU3RlcHM7XG4gICAgICAgICAgICAgICAgICAgIC8vIERpdmlkZSBhbGwgcG9pbnRzIGV2ZW5seSwgYWRkaW5nIHRoZSBjb3JyZWN0IG51bWJlciB0byB0aGlzIHN1YnJhbmdlLlxuICAgICAgICAgICAgICAgICAgICAvLyBSdW4gdXAgdG8gPD0gc28gdGhhdCAxMDAlIGdldHMgYSBwb2ludCwgZXZlbnQgaWYgaWdub3JlTGFzdCBpcyBzZXQuXG4gICAgICAgICAgICAgICAgICAgIGZvciAocSA9IDE7IHEgPD0gcmVhbFN0ZXBzOyBxICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSByYXRpbyBiZXR3ZWVuIHRoZSByb3VuZGVkIHZhbHVlIGFuZCB0aGUgYWN0dWFsIHNpemUgbWlnaHQgYmUgfjElIG9mZi5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvcnJlY3QgdGhlIHBlcmNlbnRhZ2Ugb2Zmc2V0IGJ5IHRoZSBudW1iZXIgb2YgcG9pbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwZXIgc3VicmFuZ2UuIGRlbnNpdHkgPSAxIHdpbGwgcmVzdWx0IGluIDEwMCBwb2ludHMgb24gdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmdWxsIHJhbmdlLCAyIGZvciA1MCwgNCBmb3IgMjUsIGV0Yy5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBjdFBvcyA9IHByZXZQY3QgKyBxICogc3RlcFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleGVzW3BjdFBvcy50b0ZpeGVkKDUpXSA9IFtzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcocGN0UG9zKSwgMF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBwb2ludCB0eXBlLlxuICAgICAgICAgICAgICAgICAgICB0eXBlID0gZ3JvdXAuaW5kZXhPZihpKSA+IC0xID8gZXhwb3J0cy5QaXBzVHlwZS5MYXJnZVZhbHVlIDogaXNTdGVwcyA/IGV4cG9ydHMuUGlwc1R5cGUuU21hbGxWYWx1ZSA6IGV4cG9ydHMuUGlwc1R5cGUuTm9WYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gRW5mb3JjZSB0aGUgJ2lnbm9yZUZpcnN0JyBvcHRpb24gYnkgb3ZlcndyaXRpbmcgdGhlIHR5cGUgZm9yIDAuXG4gICAgICAgICAgICAgICAgICAgIGlmICghaW5kZXggJiYgaWdub3JlRmlyc3QgJiYgaSAhPT0gaGlnaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoaSA9PT0gaGlnaCAmJiBpZ25vcmVMYXN0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFyayB0aGUgJ3R5cGUnIG9mIHRoaXMgcG9pbnQuIDAgPSBwbGFpbiwgMSA9IHJlYWwgdmFsdWUsIDIgPSBzdGVwIHZhbHVlLlxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhlc1tuZXdQY3QudG9GaXhlZCg1KV0gPSBbaSwgdHlwZV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBwZXJjZW50YWdlIGNvdW50LlxuICAgICAgICAgICAgICAgICAgICBwcmV2UGN0ID0gbmV3UGN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGluZGV4ZXM7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYWRkTWFya2luZyhzcHJlYWQsIGZpbHRlckZ1bmMsIGZvcm1hdHRlcikge1xuICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gc2NvcGVfRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZVNpemVDbGFzc2VzID0gKF9hID0ge30sXG4gICAgICAgICAgICAgICAgX2FbZXhwb3J0cy5QaXBzVHlwZS5Ob25lXSA9IFwiXCIsXG4gICAgICAgICAgICAgICAgX2FbZXhwb3J0cy5QaXBzVHlwZS5Ob1ZhbHVlXSA9IG9wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZU5vcm1hbCxcbiAgICAgICAgICAgICAgICBfYVtleHBvcnRzLlBpcHNUeXBlLkxhcmdlVmFsdWVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlTGFyZ2UsXG4gICAgICAgICAgICAgICAgX2FbZXhwb3J0cy5QaXBzVHlwZS5TbWFsbFZhbHVlXSA9IG9wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZVN1YixcbiAgICAgICAgICAgICAgICBfYSk7XG4gICAgICAgICAgICB2YXIgbWFya2VyU2l6ZUNsYXNzZXMgPSAoX2IgPSB7fSxcbiAgICAgICAgICAgICAgICBfYltleHBvcnRzLlBpcHNUeXBlLk5vbmVdID0gXCJcIixcbiAgICAgICAgICAgICAgICBfYltleHBvcnRzLlBpcHNUeXBlLk5vVmFsdWVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlck5vcm1hbCxcbiAgICAgICAgICAgICAgICBfYltleHBvcnRzLlBpcHNUeXBlLkxhcmdlVmFsdWVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlckxhcmdlLFxuICAgICAgICAgICAgICAgIF9iW2V4cG9ydHMuUGlwc1R5cGUuU21hbGxWYWx1ZV0gPSBvcHRpb25zLmNzc0NsYXNzZXMubWFya2VyU3ViLFxuICAgICAgICAgICAgICAgIF9iKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZU9yaWVudGF0aW9uQ2xhc3NlcyA9IFtvcHRpb25zLmNzc0NsYXNzZXMudmFsdWVIb3Jpem9udGFsLCBvcHRpb25zLmNzc0NsYXNzZXMudmFsdWVWZXJ0aWNhbF07XG4gICAgICAgICAgICB2YXIgbWFya2VyT3JpZW50YXRpb25DbGFzc2VzID0gW29wdGlvbnMuY3NzQ2xhc3Nlcy5tYXJrZXJIb3Jpem9udGFsLCBvcHRpb25zLmNzc0NsYXNzZXMubWFya2VyVmVydGljYWxdO1xuICAgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgb3B0aW9ucy5jc3NDbGFzc2VzLnBpcHMpO1xuICAgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgb3B0aW9ucy5vcnQgPT09IDAgPyBvcHRpb25zLmNzc0NsYXNzZXMucGlwc0hvcml6b250YWwgOiBvcHRpb25zLmNzc0NsYXNzZXMucGlwc1ZlcnRpY2FsKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldENsYXNzZXModHlwZSwgc291cmNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBzb3VyY2UgPT09IG9wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgb3JpZW50YXRpb25DbGFzc2VzID0gYSA/IHZhbHVlT3JpZW50YXRpb25DbGFzc2VzIDogbWFya2VyT3JpZW50YXRpb25DbGFzc2VzO1xuICAgICAgICAgICAgICAgIHZhciBzaXplQ2xhc3NlcyA9IGEgPyB2YWx1ZVNpemVDbGFzc2VzIDogbWFya2VyU2l6ZUNsYXNzZXM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZSArIFwiIFwiICsgb3JpZW50YXRpb25DbGFzc2VzW29wdGlvbnMub3J0XSArIFwiIFwiICsgc2l6ZUNsYXNzZXNbdHlwZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBhZGRTcHJlYWQob2Zmc2V0LCB2YWx1ZSwgdHlwZSkge1xuICAgICAgICAgICAgICAgIC8vIEFwcGx5IHRoZSBmaWx0ZXIgZnVuY3Rpb24sIGlmIGl0IGlzIHNldC5cbiAgICAgICAgICAgICAgICB0eXBlID0gZmlsdGVyRnVuYyA/IGZpbHRlckZ1bmModmFsdWUsIHR5cGUpIDogdHlwZTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gZXhwb3J0cy5QaXBzVHlwZS5Ob25lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQWRkIGEgbWFya2VyIGZvciBldmVyeSBwb2ludFxuICAgICAgICAgICAgICAgIHZhciBub2RlID0gYWRkTm9kZVRvKGVsZW1lbnQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBub2RlLmNsYXNzTmFtZSA9IGdldENsYXNzZXModHlwZSwgb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlcik7XG4gICAgICAgICAgICAgICAgbm9kZS5zdHlsZVtvcHRpb25zLnN0eWxlXSA9IG9mZnNldCArIFwiJVwiO1xuICAgICAgICAgICAgICAgIC8vIFZhbHVlcyBhcmUgb25seSBhcHBlbmRlZCBmb3IgcG9pbnRzIG1hcmtlZCAnMScgb3IgJzInLlxuICAgICAgICAgICAgICAgIGlmICh0eXBlID4gZXhwb3J0cy5QaXBzVHlwZS5Ob1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBhZGROb2RlVG8oZWxlbWVudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBub2RlLmNsYXNzTmFtZSA9IGdldENsYXNzZXModHlwZSwgb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXZhbHVlXCIsIFN0cmluZyh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlW29wdGlvbnMuc3R5bGVdID0gb2Zmc2V0ICsgXCIlXCI7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuaW5uZXJIVE1MID0gU3RyaW5nKGZvcm1hdHRlci50byh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFwcGVuZCBhbGwgcG9pbnRzLlxuICAgICAgICAgICAgT2JqZWN0LmtleXMoc3ByZWFkKS5mb3JFYWNoKGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBhZGRTcHJlYWQob2Zmc2V0LCBzcHJlYWRbb2Zmc2V0XVswXSwgc3ByZWFkW29mZnNldF1bMV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZW1vdmVQaXBzKCkge1xuICAgICAgICAgICAgaWYgKHNjb3BlX1BpcHMpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50KHNjb3BlX1BpcHMpO1xuICAgICAgICAgICAgICAgIHNjb3BlX1BpcHMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBpcHMocGlwcykge1xuICAgICAgICAgICAgLy8gRml4ICM2NjlcbiAgICAgICAgICAgIHJlbW92ZVBpcHMoKTtcbiAgICAgICAgICAgIHZhciBzcHJlYWQgPSBnZW5lcmF0ZVNwcmVhZChwaXBzKTtcbiAgICAgICAgICAgIHZhciBmaWx0ZXIgPSBwaXBzLmZpbHRlcjtcbiAgICAgICAgICAgIHZhciBmb3JtYXQgPSBwaXBzLmZvcm1hdCB8fCB7XG4gICAgICAgICAgICAgICAgdG86IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKE1hdGgucm91bmQodmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2NvcGVfUGlwcyA9IHNjb3BlX1RhcmdldC5hcHBlbmRDaGlsZChhZGRNYXJraW5nKHNwcmVhZCwgZmlsdGVyLCBmb3JtYXQpKTtcbiAgICAgICAgICAgIHJldHVybiBzY29wZV9QaXBzO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNob3J0aGFuZCBmb3IgYmFzZSBkaW1lbnNpb25zLlxuICAgICAgICBmdW5jdGlvbiBiYXNlU2l6ZSgpIHtcbiAgICAgICAgICAgIHZhciByZWN0ID0gc2NvcGVfQmFzZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHZhciBhbHQgPSAoXCJvZmZzZXRcIiArIFtcIldpZHRoXCIsIFwiSGVpZ2h0XCJdW29wdGlvbnMub3J0XSk7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5vcnQgPT09IDAgPyByZWN0LndpZHRoIHx8IHNjb3BlX0Jhc2VbYWx0XSA6IHJlY3QuaGVpZ2h0IHx8IHNjb3BlX0Jhc2VbYWx0XTtcbiAgICAgICAgfVxuICAgICAgICAvLyBIYW5kbGVyIGZvciBhdHRhY2hpbmcgZXZlbnRzIHRyb3VnaCBhIHByb3h5LlxuICAgICAgICBmdW5jdGlvbiBhdHRhY2hFdmVudChldmVudHMsIGVsZW1lbnQsIGNhbGxiYWNrLCBkYXRhKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvICdmaWx0ZXInIGV2ZW50cyB0byB0aGUgc2xpZGVyLlxuICAgICAgICAgICAgLy8gZWxlbWVudCBpcyBhIG5vZGUsIG5vdCBhIG5vZGVMaXN0XG4gICAgICAgICAgICB2YXIgbWV0aG9kID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSBmaXhFdmVudChldmVudCwgZGF0YS5wYWdlT2Zmc2V0LCBkYXRhLnRhcmdldCB8fCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAvLyBmaXhFdmVudCByZXR1cm5zIGZhbHNlIGlmIHRoaXMgZXZlbnQgaGFzIGEgZGlmZmVyZW50IHRhcmdldFxuICAgICAgICAgICAgICAgIC8vIHdoZW4gaGFuZGxpbmcgKG11bHRpLSkgdG91Y2ggZXZlbnRzO1xuICAgICAgICAgICAgICAgIGlmICghZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGRvTm90UmVqZWN0IGlzIHBhc3NlZCBieSBhbGwgZW5kIGV2ZW50cyB0byBtYWtlIHN1cmUgcmVsZWFzZWQgdG91Y2hlc1xuICAgICAgICAgICAgICAgIC8vIGFyZSBub3QgcmVqZWN0ZWQsIGxlYXZpbmcgdGhlIHNsaWRlciBcInN0dWNrXCIgdG8gdGhlIGN1cnNvcjtcbiAgICAgICAgICAgICAgICBpZiAoaXNTbGlkZXJEaXNhYmxlZCgpICYmICFkYXRhLmRvTm90UmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gU3RvcCBpZiBhbiBhY3RpdmUgJ3RhcCcgdHJhbnNpdGlvbiBpcyB0YWtpbmcgcGxhY2UuXG4gICAgICAgICAgICAgICAgaWYgKGhhc0NsYXNzKHNjb3BlX1RhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRhcCkgJiYgIWRhdGEuZG9Ob3RSZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgcmlnaHQgb3IgbWlkZGxlIGNsaWNrcyBvbiBzdGFydCAjNDU0XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50cyA9PT0gYWN0aW9ucy5zdGFydCAmJiBlLmJ1dHRvbnMgIT09IHVuZGVmaW5lZCAmJiBlLmJ1dHRvbnMgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIHJpZ2h0IG9yIG1pZGRsZSBjbGlja3Mgb24gc3RhcnQgIzQ1NFxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmhvdmVyICYmIGUuYnV0dG9ucykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vICdzdXBwb3J0c1Bhc3NpdmUnIGlzIG9ubHkgdHJ1ZSBpZiBhIGJyb3dzZXIgYWxzbyBzdXBwb3J0cyB0b3VjaC1hY3Rpb246IG5vbmUgaW4gQ1NTLlxuICAgICAgICAgICAgICAgIC8vIGlPUyBzYWZhcmkgZG9lcyBub3QsIHNvIGl0IGRvZXNuJ3QgZ2V0IHRvIGJlbmVmaXQgZnJvbSBwYXNzaXZlIHNjcm9sbGluZy4gaU9TIGRvZXMgc3VwcG9ydFxuICAgICAgICAgICAgICAgIC8vIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uLCBidXQgdGhhdCBhbGxvd3MgcGFubmluZywgd2hpY2ggYnJlYWtzXG4gICAgICAgICAgICAgICAgLy8gc2xpZGVycyBhZnRlciB6b29taW5nL29uIG5vbi1yZXNwb25zaXZlIHBhZ2VzLlxuICAgICAgICAgICAgICAgIC8vIFNlZTogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzMzExMlxuICAgICAgICAgICAgICAgIGlmICghc3VwcG9ydHNQYXNzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZS5jYWxjUG9pbnQgPSBlLnBvaW50c1tvcHRpb25zLm9ydF07XG4gICAgICAgICAgICAgICAgLy8gQ2FsbCB0aGUgZXZlbnQgaGFuZGxlciB3aXRoIHRoZSBldmVudCBbIGFuZCBhZGRpdGlvbmFsIGRhdGEgXS5cbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlLCBkYXRhKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIG1ldGhvZHMgPSBbXTtcbiAgICAgICAgICAgIC8vIEJpbmQgYSBjbG9zdXJlIG9uIHRoZSB0YXJnZXQgZm9yIGV2ZXJ5IGV2ZW50IHR5cGUuXG4gICAgICAgICAgICBldmVudHMuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG1ldGhvZCwgc3VwcG9ydHNQYXNzaXZlID8geyBwYXNzaXZlOiB0cnVlIH0gOiBmYWxzZSk7XG4gICAgICAgICAgICAgICAgbWV0aG9kcy5wdXNoKFtldmVudE5hbWUsIG1ldGhvZF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbWV0aG9kcztcbiAgICAgICAgfVxuICAgICAgICAvLyBQcm92aWRlIGEgY2xlYW4gZXZlbnQgd2l0aCBzdGFuZGFyZGl6ZWQgb2Zmc2V0IHZhbHVlcy5cbiAgICAgICAgZnVuY3Rpb24gZml4RXZlbnQoZSwgcGFnZU9mZnNldCwgZXZlbnRUYXJnZXQpIHtcbiAgICAgICAgICAgIC8vIEZpbHRlciB0aGUgZXZlbnQgdG8gcmVnaXN0ZXIgdGhlIHR5cGUsIHdoaWNoIGNhbiBiZVxuICAgICAgICAgICAgLy8gdG91Y2gsIG1vdXNlIG9yIHBvaW50ZXIuIE9mZnNldCBjaGFuZ2VzIG5lZWQgdG8gYmVcbiAgICAgICAgICAgIC8vIG1hZGUgb24gYW4gZXZlbnQgc3BlY2lmaWMgYmFzaXMuXG4gICAgICAgICAgICB2YXIgdG91Y2ggPSBlLnR5cGUuaW5kZXhPZihcInRvdWNoXCIpID09PSAwO1xuICAgICAgICAgICAgdmFyIG1vdXNlID0gZS50eXBlLmluZGV4T2YoXCJtb3VzZVwiKSA9PT0gMDtcbiAgICAgICAgICAgIHZhciBwb2ludGVyID0gZS50eXBlLmluZGV4T2YoXCJwb2ludGVyXCIpID09PSAwO1xuICAgICAgICAgICAgdmFyIHggPSAwO1xuICAgICAgICAgICAgdmFyIHkgPSAwO1xuICAgICAgICAgICAgLy8gSUUxMCBpbXBsZW1lbnRlZCBwb2ludGVyIGV2ZW50cyB3aXRoIGEgcHJlZml4O1xuICAgICAgICAgICAgaWYgKGUudHlwZS5pbmRleE9mKFwiTVNQb2ludGVyXCIpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcG9pbnRlciA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBFcnJvbmVvdXMgZXZlbnRzIHNlZW0gdG8gYmUgcGFzc2VkIGluIG9jY2FzaW9uYWxseSBvbiBpT1MvaVBhZE9TIGFmdGVyIHVzZXIgZmluaXNoZXMgaW50ZXJhY3Rpbmcgd2l0aFxuICAgICAgICAgICAgLy8gdGhlIHNsaWRlci4gVGhleSBhcHBlYXIgdG8gYmUgb2YgdHlwZSBNb3VzZUV2ZW50LCB5ZXQgdGhleSBkb24ndCBoYXZlIHVzdWFsIHByb3BlcnRpZXMgc2V0LiBJZ25vcmVcbiAgICAgICAgICAgIC8vIGV2ZW50cyB0aGF0IGhhdmUgbm8gdG91Y2hlcyBvciBidXR0b25zIGFzc29jaWF0ZWQgd2l0aCB0aGVtLiAoIzEwNTcsICMxMDc5LCAjMTA5NSlcbiAgICAgICAgICAgIGlmIChlLnR5cGUgPT09IFwibW91c2Vkb3duXCIgJiYgIWUuYnV0dG9ucyAmJiAhZS50b3VjaGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhlIG9ubHkgdGhpbmcgb25lIGhhbmRsZSBzaG91bGQgYmUgY29uY2VybmVkIGFib3V0IGlzIHRoZSB0b3VjaGVzIHRoYXQgb3JpZ2luYXRlZCBvbiB0b3Agb2YgaXQuXG4gICAgICAgICAgICBpZiAodG91Y2gpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXR1cm5zIHRydWUgaWYgYSB0b3VjaCBvcmlnaW5hdGVkIG9uIHRoZSB0YXJnZXQuXG4gICAgICAgICAgICAgICAgdmFyIGlzVG91Y2hPblRhcmdldCA9IGZ1bmN0aW9uIChjaGVja1RvdWNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBjaGVja1RvdWNoLnRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0YXJnZXQgPT09IGV2ZW50VGFyZ2V0IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudFRhcmdldC5jb250YWlucyh0YXJnZXQpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoZS5jb21wb3NlZCAmJiBlLmNvbXBvc2VkUGF0aCgpLnNoaWZ0KCkgPT09IGV2ZW50VGFyZ2V0KSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvLyBJbiB0aGUgY2FzZSBvZiB0b3VjaHN0YXJ0IGV2ZW50cywgd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhlcmUgaXMgc3RpbGwgbm8gbW9yZSB0aGFuIG9uZVxuICAgICAgICAgICAgICAgIC8vIHRvdWNoIG9uIHRoZSB0YXJnZXQgc28gd2UgbG9vayBhbW9uZ3N0IGFsbCB0b3VjaGVzLlxuICAgICAgICAgICAgICAgIGlmIChlLnR5cGUgPT09IFwidG91Y2hzdGFydFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRUb3VjaGVzID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGUudG91Y2hlcywgaXNUb3VjaE9uVGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90IHN1cHBvcnQgbW9yZSB0aGFuIG9uZSB0b3VjaCBwZXIgaGFuZGxlLlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0VG91Y2hlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgeCA9IHRhcmdldFRvdWNoZXNbMF0ucGFnZVg7XG4gICAgICAgICAgICAgICAgICAgIHkgPSB0YXJnZXRUb3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW4gdGhlIG90aGVyIGNhc2VzLCBmaW5kIG9uIGNoYW5nZWRUb3VjaGVzIGlzIGVub3VnaC5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldFRvdWNoID0gQXJyYXkucHJvdG90eXBlLmZpbmQuY2FsbChlLmNoYW5nZWRUb3VjaGVzLCBpc1RvdWNoT25UYXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICAvLyBDYW5jZWwgaWYgdGhlIHRhcmdldCB0b3VjaCBoYXMgbm90IG1vdmVkLlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRhcmdldFRvdWNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgeCA9IHRhcmdldFRvdWNoLnBhZ2VYO1xuICAgICAgICAgICAgICAgICAgICB5ID0gdGFyZ2V0VG91Y2gucGFnZVk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFnZU9mZnNldCA9IHBhZ2VPZmZzZXQgfHwgZ2V0UGFnZU9mZnNldChzY29wZV9Eb2N1bWVudCk7XG4gICAgICAgICAgICBpZiAobW91c2UgfHwgcG9pbnRlcikge1xuICAgICAgICAgICAgICAgIHggPSBlLmNsaWVudFggKyBwYWdlT2Zmc2V0Lng7XG4gICAgICAgICAgICAgICAgeSA9IGUuY2xpZW50WSArIHBhZ2VPZmZzZXQueTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGUucGFnZU9mZnNldCA9IHBhZ2VPZmZzZXQ7XG4gICAgICAgICAgICBlLnBvaW50cyA9IFt4LCB5XTtcbiAgICAgICAgICAgIGUuY3Vyc29yID0gbW91c2UgfHwgcG9pbnRlcjsgLy8gRml4ICM0MzVcbiAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRyYW5zbGF0ZSBhIGNvb3JkaW5hdGUgaW4gdGhlIGRvY3VtZW50IHRvIGEgcGVyY2VudGFnZSBvbiB0aGUgc2xpZGVyXG4gICAgICAgIGZ1bmN0aW9uIGNhbGNQb2ludFRvUGVyY2VudGFnZShjYWxjUG9pbnQpIHtcbiAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IGNhbGNQb2ludCAtIG9mZnNldChzY29wZV9CYXNlLCBvcHRpb25zLm9ydCk7XG4gICAgICAgICAgICB2YXIgcHJvcG9zYWwgPSAobG9jYXRpb24gKiAxMDApIC8gYmFzZVNpemUoKTtcbiAgICAgICAgICAgIC8vIENsYW1wIHByb3Bvc2FsIGJldHdlZW4gMCUgYW5kIDEwMCVcbiAgICAgICAgICAgIC8vIE91dC1vZi1ib3VuZCBjb29yZGluYXRlcyBtYXkgb2NjdXIgd2hlbiAubm9VaS1iYXNlIHBzZXVkby1lbGVtZW50c1xuICAgICAgICAgICAgLy8gYXJlIHVzZWQgKGUuZy4gY29udGFpbmVkIGhhbmRsZXMgZmVhdHVyZSlcbiAgICAgICAgICAgIHByb3Bvc2FsID0gbGltaXQocHJvcG9zYWwpO1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZGlyID8gMTAwIC0gcHJvcG9zYWwgOiBwcm9wb3NhbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBGaW5kIGhhbmRsZSBjbG9zZXN0IHRvIGEgY2VydGFpbiBwZXJjZW50YWdlIG9uIHRoZSBzbGlkZXJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Q2xvc2VzdEhhbmRsZShjbGlja2VkUG9zaXRpb24pIHtcbiAgICAgICAgICAgIHZhciBzbWFsbGVzdERpZmZlcmVuY2UgPSAxMDA7XG4gICAgICAgICAgICB2YXIgaGFuZGxlTnVtYmVyID0gZmFsc2U7XG4gICAgICAgICAgICBzY29wZV9IYW5kbGVzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAvLyBEaXNhYmxlZCBoYW5kbGVzIGFyZSBpZ25vcmVkXG4gICAgICAgICAgICAgICAgaWYgKGlzSGFuZGxlRGlzYWJsZWQoaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGhhbmRsZVBvc2l0aW9uID0gc2NvcGVfTG9jYXRpb25zW2luZGV4XTtcbiAgICAgICAgICAgICAgICB2YXIgZGlmZmVyZW5jZVdpdGhUaGlzSGFuZGxlID0gTWF0aC5hYnMoaGFuZGxlUG9zaXRpb24gLSBjbGlja2VkUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIC8vIEluaXRpYWwgc3RhdGVcbiAgICAgICAgICAgICAgICB2YXIgY2xpY2tBdEVkZ2UgPSBkaWZmZXJlbmNlV2l0aFRoaXNIYW5kbGUgPT09IDEwMCAmJiBzbWFsbGVzdERpZmZlcmVuY2UgPT09IDEwMDtcbiAgICAgICAgICAgICAgICAvLyBEaWZmZXJlbmNlIHdpdGggdGhpcyBoYW5kbGUgaXMgc21hbGxlciB0aGFuIHRoZSBwcmV2aW91c2x5IGNoZWNrZWQgaGFuZGxlXG4gICAgICAgICAgICAgICAgdmFyIGlzQ2xvc2VyID0gZGlmZmVyZW5jZVdpdGhUaGlzSGFuZGxlIDwgc21hbGxlc3REaWZmZXJlbmNlO1xuICAgICAgICAgICAgICAgIHZhciBpc0Nsb3NlckFmdGVyID0gZGlmZmVyZW5jZVdpdGhUaGlzSGFuZGxlIDw9IHNtYWxsZXN0RGlmZmVyZW5jZSAmJiBjbGlja2VkUG9zaXRpb24gPiBoYW5kbGVQb3NpdGlvbjtcbiAgICAgICAgICAgICAgICBpZiAoaXNDbG9zZXIgfHwgaXNDbG9zZXJBZnRlciB8fCBjbGlja0F0RWRnZSkge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXIgPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgc21hbGxlc3REaWZmZXJlbmNlID0gZGlmZmVyZW5jZVdpdGhUaGlzSGFuZGxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZU51bWJlcjtcbiAgICAgICAgfVxuICAgICAgICAvLyBGaXJlICdlbmQnIHdoZW4gYSBtb3VzZSBvciBwZW4gbGVhdmVzIHRoZSBkb2N1bWVudC5cbiAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRMZWF2ZShldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09IFwibW91c2VvdXRcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC5ub2RlTmFtZSA9PT0gXCJIVE1MXCIgJiZcbiAgICAgICAgICAgICAgICBldmVudC5yZWxhdGVkVGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRFbmQoZXZlbnQsIGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEhhbmRsZSBtb3ZlbWVudCBvbiBkb2N1bWVudCBmb3IgaGFuZGxlIGFuZCByYW5nZSBkcmFnLlxuICAgICAgICBmdW5jdGlvbiBldmVudE1vdmUoZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgICAgIC8vIEZpeCAjNDk4XG4gICAgICAgICAgICAvLyBDaGVjayB2YWx1ZSBvZiAuYnV0dG9ucyBpbiAnc3RhcnQnIHRvIHdvcmsgYXJvdW5kIGEgYnVnIGluIElFMTAgbW9iaWxlIChkYXRhLmJ1dHRvbnNQcm9wZXJ0eSkuXG4gICAgICAgICAgICAvLyBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzkyNzAwNS9tb2JpbGUtaWUxMC13aW5kb3dzLXBob25lLWJ1dHRvbnMtcHJvcGVydHktb2YtcG9pbnRlcm1vdmUtZXZlbnQtYWx3YXlzLXplcm9cbiAgICAgICAgICAgIC8vIElFOSBoYXMgLmJ1dHRvbnMgYW5kIC53aGljaCB6ZXJvIG9uIG1vdXNlbW92ZS5cbiAgICAgICAgICAgIC8vIEZpcmVmb3ggYnJlYWtzIHRoZSBzcGVjIE1ETiBkZWZpbmVzLlxuICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5hcHBWZXJzaW9uLmluZGV4T2YoXCJNU0lFIDlcIikgPT09IC0xICYmIGV2ZW50LmJ1dHRvbnMgPT09IDAgJiYgZGF0YS5idXR0b25zUHJvcGVydHkgIT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnRFbmQoZXZlbnQsIGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UgYXJlIG1vdmluZyB1cCBvciBkb3duXG4gICAgICAgICAgICB2YXIgbW92ZW1lbnQgPSAob3B0aW9ucy5kaXIgPyAtMSA6IDEpICogKGV2ZW50LmNhbGNQb2ludCAtIGRhdGEuc3RhcnRDYWxjUG9pbnQpO1xuICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgbW92ZW1lbnQgaW50byBhIHBlcmNlbnRhZ2Ugb2YgdGhlIHNsaWRlciB3aWR0aC9oZWlnaHRcbiAgICAgICAgICAgIHZhciBwcm9wb3NhbCA9IChtb3ZlbWVudCAqIDEwMCkgLyBkYXRhLmJhc2VTaXplO1xuICAgICAgICAgICAgbW92ZUhhbmRsZXMobW92ZW1lbnQgPiAwLCBwcm9wb3NhbCwgZGF0YS5sb2NhdGlvbnMsIGRhdGEuaGFuZGxlTnVtYmVycywgZGF0YS5jb25uZWN0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBVbmJpbmQgbW92ZSBldmVudHMgb24gZG9jdW1lbnQsIGNhbGwgY2FsbGJhY2tzLlxuICAgICAgICBmdW5jdGlvbiBldmVudEVuZChldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgLy8gVGhlIGhhbmRsZSBpcyBubyBsb25nZXIgYWN0aXZlLCBzbyByZW1vdmUgdGhlIGNsYXNzLlxuICAgICAgICAgICAgaWYgKGRhdGEuaGFuZGxlKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZGF0YS5oYW5kbGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5hY3RpdmUpO1xuICAgICAgICAgICAgICAgIHNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCAtPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVW5iaW5kIHRoZSBtb3ZlIGFuZCBlbmQgZXZlbnRzLCB3aGljaCBhcmUgYWRkZWQgb24gJ3N0YXJ0Jy5cbiAgICAgICAgICAgIGRhdGEubGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9Eb2N1bWVudEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihjWzBdLCBjWzFdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBkcmFnZ2luZyBjbGFzcy5cbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhzY29wZV9UYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5kcmFnKTtcbiAgICAgICAgICAgICAgICBzZXRaaW5kZXgoKTtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgY3Vyc29yIHN0eWxlcyBhbmQgdGV4dC1zZWxlY3Rpb24gZXZlbnRzIGJvdW5kIHRvIHRoZSBib2R5LlxuICAgICAgICAgICAgICAgIGlmIChldmVudC5jdXJzb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVfQm9keS5zdHlsZS5jdXJzb3IgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBzY29wZV9Cb2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzZWxlY3RzdGFydFwiLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YS5oYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcImNoYW5nZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInNldFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcImVuZFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQmluZCBtb3ZlIGV2ZW50cyBvbiBkb2N1bWVudC5cbiAgICAgICAgZnVuY3Rpb24gZXZlbnRTdGFydChldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgLy8gSWdub3JlIGV2ZW50IGlmIGFueSBoYW5kbGUgaXMgZGlzYWJsZWRcbiAgICAgICAgICAgIGlmIChkYXRhLmhhbmRsZU51bWJlcnMuc29tZShpc0hhbmRsZURpc2FibGVkKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBoYW5kbGU7XG4gICAgICAgICAgICBpZiAoZGF0YS5oYW5kbGVOdW1iZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHZhciBoYW5kbGVPcmlnaW4gPSBzY29wZV9IYW5kbGVzW2RhdGEuaGFuZGxlTnVtYmVyc1swXV07XG4gICAgICAgICAgICAgICAgaGFuZGxlID0gaGFuZGxlT3JpZ2luLmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgICAgIHNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCArPSAxO1xuICAgICAgICAgICAgICAgIC8vIE1hcmsgdGhlIGhhbmRsZSBhcyAnYWN0aXZlJyBzbyBpdCBjYW4gYmUgc3R5bGVkLlxuICAgICAgICAgICAgICAgIGFkZENsYXNzKGhhbmRsZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmFjdGl2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBIGRyYWcgc2hvdWxkIG5ldmVyIHByb3BhZ2F0ZSB1cCB0byB0aGUgJ3RhcCcgZXZlbnQuXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIC8vIFJlY29yZCB0aGUgZXZlbnQgbGlzdGVuZXJzLlxuICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IFtdO1xuICAgICAgICAgICAgLy8gQXR0YWNoIHRoZSBtb3ZlIGFuZCBlbmQgZXZlbnRzLlxuICAgICAgICAgICAgdmFyIG1vdmVFdmVudCA9IGF0dGFjaEV2ZW50KGFjdGlvbnMubW92ZSwgc2NvcGVfRG9jdW1lbnRFbGVtZW50LCBldmVudE1vdmUsIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgZXZlbnQgdGFyZ2V0IGhhcyBjaGFuZ2VkIHNvIHdlIG5lZWQgdG8gcHJvcGFnYXRlIHRoZSBvcmlnaW5hbCBvbmUgc28gdGhhdCB3ZSBrZWVwXG4gICAgICAgICAgICAgICAgLy8gcmVseWluZyBvbiBpdCB0byBleHRyYWN0IHRhcmdldCB0b3VjaGVzLlxuICAgICAgICAgICAgICAgIHRhcmdldDogZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgICAgIGhhbmRsZTogaGFuZGxlLFxuICAgICAgICAgICAgICAgIGNvbm5lY3Q6IGRhdGEuY29ubmVjdCxcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnM6IGxpc3RlbmVycyxcbiAgICAgICAgICAgICAgICBzdGFydENhbGNQb2ludDogZXZlbnQuY2FsY1BvaW50LFxuICAgICAgICAgICAgICAgIGJhc2VTaXplOiBiYXNlU2l6ZSgpLFxuICAgICAgICAgICAgICAgIHBhZ2VPZmZzZXQ6IGV2ZW50LnBhZ2VPZmZzZXQsXG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogZGF0YS5oYW5kbGVOdW1iZXJzLFxuICAgICAgICAgICAgICAgIGJ1dHRvbnNQcm9wZXJ0eTogZXZlbnQuYnV0dG9ucyxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbnM6IHNjb3BlX0xvY2F0aW9ucy5zbGljZSgpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBlbmRFdmVudCA9IGF0dGFjaEV2ZW50KGFjdGlvbnMuZW5kLCBzY29wZV9Eb2N1bWVudEVsZW1lbnQsIGV2ZW50RW5kLCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBldmVudC50YXJnZXQsXG4gICAgICAgICAgICAgICAgaGFuZGxlOiBoYW5kbGUsXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsXG4gICAgICAgICAgICAgICAgZG9Ob3RSZWplY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogZGF0YS5oYW5kbGVOdW1iZXJzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBvdXRFdmVudCA9IGF0dGFjaEV2ZW50KFwibW91c2VvdXRcIiwgc2NvcGVfRG9jdW1lbnRFbGVtZW50LCBkb2N1bWVudExlYXZlLCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBldmVudC50YXJnZXQsXG4gICAgICAgICAgICAgICAgaGFuZGxlOiBoYW5kbGUsXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsXG4gICAgICAgICAgICAgICAgZG9Ob3RSZWplY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogZGF0YS5oYW5kbGVOdW1iZXJzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIHB1c2hlZCB0aGUgbGlzdGVuZXJzIGluIHRoZSBsaXN0ZW5lciBsaXN0IHJhdGhlciB0aGFuIGNyZWF0aW5nXG4gICAgICAgICAgICAvLyBhIG5ldyBvbmUgYXMgaXQgaGFzIGFscmVhZHkgYmVlbiBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXJzLlxuICAgICAgICAgICAgbGlzdGVuZXJzLnB1c2guYXBwbHkobGlzdGVuZXJzLCBtb3ZlRXZlbnQuY29uY2F0KGVuZEV2ZW50LCBvdXRFdmVudCkpO1xuICAgICAgICAgICAgLy8gVGV4dCBzZWxlY3Rpb24gaXNuJ3QgYW4gaXNzdWUgb24gdG91Y2ggZGV2aWNlcyxcbiAgICAgICAgICAgIC8vIHNvIGFkZGluZyBjdXJzb3Igc3R5bGVzIGNhbiBiZSBza2lwcGVkLlxuICAgICAgICAgICAgaWYgKGV2ZW50LmN1cnNvcikge1xuICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgdGhlICdJJyBjdXJzb3IgYW5kIGV4dGVuZCB0aGUgcmFuZ2UtZHJhZyBjdXJzb3IuXG4gICAgICAgICAgICAgICAgc2NvcGVfQm9keS5zdHlsZS5jdXJzb3IgPSBnZXRDb21wdXRlZFN0eWxlKGV2ZW50LnRhcmdldCkuY3Vyc29yO1xuICAgICAgICAgICAgICAgIC8vIE1hcmsgdGhlIHRhcmdldCB3aXRoIGEgZHJhZ2dpbmcgc3RhdGUuXG4gICAgICAgICAgICAgICAgaWYgKHNjb3BlX0hhbmRsZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhzY29wZV9UYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5kcmFnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUHJldmVudCB0ZXh0IHNlbGVjdGlvbiB3aGVuIGRyYWdnaW5nIHRoZSBoYW5kbGVzLlxuICAgICAgICAgICAgICAgIC8vIEluIG5vVWlTbGlkZXIgPD0gOS4yLjAsIHRoaXMgd2FzIGhhbmRsZWQgYnkgY2FsbGluZyBwcmV2ZW50RGVmYXVsdCBvbiBtb3VzZS90b3VjaCBzdGFydC9tb3ZlLFxuICAgICAgICAgICAgICAgIC8vIHdoaWNoIGlzIHNjcm9sbCBibG9ja2luZy4gVGhlIHNlbGVjdHN0YXJ0IGV2ZW50IGlzIHN1cHBvcnRlZCBieSBGaXJlRm94IHN0YXJ0aW5nIGZyb20gdmVyc2lvbiA1MixcbiAgICAgICAgICAgICAgICAvLyBtZWFuaW5nIHRoZSBvbmx5IGhvbGRvdXQgaXMgaU9TIFNhZmFyaS4gVGhpcyBkb2Vzbid0IG1hdHRlcjogdGV4dCBzZWxlY3Rpb24gaXNuJ3QgdHJpZ2dlcmVkIHRoZXJlLlxuICAgICAgICAgICAgICAgIC8vIFRoZSAnY3Vyc29yJyBmbGFnIGlzIGZhbHNlLlxuICAgICAgICAgICAgICAgIC8vIFNlZTogaHR0cDovL2Nhbml1c2UuY29tLyNzZWFyY2g9c2VsZWN0c3RhcnRcbiAgICAgICAgICAgICAgICBzY29wZV9Cb2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJzZWxlY3RzdGFydFwiLCBwcmV2ZW50RGVmYXVsdCwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YS5oYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInN0YXJ0XCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBNb3ZlIGNsb3Nlc3QgaGFuZGxlIHRvIHRhcHBlZCBsb2NhdGlvbi5cbiAgICAgICAgZnVuY3Rpb24gZXZlbnRUYXAoZXZlbnQpIHtcbiAgICAgICAgICAgIC8vIFRoZSB0YXAgZXZlbnQgc2hvdWxkbid0IHByb3BhZ2F0ZSB1cFxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB2YXIgcHJvcG9zYWwgPSBjYWxjUG9pbnRUb1BlcmNlbnRhZ2UoZXZlbnQuY2FsY1BvaW50KTtcbiAgICAgICAgICAgIHZhciBoYW5kbGVOdW1iZXIgPSBnZXRDbG9zZXN0SGFuZGxlKHByb3Bvc2FsKTtcbiAgICAgICAgICAgIC8vIFRhY2tsZSB0aGUgY2FzZSB0aGF0IGFsbCBoYW5kbGVzIGFyZSAnZGlzYWJsZWQnLlxuICAgICAgICAgICAgaWYgKGhhbmRsZU51bWJlciA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGbGFnIHRoZSBzbGlkZXIgYXMgaXQgaXMgbm93IGluIGEgdHJhbnNpdGlvbmFsIHN0YXRlLlxuICAgICAgICAgICAgLy8gVHJhbnNpdGlvbiB0YWtlcyBhIGNvbmZpZ3VyYWJsZSBhbW91bnQgb2YgbXMgKGRlZmF1bHQgMzAwKS4gUmUtZW5hYmxlIHRoZSBzbGlkZXIgYWZ0ZXIgdGhhdC5cbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5ldmVudHMuc25hcCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzRm9yKHNjb3BlX1RhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRhcCwgb3B0aW9ucy5hbmltYXRpb25EdXJhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCBwcm9wb3NhbCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICBzZXRaaW5kZXgoKTtcbiAgICAgICAgICAgIGZpcmVFdmVudChcInNsaWRlXCIsIGhhbmRsZU51bWJlciwgdHJ1ZSk7XG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaGFuZGxlTnVtYmVyLCB0cnVlKTtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5ldmVudHMuc25hcCkge1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcImNoYW5nZVwiLCBoYW5kbGVOdW1iZXIsIHRydWUpO1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInNldFwiLCBoYW5kbGVOdW1iZXIsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZXZlbnRTdGFydChldmVudCwgeyBoYW5kbGVOdW1iZXJzOiBbaGFuZGxlTnVtYmVyXSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBGaXJlcyBhICdob3ZlcicgZXZlbnQgZm9yIGEgaG92ZXJlZCBtb3VzZS9wZW4gcG9zaXRpb24uXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50SG92ZXIoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBwcm9wb3NhbCA9IGNhbGNQb2ludFRvUGVyY2VudGFnZShldmVudC5jYWxjUG9pbnQpO1xuICAgICAgICAgICAgdmFyIHRvID0gc2NvcGVfU3BlY3RydW0uZ2V0U3RlcChwcm9wb3NhbCk7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcodG8pO1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoc2NvcGVfRXZlbnRzKS5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXRFdmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChcImhvdmVyXCIgPT09IHRhcmdldEV2ZW50LnNwbGl0KFwiLlwiKVswXSkge1xuICAgICAgICAgICAgICAgICAgICBzY29wZV9FdmVudHNbdGFyZ2V0RXZlbnRdLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKHNjb3BlX1NlbGYsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGFuZGxlcyBrZXlkb3duIG9uIGZvY3VzZWQgaGFuZGxlc1xuICAgICAgICAvLyBEb24ndCBtb3ZlIHRoZSBkb2N1bWVudCB3aGVuIHByZXNzaW5nIGFycm93IGtleXMgb24gZm9jdXNlZCBoYW5kbGVzXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50S2V5ZG93bihldmVudCwgaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAoaXNTbGlkZXJEaXNhYmxlZCgpIHx8IGlzSGFuZGxlRGlzYWJsZWQoaGFuZGxlTnVtYmVyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBob3Jpem9udGFsS2V5cyA9IFtcIkxlZnRcIiwgXCJSaWdodFwiXTtcbiAgICAgICAgICAgIHZhciB2ZXJ0aWNhbEtleXMgPSBbXCJEb3duXCIsIFwiVXBcIl07XG4gICAgICAgICAgICB2YXIgbGFyZ2VTdGVwS2V5cyA9IFtcIlBhZ2VEb3duXCIsIFwiUGFnZVVwXCJdO1xuICAgICAgICAgICAgdmFyIGVkZ2VLZXlzID0gW1wiSG9tZVwiLCBcIkVuZFwiXTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmRpciAmJiAhb3B0aW9ucy5vcnQpIHtcbiAgICAgICAgICAgICAgICAvLyBPbiBhbiByaWdodC10by1sZWZ0IHNsaWRlciwgdGhlIGxlZnQgYW5kIHJpZ2h0IGtleXMgYWN0IGludmVydGVkXG4gICAgICAgICAgICAgICAgaG9yaXpvbnRhbEtleXMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAob3B0aW9ucy5vcnQgJiYgIW9wdGlvbnMuZGlyKSB7XG4gICAgICAgICAgICAgICAgLy8gT24gYSB0b3AtdG8tYm90dG9tIHNsaWRlciwgdGhlIHVwIGFuZCBkb3duIGtleXMgYWN0IGludmVydGVkXG4gICAgICAgICAgICAgICAgdmVydGljYWxLZXlzLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICBsYXJnZVN0ZXBLZXlzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFN0cmlwIFwiQXJyb3dcIiBmb3IgSUUgY29tcGF0aWJpbGl0eS4gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQva2V5XG4gICAgICAgICAgICB2YXIga2V5ID0gZXZlbnQua2V5LnJlcGxhY2UoXCJBcnJvd1wiLCBcIlwiKTtcbiAgICAgICAgICAgIHZhciBpc0xhcmdlRG93biA9IGtleSA9PT0gbGFyZ2VTdGVwS2V5c1swXTtcbiAgICAgICAgICAgIHZhciBpc0xhcmdlVXAgPSBrZXkgPT09IGxhcmdlU3RlcEtleXNbMV07XG4gICAgICAgICAgICB2YXIgaXNEb3duID0ga2V5ID09PSB2ZXJ0aWNhbEtleXNbMF0gfHwga2V5ID09PSBob3Jpem9udGFsS2V5c1swXSB8fCBpc0xhcmdlRG93bjtcbiAgICAgICAgICAgIHZhciBpc1VwID0ga2V5ID09PSB2ZXJ0aWNhbEtleXNbMV0gfHwga2V5ID09PSBob3Jpem9udGFsS2V5c1sxXSB8fCBpc0xhcmdlVXA7XG4gICAgICAgICAgICB2YXIgaXNNaW4gPSBrZXkgPT09IGVkZ2VLZXlzWzBdO1xuICAgICAgICAgICAgdmFyIGlzTWF4ID0ga2V5ID09PSBlZGdlS2V5c1sxXTtcbiAgICAgICAgICAgIGlmICghaXNEb3duICYmICFpc1VwICYmICFpc01pbiAmJiAhaXNNYXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB2YXIgdG87XG4gICAgICAgICAgICBpZiAoaXNVcCB8fCBpc0Rvd24pIHtcbiAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gaXNEb3duID8gMCA6IDE7XG4gICAgICAgICAgICAgICAgdmFyIHN0ZXBzID0gZ2V0TmV4dFN0ZXBzRm9ySGFuZGxlKGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgdmFyIHN0ZXAgPSBzdGVwc1tkaXJlY3Rpb25dO1xuICAgICAgICAgICAgICAgIC8vIEF0IHRoZSBlZGdlIG9mIGEgc2xpZGVyLCBkbyBub3RoaW5nXG4gICAgICAgICAgICAgICAgaWYgKHN0ZXAgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBObyBzdGVwIHNldCwgdXNlIHRoZSBkZWZhdWx0IG9mIDEwJSBvZiB0aGUgc3ViLXJhbmdlXG4gICAgICAgICAgICAgICAgaWYgKHN0ZXAgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ZXAgPSBzY29wZV9TcGVjdHJ1bS5nZXREZWZhdWx0U3RlcChzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXSwgaXNEb3duLCBvcHRpb25zLmtleWJvYXJkRGVmYXVsdFN0ZXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNMYXJnZVVwIHx8IGlzTGFyZ2VEb3duKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ZXAgKj0gb3B0aW9ucy5rZXlib2FyZFBhZ2VNdWx0aXBsaWVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RlcCAqPSBvcHRpb25zLmtleWJvYXJkTXVsdGlwbGllcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gU3RlcCBvdmVyIHplcm8tbGVuZ3RoIHJhbmdlcyAoIzk0OCk7XG4gICAgICAgICAgICAgICAgc3RlcCA9IE1hdGgubWF4KHN0ZXAsIDAuMDAwMDAwMSk7XG4gICAgICAgICAgICAgICAgLy8gRGVjcmVtZW50IGZvciBkb3duIHN0ZXBzXG4gICAgICAgICAgICAgICAgc3RlcCA9IChpc0Rvd24gPyAtMSA6IDEpICogc3RlcDtcbiAgICAgICAgICAgICAgICB0byA9IHNjb3BlX1ZhbHVlc1toYW5kbGVOdW1iZXJdICsgc3RlcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzTWF4KSB7XG4gICAgICAgICAgICAgICAgLy8gRW5kIGtleVxuICAgICAgICAgICAgICAgIHRvID0gb3B0aW9ucy5zcGVjdHJ1bS54VmFsW29wdGlvbnMuc3BlY3RydW0ueFZhbC5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEhvbWUga2V5XG4gICAgICAgICAgICAgICAgdG8gPSBvcHRpb25zLnNwZWN0cnVtLnhWYWxbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCBzY29wZV9TcGVjdHJ1bS50b1N0ZXBwaW5nKHRvKSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJzbGlkZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgZmlyZUV2ZW50KFwidXBkYXRlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJjaGFuZ2VcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIGZpcmVFdmVudChcInNldFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEF0dGFjaCBldmVudHMgdG8gc2V2ZXJhbCBzbGlkZXIgcGFydHMuXG4gICAgICAgIGZ1bmN0aW9uIGJpbmRTbGlkZXJFdmVudHMoYmVoYXZpb3VyKSB7XG4gICAgICAgICAgICAvLyBBdHRhY2ggdGhlIHN0YW5kYXJkIGRyYWcgZXZlbnQgdG8gdGhlIGhhbmRsZXMuXG4gICAgICAgICAgICBpZiAoIWJlaGF2aW91ci5maXhlZCkge1xuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZXMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGVzZSBldmVudHMgYXJlIG9ubHkgYm91bmQgdG8gdGhlIHZpc3VhbCBoYW5kbGVcbiAgICAgICAgICAgICAgICAgICAgLy8gZWxlbWVudCwgbm90IHRoZSAncmVhbCcgb3JpZ2luIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICAgIGF0dGFjaEV2ZW50KGFjdGlvbnMuc3RhcnQsIGhhbmRsZS5jaGlsZHJlblswXSwgZXZlbnRTdGFydCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogW2luZGV4XVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEF0dGFjaCB0aGUgdGFwIGV2ZW50IHRvIHRoZSBzbGlkZXIgYmFzZS5cbiAgICAgICAgICAgIGlmIChiZWhhdmlvdXIudGFwKSB7XG4gICAgICAgICAgICAgICAgYXR0YWNoRXZlbnQoYWN0aW9ucy5zdGFydCwgc2NvcGVfQmFzZSwgZXZlbnRUYXAsIHt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZpcmUgaG92ZXIgZXZlbnRzXG4gICAgICAgICAgICBpZiAoYmVoYXZpb3VyLmhvdmVyKSB7XG4gICAgICAgICAgICAgICAgYXR0YWNoRXZlbnQoYWN0aW9ucy5tb3ZlLCBzY29wZV9CYXNlLCBldmVudEhvdmVyLCB7XG4gICAgICAgICAgICAgICAgICAgIGhvdmVyOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNYWtlIHRoZSByYW5nZSBkcmFnZ2FibGUuXG4gICAgICAgICAgICBpZiAoYmVoYXZpb3VyLmRyYWcpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9Db25uZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIChjb25uZWN0LCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29ubmVjdCA9PT0gZmFsc2UgfHwgaW5kZXggPT09IDAgfHwgaW5kZXggPT09IHNjb3BlX0Nvbm5lY3RzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlQmVmb3JlID0gc2NvcGVfSGFuZGxlc1tpbmRleCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlQWZ0ZXIgPSBzY29wZV9IYW5kbGVzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50SG9sZGVycyA9IFtjb25uZWN0XTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZXNUb0RyYWcgPSBbaGFuZGxlQmVmb3JlLCBoYW5kbGVBZnRlcl07XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVOdW1iZXJzVG9EcmFnID0gW2luZGV4IC0gMSwgaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhjb25uZWN0LCBvcHRpb25zLmNzc0NsYXNzZXMuZHJhZ2dhYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiB0aGUgcmFuZ2UgaXMgZml4ZWQsIHRoZSBlbnRpcmUgcmFuZ2UgY2FuXG4gICAgICAgICAgICAgICAgICAgIC8vIGJlIGRyYWdnZWQgYnkgdGhlIGhhbmRsZXMuIFRoZSBoYW5kbGUgaW4gdGhlIGZpcnN0XG4gICAgICAgICAgICAgICAgICAgIC8vIG9yaWdpbiB3aWxsIHByb3BhZ2F0ZSB0aGUgc3RhcnQgZXZlbnQgdXB3YXJkLFxuICAgICAgICAgICAgICAgICAgICAvLyBidXQgaXQgbmVlZHMgdG8gYmUgYm91bmQgbWFudWFsbHkgb24gdGhlIG90aGVyLlxuICAgICAgICAgICAgICAgICAgICBpZiAoYmVoYXZpb3VyLmZpeGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudEhvbGRlcnMucHVzaChoYW5kbGVCZWZvcmUuY2hpbGRyZW5bMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRIb2xkZXJzLnB1c2goaGFuZGxlQWZ0ZXIuY2hpbGRyZW5bMF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChiZWhhdmlvdXIuZHJhZ0FsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlc1RvRHJhZyA9IHNjb3BlX0hhbmRsZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzVG9EcmFnID0gc2NvcGVfSGFuZGxlTnVtYmVycztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBldmVudEhvbGRlcnMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRIb2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dGFjaEV2ZW50KGFjdGlvbnMuc3RhcnQsIGV2ZW50SG9sZGVyLCBldmVudFN0YXJ0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlczogaGFuZGxlc1RvRHJhZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzOiBoYW5kbGVOdW1iZXJzVG9EcmFnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Q6IGNvbm5lY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBBdHRhY2ggYW4gZXZlbnQgdG8gdGhpcyBzbGlkZXIsIHBvc3NpYmx5IGluY2x1ZGluZyBhIG5hbWVzcGFjZVxuICAgICAgICBmdW5jdGlvbiBiaW5kRXZlbnQobmFtZXNwYWNlZEV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgc2NvcGVfRXZlbnRzW25hbWVzcGFjZWRFdmVudF0gPSBzY29wZV9FdmVudHNbbmFtZXNwYWNlZEV2ZW50XSB8fCBbXTtcbiAgICAgICAgICAgIHNjb3BlX0V2ZW50c1tuYW1lc3BhY2VkRXZlbnRdLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgLy8gSWYgdGhlIGV2ZW50IGJvdW5kIGlzICd1cGRhdGUsJyBmaXJlIGl0IGltbWVkaWF0ZWx5IGZvciBhbGwgaGFuZGxlcy5cbiAgICAgICAgICAgIGlmIChuYW1lc3BhY2VkRXZlbnQuc3BsaXQoXCIuXCIpWzBdID09PSBcInVwZGF0ZVwiKSB7XG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlcy5mb3JFYWNoKGZ1bmN0aW9uIChhLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaW5kZXgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzSW50ZXJuYWxOYW1lc3BhY2UobmFtZXNwYWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmFtZXNwYWNlID09PSBJTlRFUk5BTF9FVkVOVF9OUy5hcmlhIHx8IG5hbWVzcGFjZSA9PT0gSU5URVJOQUxfRVZFTlRfTlMudG9vbHRpcHM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVW5kbyBhdHRhY2htZW50IG9mIGV2ZW50XG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZUV2ZW50KG5hbWVzcGFjZWRFdmVudCkge1xuICAgICAgICAgICAgdmFyIGV2ZW50ID0gbmFtZXNwYWNlZEV2ZW50ICYmIG5hbWVzcGFjZWRFdmVudC5zcGxpdChcIi5cIilbMF07XG4gICAgICAgICAgICB2YXIgbmFtZXNwYWNlID0gZXZlbnQgPyBuYW1lc3BhY2VkRXZlbnQuc3Vic3RyaW5nKGV2ZW50Lmxlbmd0aCkgOiBuYW1lc3BhY2VkRXZlbnQ7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzY29wZV9FdmVudHMpLmZvckVhY2goZnVuY3Rpb24gKGJpbmQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdEV2ZW50ID0gYmluZC5zcGxpdChcIi5cIilbMF07XG4gICAgICAgICAgICAgICAgdmFyIHROYW1lc3BhY2UgPSBiaW5kLnN1YnN0cmluZyh0RXZlbnQubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBpZiAoKCFldmVudCB8fCBldmVudCA9PT0gdEV2ZW50KSAmJiAoIW5hbWVzcGFjZSB8fCBuYW1lc3BhY2UgPT09IHROYW1lc3BhY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgZGVsZXRlIHByb3RlY3RlZCBpbnRlcm5hbCBldmVudCBpZiBpbnRlbnRpb25hbFxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzSW50ZXJuYWxOYW1lc3BhY2UodE5hbWVzcGFjZSkgfHwgbmFtZXNwYWNlID09PSB0TmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgc2NvcGVfRXZlbnRzW2JpbmRdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRXh0ZXJuYWwgZXZlbnQgaGFuZGxpbmdcbiAgICAgICAgZnVuY3Rpb24gZmlyZUV2ZW50KGV2ZW50TmFtZSwgaGFuZGxlTnVtYmVyLCB0YXApIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNjb3BlX0V2ZW50cykuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0RXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRUeXBlID0gdGFyZ2V0RXZlbnQuc3BsaXQoXCIuXCIpWzBdO1xuICAgICAgICAgICAgICAgIGlmIChldmVudE5hbWUgPT09IGV2ZW50VHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBzY29wZV9FdmVudHNbdGFyZ2V0RXZlbnRdLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHRoZSBzbGlkZXIgcHVibGljIEFQSSBhcyB0aGUgc2NvcGUgKCd0aGlzJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlX1NlbGYsIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJuIHZhbHVlcyBhcyBhcnJheSwgc28gYXJnXzFbYXJnXzJdIGlzIGFsd2F5cyB2YWxpZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlX1ZhbHVlcy5tYXAob3B0aW9ucy5mb3JtYXQudG8pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBpbmRleCwgMCBvciAxXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVW4tZm9ybWF0dGVkIHNsaWRlciB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlX1ZhbHVlcy5zbGljZSgpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV2ZW50IGlzIGZpcmVkIGJ5IHRhcCwgdHJ1ZSBvciBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGFwIHx8IGZhbHNlLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIExlZnQgb2Zmc2V0IG9mIHRoZSBoYW5kbGUsIGluIHJlbGF0aW9uIHRvIHRoZSBzbGlkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlX0xvY2F0aW9ucy5zbGljZSgpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCB0aGUgc2xpZGVyIHB1YmxpYyBBUEkgdG8gYW4gYWNjZXNzaWJsZSBwYXJhbWV0ZXIgd2hlbiB0aGlzIGlzIHVuYXZhaWxhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZV9TZWxmKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3BsaXQgb3V0IHRoZSBoYW5kbGUgcG9zaXRpb25pbmcgbG9naWMgc28gdGhlIE1vdmUgZXZlbnQgY2FuIHVzZSBpdCwgdG9vXG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrSGFuZGxlUG9zaXRpb24ocmVmZXJlbmNlLCBoYW5kbGVOdW1iZXIsIHRvLCBsb29rQmFja3dhcmQsIGxvb2tGb3J3YXJkLCBnZXRWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIGRpc3RhbmNlO1xuICAgICAgICAgICAgLy8gRm9yIHNsaWRlcnMgd2l0aCBtdWx0aXBsZSBoYW5kbGVzLCBsaW1pdCBtb3ZlbWVudCB0byB0aGUgb3RoZXIgaGFuZGxlLlxuICAgICAgICAgICAgLy8gQXBwbHkgdGhlIG1hcmdpbiBvcHRpb24gYnkgYWRkaW5nIGl0IHRvIHRoZSBoYW5kbGUgcG9zaXRpb25zLlxuICAgICAgICAgICAgaWYgKHNjb3BlX0hhbmRsZXMubGVuZ3RoID4gMSAmJiAhb3B0aW9ucy5ldmVudHMudW5jb25zdHJhaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChsb29rQmFja3dhcmQgJiYgaGFuZGxlTnVtYmVyID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IHNjb3BlX1NwZWN0cnVtLmdldEFic29sdXRlRGlzdGFuY2UocmVmZXJlbmNlW2hhbmRsZU51bWJlciAtIDFdLCBvcHRpb25zLm1hcmdpbiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWF4KHRvLCBkaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsb29rRm9yd2FyZCAmJiBoYW5kbGVOdW1iZXIgPCBzY29wZV9IYW5kbGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBzY29wZV9TcGVjdHJ1bS5nZXRBYnNvbHV0ZURpc3RhbmNlKHJlZmVyZW5jZVtoYW5kbGVOdW1iZXIgKyAxXSwgb3B0aW9ucy5tYXJnaW4sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWluKHRvLCBkaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhlIGxpbWl0IG9wdGlvbiBoYXMgdGhlIG9wcG9zaXRlIGVmZmVjdCwgbGltaXRpbmcgaGFuZGxlcyB0byBhXG4gICAgICAgICAgICAvLyBtYXhpbXVtIGRpc3RhbmNlIGZyb20gYW5vdGhlci4gTGltaXQgbXVzdCBiZSA+IDAsIGFzIG90aGVyd2lzZVxuICAgICAgICAgICAgLy8gaGFuZGxlcyB3b3VsZCBiZSB1bm1vdmFibGUuXG4gICAgICAgICAgICBpZiAoc2NvcGVfSGFuZGxlcy5sZW5ndGggPiAxICYmIG9wdGlvbnMubGltaXQpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9va0JhY2t3YXJkICYmIGhhbmRsZU51bWJlciA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBzY29wZV9TcGVjdHJ1bS5nZXRBYnNvbHV0ZURpc3RhbmNlKHJlZmVyZW5jZVtoYW5kbGVOdW1iZXIgLSAxXSwgb3B0aW9ucy5saW1pdCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWluKHRvLCBkaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsb29rRm9yd2FyZCAmJiBoYW5kbGVOdW1iZXIgPCBzY29wZV9IYW5kbGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBzY29wZV9TcGVjdHJ1bS5nZXRBYnNvbHV0ZURpc3RhbmNlKHJlZmVyZW5jZVtoYW5kbGVOdW1iZXIgKyAxXSwgb3B0aW9ucy5saW1pdCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5tYXgodG8sIGRpc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUaGUgcGFkZGluZyBvcHRpb24ga2VlcHMgdGhlIGhhbmRsZXMgYSBjZXJ0YWluIGRpc3RhbmNlIGZyb20gdGhlXG4gICAgICAgICAgICAvLyBlZGdlcyBvZiB0aGUgc2xpZGVyLiBQYWRkaW5nIG11c3QgYmUgPiAwLlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMucGFkZGluZykge1xuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVOdW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBzY29wZV9TcGVjdHJ1bS5nZXRBYnNvbHV0ZURpc3RhbmNlKDAsIG9wdGlvbnMucGFkZGluZ1swXSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWF4KHRvLCBkaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVOdW1iZXIgPT09IHNjb3BlX0hhbmRsZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IHNjb3BlX1NwZWN0cnVtLmdldEFic29sdXRlRGlzdGFuY2UoMTAwLCBvcHRpb25zLnBhZGRpbmdbMV0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWluKHRvLCBkaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG8gPSBzY29wZV9TcGVjdHJ1bS5nZXRTdGVwKHRvKTtcbiAgICAgICAgICAgIC8vIExpbWl0IHBlcmNlbnRhZ2UgdG8gdGhlIDAgLSAxMDAgcmFuZ2VcbiAgICAgICAgICAgIHRvID0gbGltaXQodG8pO1xuICAgICAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGlmIGhhbmRsZSBjYW4ndCBtb3ZlXG4gICAgICAgICAgICBpZiAodG8gPT09IHJlZmVyZW5jZVtoYW5kbGVOdW1iZXJdICYmICFnZXRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0bztcbiAgICAgICAgfVxuICAgICAgICAvLyBVc2VzIHNsaWRlciBvcmllbnRhdGlvbiB0byBjcmVhdGUgQ1NTIHJ1bGVzLiBhID0gYmFzZSB2YWx1ZTtcbiAgICAgICAgZnVuY3Rpb24gaW5SdWxlT3JkZXIodiwgYSkge1xuICAgICAgICAgICAgdmFyIG8gPSBvcHRpb25zLm9ydDtcbiAgICAgICAgICAgIHJldHVybiAobyA/IGEgOiB2KSArIFwiLCBcIiArIChvID8gdiA6IGEpO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1vdmVzIGhhbmRsZShzKSBieSBhIHBlcmNlbnRhZ2VcbiAgICAgICAgLy8gKGJvb2wsICUgdG8gbW92ZSwgWyUgd2hlcmUgaGFuZGxlIHN0YXJ0ZWQsIC4uLl0sIFtpbmRleCBpbiBzY29wZV9IYW5kbGVzLCAuLi5dKVxuICAgICAgICBmdW5jdGlvbiBtb3ZlSGFuZGxlcyh1cHdhcmQsIHByb3Bvc2FsLCBsb2NhdGlvbnMsIGhhbmRsZU51bWJlcnMsIGNvbm5lY3QpIHtcbiAgICAgICAgICAgIHZhciBwcm9wb3NhbHMgPSBsb2NhdGlvbnMuc2xpY2UoKTtcbiAgICAgICAgICAgIC8vIFN0b3JlIGZpcnN0IGhhbmRsZSBub3csIHNvIHdlIHN0aWxsIGhhdmUgaXQgaW4gY2FzZSBoYW5kbGVOdW1iZXJzIGlzIHJldmVyc2VkXG4gICAgICAgICAgICB2YXIgZmlyc3RIYW5kbGUgPSBoYW5kbGVOdW1iZXJzWzBdO1xuICAgICAgICAgICAgdmFyIGIgPSBbIXVwd2FyZCwgdXB3YXJkXTtcbiAgICAgICAgICAgIHZhciBmID0gW3Vwd2FyZCwgIXVwd2FyZF07XG4gICAgICAgICAgICAvLyBDb3B5IGhhbmRsZU51bWJlcnMgc28gd2UgZG9uJ3QgY2hhbmdlIHRoZSBkYXRhc2V0XG4gICAgICAgICAgICBoYW5kbGVOdW1iZXJzID0gaGFuZGxlTnVtYmVycy5zbGljZSgpO1xuICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIHdoaWNoIGhhbmRsZSBpcyAnbGVhZGluZycuXG4gICAgICAgICAgICAvLyBJZiB0aGF0IG9uZSBjYW4ndCBtb3ZlIHRoZSBzZWNvbmQgY2FuJ3QgZWl0aGVyLlxuICAgICAgICAgICAgaWYgKHVwd2FyZCkge1xuICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU3RlcCAxOiBnZXQgdGhlIG1heGltdW0gcGVyY2VudGFnZSB0aGF0IGFueSBvZiB0aGUgaGFuZGxlcyBjYW4gbW92ZVxuICAgICAgICAgICAgaWYgKGhhbmRsZU51bWJlcnMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlTnVtYmVyLCBvKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0byA9IGNoZWNrSGFuZGxlUG9zaXRpb24ocHJvcG9zYWxzLCBoYW5kbGVOdW1iZXIsIHByb3Bvc2Fsc1toYW5kbGVOdW1iZXJdICsgcHJvcG9zYWwsIGJbb10sIGZbb10sIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3RvcCBpZiBvbmUgb2YgdGhlIGhhbmRsZXMgY2FuJ3QgbW92ZS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zYWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zYWwgPSB0byAtIHByb3Bvc2Fsc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zYWxzW2hhbmRsZU51bWJlcl0gPSB0bztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgdXNpbmcgb25lIGhhbmRsZSwgY2hlY2sgYmFja3dhcmQgQU5EIGZvcndhcmRcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGIgPSBmID0gW3RydWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHN0YXRlID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBTdGVwIDI6IFRyeSB0byBzZXQgdGhlIGhhbmRsZXMgd2l0aCB0aGUgZm91bmQgcGVyY2VudGFnZVxuICAgICAgICAgICAgaGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVOdW1iZXIsIG8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIGxvY2F0aW9uc1toYW5kbGVOdW1iZXJdICsgcHJvcG9zYWwsIGJbb10sIGZbb10pIHx8IHN0YXRlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBTdGVwIDM6IElmIGEgaGFuZGxlIG1vdmVkLCBmaXJlIGV2ZW50c1xuICAgICAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwidXBkYXRlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInNsaWRlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGFyZ2V0IGlzIGEgY29ubmVjdCwgdGhlbiBmaXJlIGRyYWcgZXZlbnRcbiAgICAgICAgICAgICAgICBpZiAoY29ubmVjdCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwiZHJhZ1wiLCBmaXJzdEhhbmRsZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFRha2VzIGEgYmFzZSB2YWx1ZSBhbmQgYW4gb2Zmc2V0LiBUaGlzIG9mZnNldCBpcyB1c2VkIGZvciB0aGUgY29ubmVjdCBiYXIgc2l6ZS5cbiAgICAgICAgLy8gSW4gdGhlIGluaXRpYWwgZGVzaWduIGZvciB0aGlzIGZlYXR1cmUsIHRoZSBvcmlnaW4gZWxlbWVudCB3YXMgMSUgd2lkZS5cbiAgICAgICAgLy8gVW5mb3J0dW5hdGVseSwgYSByb3VuZGluZyBidWcgaW4gQ2hyb21lIG1ha2VzIGl0IGltcG9zc2libGUgdG8gaW1wbGVtZW50IHRoaXMgZmVhdHVyZVxuICAgICAgICAvLyBpbiB0aGlzIG1hbm5lcjogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Nzk4MjIzXG4gICAgICAgIGZ1bmN0aW9uIHRyYW5zZm9ybURpcmVjdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5kaXIgPyAxMDAgLSBhIC0gYiA6IGE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRlcyBzY29wZV9Mb2NhdGlvbnMgYW5kIHNjb3BlX1ZhbHVlcywgdXBkYXRlcyB2aXN1YWwgc3RhdGVcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlSGFuZGxlUG9zaXRpb24oaGFuZGxlTnVtYmVyLCB0bykge1xuICAgICAgICAgICAgLy8gVXBkYXRlIGxvY2F0aW9ucy5cbiAgICAgICAgICAgIHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdID0gdG87XG4gICAgICAgICAgICAvLyBDb252ZXJ0IHRoZSB2YWx1ZSB0byB0aGUgc2xpZGVyIHN0ZXBwaW5nL3JhbmdlLlxuICAgICAgICAgICAgc2NvcGVfVmFsdWVzW2hhbmRsZU51bWJlcl0gPSBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcodG8pO1xuICAgICAgICAgICAgdmFyIHRyYW5zbGF0aW9uID0gdHJhbnNmb3JtRGlyZWN0aW9uKHRvLCAwKSAtIHNjb3BlX0Rpck9mZnNldDtcbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGVSdWxlID0gXCJ0cmFuc2xhdGUoXCIgKyBpblJ1bGVPcmRlcih0cmFuc2xhdGlvbiArIFwiJVwiLCBcIjBcIikgKyBcIilcIjtcbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZXNbaGFuZGxlTnVtYmVyXS5zdHlsZVtvcHRpb25zLnRyYW5zZm9ybVJ1bGVdID0gdHJhbnNsYXRlUnVsZTtcbiAgICAgICAgICAgIHVwZGF0ZUNvbm5lY3QoaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIHVwZGF0ZUNvbm5lY3QoaGFuZGxlTnVtYmVyICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGFuZGxlcyBiZWZvcmUgdGhlIHNsaWRlciBtaWRkbGUgYXJlIHN0YWNrZWQgbGF0ZXIgPSBoaWdoZXIsXG4gICAgICAgIC8vIEhhbmRsZXMgYWZ0ZXIgdGhlIG1pZGRsZSBsYXRlciBpcyBsb3dlclxuICAgICAgICAvLyBbWzddIFs4XSAuLi4uLi4uLi4uIHwgLi4uLi4uLi4uLiBbNV0gWzRdXG4gICAgICAgIGZ1bmN0aW9uIHNldFppbmRleCgpIHtcbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpciA9IHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdID4gNTAgPyAtMSA6IDE7XG4gICAgICAgICAgICAgICAgdmFyIHpJbmRleCA9IDMgKyAoc2NvcGVfSGFuZGxlcy5sZW5ndGggKyBkaXIgKiBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZXNbaGFuZGxlTnVtYmVyXS5zdHlsZS56SW5kZXggPSBTdHJpbmcoekluZGV4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRlc3Qgc3VnZ2VzdGVkIHZhbHVlcyBhbmQgYXBwbHkgbWFyZ2luLCBzdGVwLlxuICAgICAgICAvLyBpZiBleGFjdElucHV0IGlzIHRydWUsIGRvbid0IHJ1biBjaGVja0hhbmRsZVBvc2l0aW9uLCB0aGVuIHRoZSBoYW5kbGUgY2FuIGJlIHBsYWNlZCBpbiBiZXR3ZWVuIHN0ZXBzICgjNDM2KVxuICAgICAgICBmdW5jdGlvbiBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCB0bywgbG9va0JhY2t3YXJkLCBsb29rRm9yd2FyZCwgZXhhY3RJbnB1dCkge1xuICAgICAgICAgICAgaWYgKCFleGFjdElucHV0KSB7XG4gICAgICAgICAgICAgICAgdG8gPSBjaGVja0hhbmRsZVBvc2l0aW9uKHNjb3BlX0xvY2F0aW9ucywgaGFuZGxlTnVtYmVyLCB0bywgbG9va0JhY2t3YXJkLCBsb29rRm9yd2FyZCwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRvID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZUhhbmRsZVBvc2l0aW9uKGhhbmRsZU51bWJlciwgdG8pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRlcyBzdHlsZSBhdHRyaWJ1dGUgZm9yIGNvbm5lY3Qgbm9kZXNcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlQ29ubmVjdChpbmRleCkge1xuICAgICAgICAgICAgLy8gU2tpcCBjb25uZWN0cyBzZXQgdG8gZmFsc2VcbiAgICAgICAgICAgIGlmICghc2NvcGVfQ29ubmVjdHNbaW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGwgPSAwO1xuICAgICAgICAgICAgdmFyIGggPSAxMDA7XG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IDApIHtcbiAgICAgICAgICAgICAgICBsID0gc2NvcGVfTG9jYXRpb25zW2luZGV4IC0gMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IHNjb3BlX0Nvbm5lY3RzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICBoID0gc2NvcGVfTG9jYXRpb25zW2luZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFdlIHVzZSB0d28gcnVsZXM6XG4gICAgICAgICAgICAvLyAndHJhbnNsYXRlJyB0byBjaGFuZ2UgdGhlIGxlZnQvdG9wIG9mZnNldDtcbiAgICAgICAgICAgIC8vICdzY2FsZScgdG8gY2hhbmdlIHRoZSB3aWR0aCBvZiB0aGUgZWxlbWVudDtcbiAgICAgICAgICAgIC8vIEFzIHRoZSBlbGVtZW50IGhhcyBhIHdpZHRoIG9mIDEwMCUsIGEgdHJhbnNsYXRpb24gb2YgMTAwJSBpcyBlcXVhbCB0byAxMDAlIG9mIHRoZSBwYXJlbnQgKC5ub1VpLWJhc2UpXG4gICAgICAgICAgICB2YXIgY29ubmVjdFdpZHRoID0gaCAtIGw7XG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRlUnVsZSA9IFwidHJhbnNsYXRlKFwiICsgaW5SdWxlT3JkZXIodHJhbnNmb3JtRGlyZWN0aW9uKGwsIGNvbm5lY3RXaWR0aCkgKyBcIiVcIiwgXCIwXCIpICsgXCIpXCI7XG4gICAgICAgICAgICB2YXIgc2NhbGVSdWxlID0gXCJzY2FsZShcIiArIGluUnVsZU9yZGVyKGNvbm5lY3RXaWR0aCAvIDEwMCwgXCIxXCIpICsgXCIpXCI7XG4gICAgICAgICAgICBzY29wZV9Db25uZWN0c1tpbmRleF0uc3R5bGVbb3B0aW9ucy50cmFuc2Zvcm1SdWxlXSA9XG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlUnVsZSArIFwiIFwiICsgc2NhbGVSdWxlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBhcnNlcyB2YWx1ZSBwYXNzZWQgdG8gLnNldCBtZXRob2QuIFJldHVybnMgY3VycmVudCB2YWx1ZSBpZiBub3QgcGFyc2UtYWJsZS5cbiAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZVRvVmFsdWUodG8sIGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgLy8gU2V0dGluZyB3aXRoIG51bGwgaW5kaWNhdGVzIGFuICdpZ25vcmUnLlxuICAgICAgICAgICAgLy8gSW5wdXR0aW5nICdmYWxzZScgaXMgaW52YWxpZC5cbiAgICAgICAgICAgIGlmICh0byA9PT0gbnVsbCB8fCB0byA9PT0gZmFsc2UgfHwgdG8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIGEgZm9ybWF0dGVkIG51bWJlciB3YXMgcGFzc2VkLCBhdHRlbXB0IHRvIGRlY29kZSBpdC5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICB0byA9IFN0cmluZyh0byk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0byA9IG9wdGlvbnMuZm9ybWF0LmZyb20odG8pO1xuICAgICAgICAgICAgaWYgKHRvICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRvID0gc2NvcGVfU3BlY3RydW0udG9TdGVwcGluZyh0byk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiBwYXJzaW5nIHRoZSBudW1iZXIgZmFpbGVkLCB1c2UgdGhlIGN1cnJlbnQgdmFsdWUuXG4gICAgICAgICAgICBpZiAodG8gPT09IGZhbHNlIHx8IGlzTmFOKHRvKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0bztcbiAgICAgICAgfVxuICAgICAgICAvLyBTZXQgdGhlIHNsaWRlciB2YWx1ZS5cbiAgICAgICAgZnVuY3Rpb24gdmFsdWVTZXQoaW5wdXQsIGZpcmVTZXRFdmVudCwgZXhhY3RJbnB1dCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IGFzQXJyYXkoaW5wdXQpO1xuICAgICAgICAgICAgdmFyIGlzSW5pdCA9IHNjb3BlX0xvY2F0aW9uc1swXSA9PT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgLy8gRXZlbnQgZmlyZXMgYnkgZGVmYXVsdFxuICAgICAgICAgICAgZmlyZVNldEV2ZW50ID0gZmlyZVNldEV2ZW50ID09PSB1bmRlZmluZWQgPyB0cnVlIDogZmlyZVNldEV2ZW50O1xuICAgICAgICAgICAgLy8gQW5pbWF0aW9uIGlzIG9wdGlvbmFsLlxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBpbml0aWFsIHZhbHVlcyB3ZXJlIHNldCBiZWZvcmUgdXNpbmcgYW5pbWF0ZWQgcGxhY2VtZW50LlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0ZSAmJiAhaXNJbml0KSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3NGb3Ioc2NvcGVfVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudGFwLCBvcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZpcnN0IHBhc3MsIHdpdGhvdXQgbG9va0FoZWFkIGJ1dCB3aXRoIGxvb2tCYWNrd2FyZC4gVmFsdWVzIGFyZSBzZXQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAgICAgICAgc2NvcGVfSGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCByZXNvbHZlVG9WYWx1ZSh2YWx1ZXNbaGFuZGxlTnVtYmVyXSwgaGFuZGxlTnVtYmVyKSwgdHJ1ZSwgZmFsc2UsIGV4YWN0SW5wdXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgaSA9IHNjb3BlX0hhbmRsZU51bWJlcnMubGVuZ3RoID09PSAxID8gMCA6IDE7XG4gICAgICAgICAgICAvLyBTcHJlYWQgaGFuZGxlcyBldmVubHkgYWNyb3NzIHRoZSBzbGlkZXIgaWYgdGhlIHJhbmdlIGhhcyBubyBzaXplIChtaW49bWF4KVxuICAgICAgICAgICAgaWYgKGlzSW5pdCAmJiBzY29wZV9TcGVjdHJ1bS5oYXNOb1NpemUoKSkge1xuICAgICAgICAgICAgICAgIGV4YWN0SW5wdXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHNjb3BlX0xvY2F0aW9uc1swXSA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKHNjb3BlX0hhbmRsZU51bWJlcnMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3BhY2VfMSA9IDEwMCAvIChzY29wZV9IYW5kbGVOdW1iZXJzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl0gPSBoYW5kbGVOdW1iZXIgKiBzcGFjZV8xO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTZWNvbmRhcnkgcGFzc2VzLiBOb3cgdGhhdCBhbGwgYmFzZSB2YWx1ZXMgYXJlIHNldCwgYXBwbHkgY29uc3RyYWludHMuXG4gICAgICAgICAgICAvLyBJdGVyYXRlIGFsbCBoYW5kbGVzIHRvIGVuc3VyZSBjb25zdHJhaW50cyBhcmUgYXBwbGllZCBmb3IgdGhlIGVudGlyZSBzbGlkZXIgKElzc3VlICMxMDA5KVxuICAgICAgICAgICAgZm9yICg7IGkgPCBzY29wZV9IYW5kbGVOdW1iZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl0sIHRydWUsIHRydWUsIGV4YWN0SW5wdXQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0WmluZGV4KCk7XG4gICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInVwZGF0ZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIC8vIEZpcmUgdGhlIGV2ZW50IG9ubHkgZm9yIGhhbmRsZXMgdGhhdCByZWNlaXZlZCBhIG5ldyB2YWx1ZSwgYXMgcGVyICM1NzlcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzW2hhbmRsZU51bWJlcl0gIT09IG51bGwgJiYgZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInNldFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlc2V0IHNsaWRlciB0byBpbml0aWFsIHZhbHVlc1xuICAgICAgICBmdW5jdGlvbiB2YWx1ZVJlc2V0KGZpcmVTZXRFdmVudCkge1xuICAgICAgICAgICAgdmFsdWVTZXQob3B0aW9ucy5zdGFydCwgZmlyZVNldEV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZXQgdmFsdWUgZm9yIGEgc2luZ2xlIGhhbmRsZVxuICAgICAgICBmdW5jdGlvbiB2YWx1ZVNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHZhbHVlLCBmaXJlU2V0RXZlbnQsIGV4YWN0SW5wdXQpIHtcbiAgICAgICAgICAgIC8vIEVuc3VyZSBudW1lcmljIGlucHV0XG4gICAgICAgICAgICBoYW5kbGVOdW1iZXIgPSBOdW1iZXIoaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIGlmICghKGhhbmRsZU51bWJlciA+PSAwICYmIGhhbmRsZU51bWJlciA8IHNjb3BlX0hhbmRsZU51bWJlcnMubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6IGludmFsaWQgaGFuZGxlIG51bWJlciwgZ290OiBcIiArIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBMb29rIGJvdGggYmFja3dhcmQgYW5kIGZvcndhcmQsIHNpbmNlIHdlIGRvbid0IHdhbnQgdGhpcyBoYW5kbGUgdG8gXCJwdXNoXCIgb3RoZXIgaGFuZGxlcyAoIzk2MCk7XG4gICAgICAgICAgICAvLyBUaGUgZXhhY3RJbnB1dCBhcmd1bWVudCBjYW4gYmUgdXNlZCB0byBpZ25vcmUgc2xpZGVyIHN0ZXBwaW5nICgjNDM2KVxuICAgICAgICAgICAgc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgcmVzb2x2ZVRvVmFsdWUodmFsdWUsIGhhbmRsZU51bWJlciksIHRydWUsIHRydWUsIGV4YWN0SW5wdXQpO1xuICAgICAgICAgICAgZmlyZUV2ZW50KFwidXBkYXRlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICBpZiAoZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwic2V0XCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gR2V0IHRoZSBzbGlkZXIgdmFsdWUuXG4gICAgICAgIGZ1bmN0aW9uIHZhbHVlR2V0KHVuZW5jb2RlZCkge1xuICAgICAgICAgICAgaWYgKHVuZW5jb2RlZCA9PT0gdm9pZCAwKSB7IHVuZW5jb2RlZCA9IGZhbHNlOyB9XG4gICAgICAgICAgICBpZiAodW5lbmNvZGVkKSB7XG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIGEgY29weSBvZiB0aGUgcmF3IHZhbHVlc1xuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9WYWx1ZXMubGVuZ3RoID09PSAxID8gc2NvcGVfVmFsdWVzWzBdIDogc2NvcGVfVmFsdWVzLnNsaWNlKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IHNjb3BlX1ZhbHVlcy5tYXAob3B0aW9ucy5mb3JtYXQudG8pO1xuICAgICAgICAgICAgLy8gSWYgb25seSBvbmUgaGFuZGxlIGlzIHVzZWQsIHJldHVybiBhIHNpbmdsZSB2YWx1ZS5cbiAgICAgICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlc1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVtb3ZlcyBjbGFzc2VzIGZyb20gdGhlIHJvb3QgYW5kIGVtcHRpZXMgaXQuXG4gICAgICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgcHJvdGVjdGVkIGludGVybmFsIGxpc3RlbmVyc1xuICAgICAgICAgICAgcmVtb3ZlRXZlbnQoSU5URVJOQUxfRVZFTlRfTlMuYXJpYSk7XG4gICAgICAgICAgICByZW1vdmVFdmVudChJTlRFUk5BTF9FVkVOVF9OUy50b29sdGlwcyk7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhvcHRpb25zLmNzc0NsYXNzZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHNjb3BlX1RhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzW2tleV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3aGlsZSAoc2NvcGVfVGFyZ2V0LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9UYXJnZXQucmVtb3ZlQ2hpbGQoc2NvcGVfVGFyZ2V0LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlIHNjb3BlX1RhcmdldC5ub1VpU2xpZGVyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldE5leHRTdGVwc0ZvckhhbmRsZShoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgdmFyIG5lYXJieVN0ZXBzID0gc2NvcGVfU3BlY3RydW0uZ2V0TmVhcmJ5U3RlcHMobG9jYXRpb24pO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gc2NvcGVfVmFsdWVzW2hhbmRsZU51bWJlcl07XG4gICAgICAgICAgICB2YXIgaW5jcmVtZW50ID0gbmVhcmJ5U3RlcHMudGhpc1N0ZXAuc3RlcDtcbiAgICAgICAgICAgIHZhciBkZWNyZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgLy8gSWYgc25hcHBlZCwgZGlyZWN0bHkgdXNlIGRlZmluZWQgc3RlcCB2YWx1ZVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc25hcCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlIC0gbmVhcmJ5U3RlcHMuc3RlcEJlZm9yZS5zdGFydFZhbHVlIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG5lYXJieVN0ZXBzLnN0ZXBBZnRlci5zdGFydFZhbHVlIC0gdmFsdWUgfHwgbnVsbFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiB0aGUgbmV4dCB2YWx1ZSBpbiB0aGlzIHN0ZXAgbW92ZXMgaW50byB0aGUgbmV4dCBzdGVwLFxuICAgICAgICAgICAgLy8gdGhlIGluY3JlbWVudCBpcyB0aGUgc3RhcnQgb2YgdGhlIG5leHQgc3RlcCAtIHRoZSBjdXJyZW50IHZhbHVlXG4gICAgICAgICAgICBpZiAoaW5jcmVtZW50ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSArIGluY3JlbWVudCA+IG5lYXJieVN0ZXBzLnN0ZXBBZnRlci5zdGFydFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluY3JlbWVudCA9IG5lYXJieVN0ZXBzLnN0ZXBBZnRlci5zdGFydFZhbHVlIC0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGlzIGJleW9uZCB0aGUgc3RhcnRpbmcgcG9pbnRcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+IG5lYXJieVN0ZXBzLnRoaXNTdGVwLnN0YXJ0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBkZWNyZW1lbnQgPSBuZWFyYnlTdGVwcy50aGlzU3RlcC5zdGVwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobmVhcmJ5U3RlcHMuc3RlcEJlZm9yZS5zdGVwID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGRlY3JlbWVudCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgYSBoYW5kbGUgaXMgYXQgdGhlIHN0YXJ0IG9mIGEgc3RlcCwgaXQgYWx3YXlzIHN0ZXBzIGJhY2sgaW50byB0aGUgcHJldmlvdXMgc3RlcCBmaXJzdFxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVjcmVtZW50ID0gdmFsdWUgLSBuZWFyYnlTdGVwcy5zdGVwQmVmb3JlLmhpZ2hlc3RTdGVwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTm93LCBpZiBhdCB0aGUgc2xpZGVyIGVkZ2VzLCB0aGVyZSBpcyBubyBpbi9kZWNyZW1lbnRcbiAgICAgICAgICAgIGlmIChsb2NhdGlvbiA9PT0gMTAwKSB7XG4gICAgICAgICAgICAgICAgaW5jcmVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGxvY2F0aW9uID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZGVjcmVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFzIHBlciAjMzkxLCB0aGUgY29tcGFyaXNvbiBmb3IgdGhlIGRlY3JlbWVudCBzdGVwIGNhbiBoYXZlIHNvbWUgcm91bmRpbmcgaXNzdWVzLlxuICAgICAgICAgICAgdmFyIHN0ZXBEZWNpbWFscyA9IHNjb3BlX1NwZWN0cnVtLmNvdW50U3RlcERlY2ltYWxzKCk7XG4gICAgICAgICAgICAvLyBSb3VuZCBwZXIgIzM5MVxuICAgICAgICAgICAgaWYgKGluY3JlbWVudCAhPT0gbnVsbCAmJiBpbmNyZW1lbnQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaW5jcmVtZW50ID0gTnVtYmVyKGluY3JlbWVudC50b0ZpeGVkKHN0ZXBEZWNpbWFscykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlY3JlbWVudCAhPT0gbnVsbCAmJiBkZWNyZW1lbnQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgZGVjcmVtZW50ID0gTnVtYmVyKGRlY3JlbWVudC50b0ZpeGVkKHN0ZXBEZWNpbWFscykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtkZWNyZW1lbnQsIGluY3JlbWVudF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHN0ZXAgc2l6ZSBmb3IgdGhlIHNsaWRlci5cbiAgICAgICAgZnVuY3Rpb24gZ2V0TmV4dFN0ZXBzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlX0hhbmRsZU51bWJlcnMubWFwKGdldE5leHRTdGVwc0ZvckhhbmRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRhYmxlOiBtYXJnaW4sIGxpbWl0LCBwYWRkaW5nLCBzdGVwLCByYW5nZSwgYW5pbWF0ZSwgc25hcFxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVPcHRpb25zKG9wdGlvbnNUb1VwZGF0ZSwgZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICAvLyBTcGVjdHJ1bSBpcyBjcmVhdGVkIHVzaW5nIHRoZSByYW5nZSwgc25hcCwgZGlyZWN0aW9uIGFuZCBzdGVwIG9wdGlvbnMuXG4gICAgICAgICAgICAvLyAnc25hcCcgYW5kICdzdGVwJyBjYW4gYmUgdXBkYXRlZC5cbiAgICAgICAgICAgIC8vIElmICdzbmFwJyBhbmQgJ3N0ZXAnIGFyZSBub3QgcGFzc2VkLCB0aGV5IHNob3VsZCByZW1haW4gdW5jaGFuZ2VkLlxuICAgICAgICAgICAgdmFyIHYgPSB2YWx1ZUdldCgpO1xuICAgICAgICAgICAgdmFyIHVwZGF0ZUFibGUgPSBbXG4gICAgICAgICAgICAgICAgXCJtYXJnaW5cIixcbiAgICAgICAgICAgICAgICBcImxpbWl0XCIsXG4gICAgICAgICAgICAgICAgXCJwYWRkaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJyYW5nZVwiLFxuICAgICAgICAgICAgICAgIFwiYW5pbWF0ZVwiLFxuICAgICAgICAgICAgICAgIFwic25hcFwiLFxuICAgICAgICAgICAgICAgIFwic3RlcFwiLFxuICAgICAgICAgICAgICAgIFwiZm9ybWF0XCIsXG4gICAgICAgICAgICAgICAgXCJwaXBzXCIsXG4gICAgICAgICAgICAgICAgXCJ0b29sdGlwc1wiXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgLy8gT25seSBjaGFuZ2Ugb3B0aW9ucyB0aGF0IHdlJ3JlIGFjdHVhbGx5IHBhc3NlZCB0byB1cGRhdGUuXG4gICAgICAgICAgICB1cGRhdGVBYmxlLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgdW5kZWZpbmVkLiBudWxsIHJlbW92ZXMgdGhlIHZhbHVlLlxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zVG9VcGRhdGVbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbE9wdGlvbnNbbmFtZV0gPSBvcHRpb25zVG9VcGRhdGVbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgbmV3T3B0aW9ucyA9IHRlc3RPcHRpb25zKG9yaWdpbmFsT3B0aW9ucyk7XG4gICAgICAgICAgICAvLyBMb2FkIG5ldyBvcHRpb25zIGludG8gdGhlIHNsaWRlciBzdGF0ZVxuICAgICAgICAgICAgdXBkYXRlQWJsZS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnNUb1VwZGF0ZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNbbmFtZV0gPSBuZXdPcHRpb25zW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2NvcGVfU3BlY3RydW0gPSBuZXdPcHRpb25zLnNwZWN0cnVtO1xuICAgICAgICAgICAgLy8gTGltaXQsIG1hcmdpbiBhbmQgcGFkZGluZyBkZXBlbmQgb24gdGhlIHNwZWN0cnVtIGJ1dCBhcmUgc3RvcmVkIG91dHNpZGUgb2YgaXQuICgjNjc3KVxuICAgICAgICAgICAgb3B0aW9ucy5tYXJnaW4gPSBuZXdPcHRpb25zLm1hcmdpbjtcbiAgICAgICAgICAgIG9wdGlvbnMubGltaXQgPSBuZXdPcHRpb25zLmxpbWl0O1xuICAgICAgICAgICAgb3B0aW9ucy5wYWRkaW5nID0gbmV3T3B0aW9ucy5wYWRkaW5nO1xuICAgICAgICAgICAgLy8gVXBkYXRlIHBpcHMsIHJlbW92ZXMgZXhpc3RpbmcuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5waXBzKSB7XG4gICAgICAgICAgICAgICAgcGlwcyhvcHRpb25zLnBpcHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlUGlwcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIHRvb2x0aXBzLCByZW1vdmVzIGV4aXN0aW5nLlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudG9vbHRpcHMpIHtcbiAgICAgICAgICAgICAgICB0b29sdGlwcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlVG9vbHRpcHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEludmFsaWRhdGUgdGhlIGN1cnJlbnQgcG9zaXRpb25pbmcgc28gdmFsdWVTZXQgZm9yY2VzIGFuIHVwZGF0ZS5cbiAgICAgICAgICAgIHNjb3BlX0xvY2F0aW9ucyA9IFtdO1xuICAgICAgICAgICAgdmFsdWVTZXQoaXNTZXQob3B0aW9uc1RvVXBkYXRlLnN0YXJ0KSA/IG9wdGlvbnNUb1VwZGF0ZS5zdGFydCA6IHYsIGZpcmVTZXRFdmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW5pdGlhbGl6YXRpb24gc3RlcHNcbiAgICAgICAgZnVuY3Rpb24gc2V0dXBTbGlkZXIoKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIGJhc2UgZWxlbWVudCwgaW5pdGlhbGl6ZSBIVE1MIGFuZCBzZXQgY2xhc3Nlcy5cbiAgICAgICAgICAgIC8vIEFkZCBoYW5kbGVzIGFuZCBjb25uZWN0IGVsZW1lbnRzLlxuICAgICAgICAgICAgc2NvcGVfQmFzZSA9IGFkZFNsaWRlcihzY29wZV9UYXJnZXQpO1xuICAgICAgICAgICAgYWRkRWxlbWVudHMob3B0aW9ucy5jb25uZWN0LCBzY29wZV9CYXNlKTtcbiAgICAgICAgICAgIC8vIEF0dGFjaCB1c2VyIGV2ZW50cy5cbiAgICAgICAgICAgIGJpbmRTbGlkZXJFdmVudHMob3B0aW9ucy5ldmVudHMpO1xuICAgICAgICAgICAgLy8gVXNlIHRoZSBwdWJsaWMgdmFsdWUgbWV0aG9kIHRvIHNldCB0aGUgc3RhcnQgdmFsdWVzLlxuICAgICAgICAgICAgdmFsdWVTZXQob3B0aW9ucy5zdGFydCk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5waXBzKSB7XG4gICAgICAgICAgICAgICAgcGlwcyhvcHRpb25zLnBpcHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudG9vbHRpcHMpIHtcbiAgICAgICAgICAgICAgICB0b29sdGlwcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXJpYSgpO1xuICAgICAgICB9XG4gICAgICAgIHNldHVwU2xpZGVyKCk7XG4gICAgICAgIHZhciBzY29wZV9TZWxmID0ge1xuICAgICAgICAgICAgZGVzdHJveTogZGVzdHJveSxcbiAgICAgICAgICAgIHN0ZXBzOiBnZXROZXh0U3RlcHMsXG4gICAgICAgICAgICBvbjogYmluZEV2ZW50LFxuICAgICAgICAgICAgb2ZmOiByZW1vdmVFdmVudCxcbiAgICAgICAgICAgIGdldDogdmFsdWVHZXQsXG4gICAgICAgICAgICBzZXQ6IHZhbHVlU2V0LFxuICAgICAgICAgICAgc2V0SGFuZGxlOiB2YWx1ZVNldEhhbmRsZSxcbiAgICAgICAgICAgIHJlc2V0OiB2YWx1ZVJlc2V0LFxuICAgICAgICAgICAgLy8gRXhwb3NlZCBmb3IgdW5pdCB0ZXN0aW5nLCBkb24ndCB1c2UgdGhpcyBpbiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgICAgICAgICAgX19tb3ZlSGFuZGxlczogZnVuY3Rpb24gKHVwd2FyZCwgcHJvcG9zYWwsIGhhbmRsZU51bWJlcnMpIHtcbiAgICAgICAgICAgICAgICBtb3ZlSGFuZGxlcyh1cHdhcmQsIHByb3Bvc2FsLCBzY29wZV9Mb2NhdGlvbnMsIGhhbmRsZU51bWJlcnMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9wdGlvbnM6IG9yaWdpbmFsT3B0aW9ucyxcbiAgICAgICAgICAgIHVwZGF0ZU9wdGlvbnM6IHVwZGF0ZU9wdGlvbnMsXG4gICAgICAgICAgICB0YXJnZXQ6IHNjb3BlX1RhcmdldCxcbiAgICAgICAgICAgIHJlbW92ZVBpcHM6IHJlbW92ZVBpcHMsXG4gICAgICAgICAgICByZW1vdmVUb29sdGlwczogcmVtb3ZlVG9vbHRpcHMsXG4gICAgICAgICAgICBnZXRQb3NpdGlvbnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGVfTG9jYXRpb25zLnNsaWNlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0VG9vbHRpcHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGVfVG9vbHRpcHM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0T3JpZ2luczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9IYW5kbGVzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBpcHM6IHBpcHMgLy8gSXNzdWUgIzU5NFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gc2NvcGVfU2VsZjtcbiAgICB9XG4gICAgLy8gUnVuIHRoZSBzdGFuZGFyZCBpbml0aWFsaXplclxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemUodGFyZ2V0LCBvcmlnaW5hbE9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCF0YXJnZXQgfHwgIXRhcmdldC5ub2RlTmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogY3JlYXRlIHJlcXVpcmVzIGEgc2luZ2xlIGVsZW1lbnQsIGdvdDogXCIgKyB0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRocm93IGFuIGVycm9yIGlmIHRoZSBzbGlkZXIgd2FzIGFscmVhZHkgaW5pdGlhbGl6ZWQuXG4gICAgICAgIGlmICh0YXJnZXQubm9VaVNsaWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogU2xpZGVyIHdhcyBhbHJlYWR5IGluaXRpYWxpemVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUZXN0IHRoZSBvcHRpb25zIGFuZCBjcmVhdGUgdGhlIHNsaWRlciBlbnZpcm9ubWVudDtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0ZXN0T3B0aW9ucyhvcmlnaW5hbE9wdGlvbnMpO1xuICAgICAgICB2YXIgYXBpID0gc2NvcGUodGFyZ2V0LCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMpO1xuICAgICAgICB0YXJnZXQubm9VaVNsaWRlciA9IGFwaTtcbiAgICAgICAgcmV0dXJuIGFwaTtcbiAgICB9XG4gICAgdmFyIG5vdWlzbGlkZXIgPSB7XG4gICAgICAgIC8vIEV4cG9zZWQgZm9yIHVuaXQgdGVzdGluZywgZG9uJ3QgdXNlIHRoaXMgaW4geW91ciBhcHBsaWNhdGlvbi5cbiAgICAgICAgX19zcGVjdHJ1bTogU3BlY3RydW0sXG4gICAgICAgIC8vIEEgcmVmZXJlbmNlIHRvIHRoZSBkZWZhdWx0IGNsYXNzZXMsIGFsbG93cyBnbG9iYWwgY2hhbmdlcy5cbiAgICAgICAgLy8gVXNlIHRoZSBjc3NDbGFzc2VzIG9wdGlvbiBmb3IgY2hhbmdlcyB0byBvbmUgc2xpZGVyLlxuICAgICAgICBjc3NDbGFzc2VzOiBjc3NDbGFzc2VzLFxuICAgICAgICBjcmVhdGU6IGluaXRpYWxpemVcbiAgICB9O1xuXG4gICAgZXhwb3J0cy5jcmVhdGUgPSBpbml0aWFsaXplO1xuICAgIGV4cG9ydHMuY3NzQ2xhc3NlcyA9IGNzc0NsYXNzZXM7XG4gICAgZXhwb3J0c1snZGVmYXVsdCddID0gbm91aXNsaWRlcjtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiaW1wb3J0ICcuL3JlbmRlci5zY3NzJztcbmNsYXNzIFBhZ2VNYWluIHtcbiAgYXN5bmMgbWFpblJlbmRlcigpIHtcbiAgICBjb25zdCBtYWluID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1haW4nKSBhcyBIVE1MVGVtcGxhdGVFbGVtZW50O1xuICAgIG1haW4uaW5uZXJIVE1MID0gYFxuICAgIDxkaXYgY2xhc3M9XCJmaXJzdF9fcGFnZVwiPlxuICAgICAgPGRpdiBjbGFzcz1cInRveTFcIj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ0b3kyXCI+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwidG95M1wiPjwvZGl2PlxuICAgICAgPGgxIGNsYXNzPVwiZmlyc3RfX3BhZ2UtdGl0bGVcIj7QndC+0LLQvtCz0L7QtNC90Y/RjyDQuNCz0YDQsDxzcGFuPsKr0J3QsNGA0Y/QtNC4INGR0LvQutGDwrs8L3NwYW4+PC9oMT5cbiAgICAgIDxidXR0b24gY2xhc3M9XCJmaXJzdF9fc3RhcnQtZ2FtZVwiPtCd0LDRh9Cw0YLRjDwvYnV0dG9uPlxuICAgIDwvZGl2PmA7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUGFnZU1haW47XG4iLCJpbXBvcnQgeyBJRGF0YSB9IGZyb20gJy4uL3R5cGVzL3R5cGVzJztcclxuY29uc3QgZGF0YSA9ICcuL2RhdGEuanNvbic7XHJcbmNsYXNzIExvYWRlciB7XHJcbiAgYXN5bmMgZ2V0VG95TGlzdCgpIHtcclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGRhdGEpO1xyXG4gICAgY29uc3QgbGlzdDogSURhdGFbXSA9IGF3YWl0IHJlcy5qc29uKCk7XHJcbiAgICByZXR1cm4gbGlzdDtcclxuICB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgTG9hZGVyO1xyXG4iLCJpbXBvcnQgX2RlZmF1bHQsIHsgdGFyZ2V0IH0gZnJvbSAnbm91aXNsaWRlcic7XHJcbmNvbnN0IG5vVWlTbGlkZXIgPSBfZGVmYXVsdDtcclxuaW1wb3J0ICcuL3NsaWRlci5zY3NzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNsaWRlclJlbmRlciB7XHJcbiAgc2xpZGVyc1JlbmRlckNvdW50KCkge1xyXG4gICAgY29uc3Qgc2xpZGVyQ291bnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY291bnQtc2xpZGVyJykgYXMgdGFyZ2V0O1xyXG4gICAgY29uc3Qgb3V0cHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50b3lzLW91dHB1dCcpIGFzIE5vZGVMaXN0T2Y8SFRNTE91dHB1dEVsZW1lbnQ+O1xyXG4gICAgbGV0IHZhbHVlQ291bnQgPSBbMSwgMTJdO1xyXG5cclxuICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndmFsdWVzQ291bnQnKSkge1xyXG4gICAgICB2YWx1ZUNvdW50ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndmFsdWVzQ291bnQnKSBhcyBzdHJpbmcpO1xyXG4gICAgfVxyXG4gICAgaWYgKHNsaWRlckNvdW50ICE9PSBudWxsKSB7XHJcbiAgICAgIG5vVWlTbGlkZXI/LmNyZWF0ZShzbGlkZXJDb3VudCwge1xyXG4gICAgICAgIHN0YXJ0OiB2YWx1ZUNvdW50LFxyXG4gICAgICAgIGNvbm5lY3Q6IHRydWUsXHJcbiAgICAgICAgcmFuZ2U6IHtcclxuICAgICAgICAgIG1pbjogMSxcclxuICAgICAgICAgIG1heDogMTIsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzdGVwOiAxLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIG91dHB1dHNbMF0uaW5uZXJIVE1MID0gU3RyaW5nKCgrdmFsdWVDb3VudFswXSkudG9GaXhlZCgwKSk7XHJcbiAgICAgIG91dHB1dHNbMV0uaW5uZXJIVE1MID0gU3RyaW5nKCgrdmFsdWVDb3VudFsxXSkudG9GaXhlZCgwKSk7XHJcblxyXG4gICAgICBzbGlkZXJDb3VudC5ub1VpU2xpZGVyPy5vbignY2hhbmdlJywgKHZhbHVlcywgaGFuZGxlOiBudW1iZXIpID0+IHtcclxuICAgICAgICAob3V0cHV0c1toYW5kbGVdIGFzIEhUTUxPdXRwdXRFbGVtZW50KS5pbm5lckhUTUwgPSBgJHsoK3ZhbHVlc1toYW5kbGVdKS50b0ZpeGVkKDApfWA7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3ZhbHVlc0NvdW50JywgSlNPTi5zdHJpbmdpZnkoc2xpZGVyQ291bnQubm9VaVNsaWRlci5nZXQoKSkpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNsaWRlcnNSZW5kZXJZZWFycygpIHtcclxuICAgIGNvbnN0IHNsaWRlclllYXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnllYXItc2xpZGVyJykgYXMgdGFyZ2V0O1xyXG4gICAgY29uc3Qgb3V0cHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50b3lzLW91dHB1dCcpIGFzIE5vZGVMaXN0T2Y8SFRNTE91dHB1dEVsZW1lbnQ+O1xyXG4gICAgbGV0IHZhbHVlWWVhciA9IFsxOTQwLCAyMDIwXTtcclxuXHJcbiAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3ZhbHVlc1llYXInKSkge1xyXG4gICAgICB2YWx1ZVllYXIgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd2YWx1ZXNZZWFyJykgYXMgc3RyaW5nKTtcclxuICAgIH1cclxuICAgIGlmIChzbGlkZXJZZWFycyAhPT0gbnVsbCkge1xyXG4gICAgICBub1VpU2xpZGVyPy5jcmVhdGUoc2xpZGVyWWVhcnMsIHtcclxuICAgICAgICBzdGFydDogdmFsdWVZZWFyLFxyXG4gICAgICAgIGNvbm5lY3Q6IHRydWUsXHJcbiAgICAgICAgcmFuZ2U6IHtcclxuICAgICAgICAgIG1pbjogMTk0MCxcclxuICAgICAgICAgIG1heDogMjAyMCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN0ZXA6IDEwLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIG91dHB1dHNbMl0uaW5uZXJIVE1MID0gU3RyaW5nKCgrdmFsdWVZZWFyWzBdKS50b0ZpeGVkKDApKTtcclxuICAgICAgb3V0cHV0c1szXS5pbm5lckhUTUwgPSBTdHJpbmcoKCt2YWx1ZVllYXJbMV0pLnRvRml4ZWQoMCkpO1xyXG5cclxuICAgICAgc2xpZGVyWWVhcnMubm9VaVNsaWRlcj8ub24oJ2NoYW5nZScsICh2YWx1ZXMsIGhhbmRsZTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgKG91dHB1dHNbaGFuZGxlICsgMl0gYXMgSFRNTE91dHB1dEVsZW1lbnQpLmlubmVySFRNTCA9IGAkeygrdmFsdWVzW2hhbmRsZV0pLnRvRml4ZWQoMCl9YDtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndmFsdWVzWWVhcicsIEpTT04uc3RyaW5naWZ5KHNsaWRlclllYXJzLm5vVWlTbGlkZXIuZ2V0KCkpKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IElEYXRhIH0gZnJvbSAnLi4vLi4vdHlwZXMvdHlwZXMnO1xyXG5pbXBvcnQgeyBJT2JqIH0gZnJvbSAnLi4vLi4vdHlwZXMvdHlwZXMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsdGVyIHtcclxuICBhcnI6IElEYXRhW10gPSBbXTtcclxuXHJcbiAgYXJyYXk6IElEYXRhW10gPSBbXTtcclxuXHJcbiAgT2JqZWN0RmxhZzogSU9iajtcclxuXHJcbiAgY29uc3RydWN0b3IoYXJyOiBJRGF0YVtdLCBPYmplY3RGbGFnOiBJT2JqKSB7XHJcbiAgICB0aGlzLmFyciA9IGFycjtcclxuICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnb2JqZWN0JykpIHtcclxuICAgICAgT2JqZWN0RmxhZyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ29iamVjdCcpIGFzIHN0cmluZyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLk9iamVjdEZsYWcgPSBPYmplY3RGbGFnO1xyXG4gIH1cclxuXHJcbiAgZ2V0RmlsdGVyUHJvcGVydHkoKSB7XHJcbiAgICBjb25zdCBrZXlzOiBzdHJpbmdbXSA9IE9iamVjdC5rZXlzKHRoaXMuT2JqZWN0RmxhZyk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoIC0gMTsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGtleSA9IE9iamVjdC5rZXlzKHRoaXMuT2JqZWN0RmxhZ1tgJHtrZXlzW2ldfWBdKTtcclxuICAgICAgY29uc3QgYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuJHtrZXlzW2ldfWApIGFzIEhUTUxMSUVsZW1lbnQ7XHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwga2V5Lmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuT2JqZWN0RmxhZ1trZXlzW2ldXVtrZXlbal1dID09PSB0cnVlKSB7XHJcbiAgICAgICAgICBhcj8ucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uJylbal0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XHJcbiAgICAgICAgfSBlbHNlIGFyPy5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24nKVtqXS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgaW5wdXRDaGVja2JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mYXZvcml0ZV9faW5wdXQnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgaWYgKGlucHV0Q2hlY2tib3ggIT09IG51bGwpIHtcclxuICAgICAgaWYgKHRoaXMuT2JqZWN0RmxhZ1trZXlzWzNdXS5mYXZvcml0ZSA9PSB0cnVlKSB7XHJcbiAgICAgICAgaW5wdXRDaGVja2JveC5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgfSBlbHNlIGlucHV0Q2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuJHtrZXlzWzBdfWApIGFzIEhUTUxFbGVtZW50KT8ucXVlcnlTZWxlY3RvcignLmFjdGl2ZScpICE9PSBudWxsKSB7XHJcbiAgICAgIHRoaXMuYXJyYXkgPSBbXTtcclxuICAgICAgY29uc3Qga2V5RmlsdGVyOiBzdHJpbmdbXSA9IE9iamVjdC5rZXlzKHRoaXMuT2JqZWN0RmxhZ1trZXlzWzBdXSk7XHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwga2V5c1swXS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgIGlmICh0aGlzLk9iamVjdEZsYWdba2V5c1swXV1ba2V5RmlsdGVyW2pdXSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgdGhpcy5hcnIuZm9yRWFjaCgoZWwpID0+IHtcclxuICAgICAgICAgICAgaWYgKGtleUZpbHRlcltqXSA9PT0gZWxba2V5c1swXV0pIHtcclxuICAgICAgICAgICAgICB0aGlzLmFycmF5LnB1c2goZWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5hcnIgPSB0aGlzLmFycmF5O1xyXG4gICAgfVxyXG4gICAgaWYgKChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuJHtrZXlzWzFdfWApIGFzIEhUTUxFbGVtZW50KT8ucXVlcnlTZWxlY3RvcignLmFjdGl2ZScpICE9PSBudWxsKSB7XHJcbiAgICAgIHRoaXMuYXJyYXkgPSBbXTtcclxuICAgICAgY29uc3Qga2V5RmlsdGVyOiBzdHJpbmdbXSA9IE9iamVjdC5rZXlzKHRoaXMuT2JqZWN0RmxhZ1trZXlzWzFdXSk7XHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwga2V5c1sxXS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgIGlmICh0aGlzLk9iamVjdEZsYWdba2V5c1sxXV1ba2V5RmlsdGVyW2pdXSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgdGhpcy5hcnIuZm9yRWFjaCgoZWwpID0+IHtcclxuICAgICAgICAgICAgaWYgKGtleUZpbHRlcltqXSA9PT0gZWxba2V5c1sxXV0pIHtcclxuICAgICAgICAgICAgICB0aGlzLmFycmF5LnB1c2goZWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5hcnIgPSB0aGlzLmFycmF5O1xyXG4gICAgfVxyXG4gICAgaWYgKChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuJHtrZXlzWzJdfWApIGFzIEhUTUxFbGVtZW50KT8ucXVlcnlTZWxlY3RvcignLmFjdGl2ZScpICE9PSBudWxsKSB7XHJcbiAgICAgIHRoaXMuYXJyYXkgPSBbXTtcclxuICAgICAgY29uc3Qga2V5RmlsdGVyOiBzdHJpbmdbXSA9IE9iamVjdC5rZXlzKHRoaXMuT2JqZWN0RmxhZ1trZXlzWzJdXSk7XHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwga2V5c1syXS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgIGlmICh0aGlzLk9iamVjdEZsYWdba2V5c1syXV1ba2V5RmlsdGVyW2pdXSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgdGhpcy5hcnIuZm9yRWFjaCgoZWwpID0+IHtcclxuICAgICAgICAgICAgaWYgKGtleUZpbHRlcltqXSA9PT0gZWxba2V5c1syXV0pIHtcclxuICAgICAgICAgICAgICB0aGlzLmFycmF5LnB1c2goZWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5hcnIgPSB0aGlzLmFycmF5O1xyXG4gICAgfVxyXG4gICAgaWYgKChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmF2b3JpdGVfX2lucHV0JykgYXMgSFRNTElucHV0RWxlbWVudCk/LmNoZWNrZWQpIHtcclxuICAgICAgdGhpcy5hcnJheSA9IFtdO1xyXG4gICAgICBjb25zdCBrZXlGaWx0ZXI6IHN0cmluZ1tdID0gT2JqZWN0LmtleXModGhpcy5PYmplY3RGbGFnW2tleXNbM11dKTtcclxuICAgICAgdGhpcy5hcnIuZm9yRWFjaCgoZWwpID0+IHtcclxuICAgICAgICBjb25zdCByID0gZWxba2V5RmlsdGVyWzBdXTtcclxuICAgICAgICBpZiAoKHIgYXMgdW5rbm93biBhcyBib29sZWFuKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgdGhpcy5hcnJheS5wdXNoKGVsKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLmFyciA9IHRoaXMuYXJyYXk7XHJcbiAgICB9XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnb2JqZWN0JywgSlNPTi5zdHJpbmdpZnkodGhpcy5PYmplY3RGbGFnKSk7XHJcbiAgICByZXR1cm4gdGhpcy5hcnI7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IElEYXRhIH0gZnJvbSAnLi4vLi4vdHlwZXMvdHlwZXMnO1xyXG5pbXBvcnQgRmlsdGVyIGZyb20gJy4vZmlsdGVyUHJvcGVydHknO1xyXG5pbXBvcnQgeyBJT2JqIH0gZnJvbSAnLi4vLi4vdHlwZXMvdHlwZXMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsdGVyRmlyc3QgZXh0ZW5kcyBGaWx0ZXIge1xyXG4gIGFycmF5OiBJRGF0YVtdID0gW107XHJcblxyXG4gIG5vZGVMaXN0OiBOb2RlTGlzdE9mPEhUTUxFbGVtZW50PjtcclxuXHJcbiAgZWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGFycjogSURhdGFbXSwgbm9kZUxpc3Q6IE5vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+LCBlbGVtZW50OiBIVE1MRWxlbWVudCwgT2JqZWN0RmxhZzogSU9iaikge1xyXG4gICAgc3VwZXIoYXJyLCBPYmplY3RGbGFnKTtcclxuICAgIHRoaXMubm9kZUxpc3QgPSBub2RlTGlzdDtcclxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBnZXRPYmpGaWx0ZXJzKCkge1xyXG4gICAgY29uc3QgZGF0YVBhcmVudCA9ICh0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSBhcyBIVE1MRWxlbWVudCkuZGF0YXNldC5maWx0ZXIgYXMgc3RyaW5nO1xyXG4gICAgY29uc3QgZGF0YUl0ZW0gPSB0aGlzLmVsZW1lbnQuZGF0YXNldC5maWx0ZXIgYXMgc3RyaW5nO1xyXG5cclxuICAgIGlmICh0aGlzLmVsZW1lbnQubm9kZU5hbWUgPT0gJ0lOUFVUJykge1xyXG4gICAgICBpZiAodGhpcy5PYmplY3RGbGFnW2RhdGFQYXJlbnRdW2RhdGFJdGVtXSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAodGhpcy5lbGVtZW50IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuT2JqZWN0RmxhZ1tkYXRhUGFyZW50XVtkYXRhSXRlbV0gPSB0cnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuT2JqZWN0RmxhZ1tkYXRhUGFyZW50XVtkYXRhSXRlbV0gPSBmYWxzZTtcclxuICAgICAgICAodGhpcy5lbGVtZW50IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0aGlzLk9iamVjdEZsYWdbZGF0YVBhcmVudF1bZGF0YUl0ZW1dID09PSB0cnVlKSB7XHJcbiAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKTtcclxuICAgICAgdGhpcy5PYmplY3RGbGFnW2RhdGFQYXJlbnRdW2RhdGFJdGVtXSA9IGZhbHNlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5PYmplY3RGbGFnW2RhdGFQYXJlbnRdW2RhdGFJdGVtXSA9IHRydWU7XHJcbiAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSURhdGEgfSBmcm9tICcuLi8uLi90eXBlcy90eXBlcyc7XHJcbmltcG9ydCB7IElPYmogfSBmcm9tICcuLi8uLi90eXBlcy90eXBlcyc7XHJcbmltcG9ydCBGaWx0ZXIgZnJvbSAnLi9maWx0ZXJQcm9wZXJ0eSc7XHJcblxyXG5sZXQgeWVhcjogbnVtYmVyW10gPSBbMTk0MCwgMTk1MCwgMTk2MCwgMTk3MCwgMTk4MCwgMTk5MCwgMjAwMCwgMjAxMCwgMjAyMF07XHJcblxyXG5sZXQgY291bnQ6IG51bWJlcltdID0gWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbHRlclBhZ2UoYXJyOiBJRGF0YVtdLCBPYmplY3RGbGFnOiBJT2JqKSB7XHJcbiAgY29uc3QgYXJyYXlGaWx0ZXJlZCA9IG5ldyBGaWx0ZXIoYXJyLCBPYmplY3RGbGFnKTtcclxuICBjb25zdCBhcnJheUZpbHRlclByb3AgPSBhcnJheUZpbHRlcmVkLmdldEZpbHRlclByb3BlcnR5KCk7XHJcbiAgY29uc3QgYXJyYXlTbGlkOiBJRGF0YVtdID0gW107XHJcbiAgYXJyYXlGaWx0ZXJQcm9wLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgeWVhci5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAoK2l0ZW0ueWVhciA9PT0geWVhcltpXSkge1xyXG4gICAgICAgIGNvdW50LmZvckVhY2goKGVsZW0pID0+IHtcclxuICAgICAgICAgIGlmIChlbGVtID09PSAraXRlbS5jb3VudCkge1xyXG4gICAgICAgICAgICBhcnJheVNsaWQucHVzaChpdGVtKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG4gIHJldHVybiBhcnJheVNsaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTb3J0UmFuZ2UoYXJyOiBJRGF0YVtdLCBjdXJyZW50QXJyOiBudW1iZXJbXSwgYXJlYTogc3RyaW5nLCBPYmplY3RGbGFnOiBJT2JqKSB7XHJcbiAgaWYgKGFyZWEgPT09ICdjb3VudCcpIHtcclxuICAgIGNvdW50ID0gY3VycmVudEFycjtcclxuICB9XHJcbiAgaWYgKGFyZWEgPT09ICd5ZWFyJykge1xyXG4gICAgeWVhciA9IGN1cnJlbnRBcnI7XHJcbiAgfVxyXG4gIHJldHVybiBnZXRGaWx0ZXJQYWdlKGFyciwgT2JqZWN0RmxhZyk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBnZXRTb3J0RGF0YSA9IGZ1bmN0aW9uIGdldFNvcnREYXRhKGFycjogSURhdGFbXSkge1xyXG4gIGNvbnN0IHNlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zb3J0LXNlbGVjdCcpIGFzIEhUTUxTZWxlY3RFbGVtZW50O1xyXG4gIHN3aXRjaCAoc2VsZWN0LnZhbHVlKSB7XHJcbiAgICBjYXNlICdzb3J0LW5hbWUtbWF4JzpcclxuICAgICAgYXJyLnNvcnQoKGEsIGIpID0+IChhLm5hbWUgPiBiLm5hbWUgPyAxIDogLTEpKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdzb3J0LW5hbWUtbWluJzpcclxuICAgICAgYXJyLnNvcnQoKGEsIGIpID0+IChhLm5hbWUgPCBiLm5hbWUgPyAxIDogLTEpKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdzb3J0LXllYXItbWF4JzpcclxuICAgICAgYXJyLnNvcnQoKGEsIGIpID0+ICgrYS55ZWFyID4gK2IueWVhciA/IDEgOiAtMSkpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ3NvcnQteWVhci1taW4nOlxyXG4gICAgICBhcnIuc29ydCgoYSwgYikgPT4gKCthLnllYXIgPCArYi55ZWFyID8gMSA6IC0xKSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gIH1cclxuICByZXR1cm4gYXJyO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbHRlclNlYXJjaChhcnI6IElEYXRhW10sIHZhbHVlOiBzdHJpbmcpIHtcclxuICBjb25zdCBhcnJheVNlYXJjaCA9IGFyci5maWx0ZXIoKGVsKSA9PiBlbC5uYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih2YWx1ZS50b0xvd2VyQ2FzZSgpKSAhPT0gLTEpO1xyXG4gIHJldHVybiBhcnJheVNlYXJjaDtcclxufVxyXG4iLCJpbXBvcnQgeyBJRGF0YSB9IGZyb20gJy4uLy4uL3R5cGVzL3R5cGVzJztcclxuaW1wb3J0ICcuL2NhcmQuc2Nzcyc7XHJcbmltcG9ydCAnLi9wb3B1cC5zY3NzJztcclxuXHJcbmxldCBwb3B1cEFjdGl2ZSA9IDA7XHJcbmV4cG9ydCBmdW5jdGlvbiBTaG93UG9wdXAodGV4dDogc3RyaW5nKSB7XHJcbiAgY29uc3Qgd2luZG93ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1haW5fX2NvbnRhaW5lcicpIGFzIEhUTUxFbGVtZW50O1xyXG4gIGlmICh3aW5kb3cgIT09IG51bGwpIHtcclxuICAgIGlmIChwb3B1cEFjdGl2ZSA9PT0gMCkge1xyXG4gICAgICBwb3B1cEFjdGl2ZSA9IDE7XHJcbiAgICAgIGNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgb3ZlcmxheS5jbGFzc05hbWUgPSAnb3ZlcmxheSc7XHJcbiAgICAgIGNvbnN0IHBvcHVwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgIGNvbnN0IGNsb3NlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgIGNsb3NlLmNsYXNzTmFtZSA9ICdjbG9zZSc7XHJcbiAgICAgIHBvcHVwLmNsYXNzTmFtZSA9ICdwb3B1cCc7XHJcbiAgICAgIHBvcHVwLmlubmVySFRNTCA9IHRleHQ7XHJcbiAgICAgIHBvcHVwLmFwcGVuZChjbG9zZSk7XHJcbiAgICAgIHdpbmRvdy5hcHBlbmQob3ZlcmxheSk7XHJcbiAgICAgIHdpbmRvdy5hcHBlbmQocG9wdXApO1xyXG4gICAgICBjbG9zZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBwb3B1cC5yZW1vdmUoKTtcclxuICAgICAgICBvdmVybGF5LnJlbW92ZSgpO1xyXG4gICAgICAgIHBvcHVwQWN0aXZlID0gMDtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5sZXQgYXJyYXlGYXZvcml0ZTogSURhdGFbXSA9IFtdO1xyXG5pZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FycmF5RmF2b3JpdGUnKSkge1xyXG4gIGFycmF5RmF2b3JpdGUgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhcnJheUZhdm9yaXRlJykgYXMgc3RyaW5nKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZmF2b3JpdGVDaGVjayhpdGVtOiBJRGF0YSwgY2FyZDogSFRNTERpdkVsZW1lbnQpIHtcclxuICBpZiAoYXJyYXlGYXZvcml0ZS5sZW5ndGggPCAyMCkge1xyXG4gICAgaWYgKChjYXJkLmxhc3RDaGlsZCBhcyBIVE1MRWxlbWVudCkuY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKSkge1xyXG4gICAgICAoY2FyZC5sYXN0Q2hpbGQgYXMgSFRNTEVsZW1lbnQpLmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScpO1xyXG4gICAgICBhcnJheUZhdm9yaXRlID0gYXJyYXlGYXZvcml0ZS5maWx0ZXIoKGVsKSA9PiBKU09OLnN0cmluZ2lmeShlbCkgIT09IEpTT04uc3RyaW5naWZ5KGl0ZW0pKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFycmF5RmF2b3JpdGUucHVzaChpdGVtKTtcclxuICAgICAgKGNhcmQubGFzdENoaWxkIGFzIEhUTUxFbGVtZW50KS5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgaWYgKChjYXJkLmxhc3RDaGlsZCBhcyBIVE1MRWxlbWVudCkuY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKSkge1xyXG4gICAgICAoY2FyZC5sYXN0Q2hpbGQgYXMgSFRNTEVsZW1lbnQpLmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScpO1xyXG4gICAgICBhcnJheUZhdm9yaXRlID0gYXJyYXlGYXZvcml0ZS5maWx0ZXIoKGVsKSA9PiBKU09OLnN0cmluZ2lmeShlbCkgIT09IEpTT04uc3RyaW5naWZ5KGl0ZW0pKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIFNob3dQb3B1cCgn0JjQt9Cy0LjQvdC40YLQtSwg0LLRgdC1INGB0LvQvtGC0Ysg0LfQsNC/0L7Qu9C90LXQvdGLJyk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VsZWN0ZWQgc3BhbicpIGFzIEhUTUxFbGVtZW50KS5pbm5lckhUTUwgPSBgJHthcnJheUZhdm9yaXRlLmxlbmd0aH1gO1xyXG4gIC8vIGNvbnNvbGUubG9nKGFycmF5RmF2b3JpdGUubGVuZ3RoKTtcclxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYXJyYXlGYXZvcml0ZScsIEpTT04uc3RyaW5naWZ5KGFycmF5RmF2b3JpdGUpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlclBhZ2UoYXJyOiBJRGF0YVtdKSB7XHJcbiAgY29uc3QgY2FyZENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19jb250YWluZXInKSBhcyBIVE1MVGVtcGxhdGVFbGVtZW50O1xyXG4gIGlmIChjYXJkQ29udGFpbmVyICE9PSBudWxsKSB7XHJcbiAgICBjYXJkQ29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xyXG4gIH1cclxuICAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlbGVjdGVkIHNwYW4nKSBhcyBIVE1MRWxlbWVudCkuaW5uZXJIVE1MID0gYCR7YXJyYXlGYXZvcml0ZS5sZW5ndGh9YDtcclxuICBhcnIuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgY29uc3QgY2FyZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgY2FyZC5jbGFzc05hbWUgPSAnY2FyZCc7XHJcbiAgICBjYXJkLmRhdGFzZXQubnVtID0gaXRlbS5udW07XHJcbiAgICBjYXJkLmlubmVySFRNTCA9IGBcclxuICAgIDxoMiBjbGFzcz1cImNhcmRfX3RpdGxlXCI+JHtpdGVtLm5hbWV9PC9oMj5cclxuICAgIDxpbWcgc3JjPVwiLi9hc3NldHMvdG95cy8ke2l0ZW0ubnVtfS5wbmdcIiBhbHQ9XCJ0b3lcIiBjbGFzcz1cImNhcmQtaW1nXCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY2FyZF9faW5mb1wiPlxyXG4gICAgICA8cCBjbGFzcz1cImNvdW50XCI+0JrQvtC70LjRh9C10YHRgtCy0L46IDxzcGFuPiR7aXRlbS5jb3VudH08L3NwYW4+PC9wPlxyXG4gICAgICA8cCBjbGFzcz1cInllYXJcIj7Qk9C+0LQg0L/QvtC60YPQv9C60Lg6IDxzcGFuPiR7aXRlbS55ZWFyfTwvc3Bhbj48L3A+XHJcbiAgICAgIDxwIGNsYXNzPVwiZm9ybVwiPtCk0L7RgNC80LA6IDxzcGFuPiR7aXRlbS5zaGFwZX08L3NwYW4+PC9wPlxyXG4gICAgICA8cCBjbGFzcz1cImNvbG9yXCI+0KbQstC10YI6IDxzcGFuPiR7aXRlbS5jb2xvcn08L3NwYW4+PC9wPlxyXG4gICAgICA8cCBjbGFzcz1cInNpemVcIj7QoNCw0LfQvNC10YA6IDxzcGFuPiR7aXRlbS5zaXplfTwvc3Bhbj48L3A+XHJcbiAgICAgIDxwIGNsYXNzPVwiZmF2b3JpdGVcIj7Qm9GO0LHQuNC80LDRjzogPHNwYW4+JHtpdGVtLmZhdm9yaXRlID8gJ9C00LAnIDogJ9C90LXRgid9PC9zcGFuPjwvcD5cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdiBjbGFzcz1cIm1hcmtcIj48L2Rpdj5gO1xyXG4gICAgY2FyZENvbnRhaW5lci5hcHBlbmQoY2FyZCk7XHJcbiAgICBhcnJheUZhdm9yaXRlLmZvckVhY2goKGVsKSA9PiB7XHJcbiAgICAgIGlmIChKU09OLnN0cmluZ2lmeShlbCkgPT09IEpTT04uc3RyaW5naWZ5KGl0ZW0pKSB7XHJcbiAgICAgICAgKGNhcmQubGFzdENoaWxkIGFzIEhUTUxFbGVtZW50KS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBjYXJkLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICBmYXZvcml0ZUNoZWNrKGl0ZW0sIGNhcmQpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IE9iamVjdEZsYWcgPSB7XHJcbiAgc2hhcGU6IHtcclxuICAgINGI0LDRgDogZmFsc2UsXHJcbiAgICDQutC+0LvQvtC60L7Qu9GM0YfQuNC6OiBmYWxzZSxcclxuICAgINGI0LjRiNC60LA6IGZhbHNlLFxyXG4gICAg0YHQvdC10LbQuNC90LrQsDogZmFsc2UsXHJcbiAgICDRhNC40LPRg9GA0LrQsDogZmFsc2UsXHJcbiAgfSxcclxuICBjb2xvcjoge1xyXG4gICAg0LHQtdC70YvQuTogZmFsc2UsXHJcbiAgICDQttC10LvRgtGL0Lk6IGZhbHNlLFxyXG4gICAg0LrRgNCw0YHQvdGL0Lk6IGZhbHNlLFxyXG4gICAg0YHQuNC90LjQuTogZmFsc2UsXHJcbiAgICDQt9C10LvRkdC90YvQuTogZmFsc2UsXHJcbiAgfSxcclxuICBzaXplOiB7XHJcbiAgICDQsdC+0LvRjNGI0L7QuTogZmFsc2UsXHJcbiAgICDRgdGA0LXQtNC90LjQuTogZmFsc2UsXHJcbiAgICDQvNCw0LvRi9C5OiBmYWxzZSxcclxuICB9LFxyXG4gIGZhdm9yaXRlczoge1xyXG4gICAgZmF2b3JpdGU6IGZhbHNlLFxyXG4gIH0sXHJcbn07XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBnZXRTbm93SW50ZXJ2YWwoKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZVNub3dGbGFrZSgpIHtcbiAgICBjb25zdCBzbm93V2luZG93ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRyZWUtc25vdy1jb250YWluZXInKSBhcyBIVE1MRWxlbWVudDtcbiAgICBjb25zdCBzbm93Rmxha2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJykgYXMgSFRNTEVsZW1lbnQ7XG4gICAgc25vd0ZsYWtlLmNsYXNzTGlzdC5hZGQoJ2ZhLXNub3dmbGFrZScpO1xuICAgIHNub3dGbGFrZS5zdHlsZS5sZWZ0ID0gTWF0aC5yYW5kb20oKSAqIChzbm93V2luZG93Py5jbGllbnRXaWR0aCAtIDIwKSArICdweCc7XG4gICAgc25vd0ZsYWtlLnN0eWxlLmFuaW1hdGlvbkR1cmF0aW9uID0gTWF0aC5yYW5kb20oKSAqIDMgKyAyICsgJ3MnOyAvLyBiZXR3ZWVuIDIgLSA1IHNlY29uZHNcbiAgICBzbm93Rmxha2Uuc3R5bGUub3BhY2l0eSA9IGAke01hdGgucmFuZG9tKCl9YDtcbiAgICBzbm93Rmxha2Uuc3R5bGUud2lkdGggPSBNYXRoLnJhbmRvbSgpICogMTAgKyAxMCArICdweCc7XG4gICAgc25vd1dpbmRvdz8uYXBwZW5kQ2hpbGQoc25vd0ZsYWtlKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc25vd0ZsYWtlLnJlbW92ZSgpO1xuICAgIH0sIDUwMDApO1xuICB9XG5cbiAgY29uc3Qgc25vd0NvbnRyb2wgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc25vdy1zZXR0aW5nJykgYXMgSFRNTEVsZW1lbnQ7XG4gIGNvbnN0IHNub3dmbGFrZXNJbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgIGlmIChzbm93Q29udHJvbC5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpKSB7XG4gICAgICBjcmVhdGVTbm93Rmxha2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xlYXJJbnRlcnZhbChzbm93Zmxha2VzSW50ZXJ2YWxJZCk7XG4gICAgfVxuICB9LCA1MCk7XG59XG4iLCJpbXBvcnQgeyBhdWRpb1BsYXkgfSBmcm9tICcuLi9hdWRpb1BsYXkvYXVkaW9QbGF5JztcbmltcG9ydCBMb2FkZXIgZnJvbSAnLi4vLi4vbG9hZGVyL2xvYWRlcic7XG5pbXBvcnQgeyBnZXRTbm93SW50ZXJ2YWwgfSBmcm9tICcuLi9zbm93RG93bi9zbm93RG93bic7XG5pbXBvcnQgeyBnZXRUcmVlc1N0YXJ0IH0gZnJvbSAnLi4vdHJlZXNTdGFydC90cmVlc1N0YXJ0JztcbmltcG9ydCB7IGdldEJnSW1hZ2VzIH0gZnJvbSAnLi4vYmdTdGFydC9iZ1N0YXJ0JztcbmltcG9ydCB7IGhhbmRsZURyYWdnbGUgfSBmcm9tICcuL2hhbmRsZURyYWdnbGUvaGFuZGxlRHJhZ2dsZSc7XG5pbXBvcnQgeyBnZXRHYXJsYW5kIH0gZnJvbSAnLi9nZXRHYXJsYW5kL2dldEdhcmxhbmQnO1xuaW1wb3J0ICcuL3RyZWVSZW5kZXIuc2Nzcyc7XG5cbmNsYXNzIFRyZWVSZW5kZXIge1xuICBhc3luYyBnZXRQYWdlVHJlZSgpIHtcbiAgICAvL3BsYXkgYXVkaW9cbiAgICBhdWRpb1BsYXkoKTtcbiAgICAvL3Nob3cgc25vd1xuICAgIGxldCBpc1Nub3cgPSBmYWxzZTtcbiAgICBjb25zdCBzbm93Q29udHJvbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zbm93LXNldHRpbmcnKSBhcyBIVE1MRWxlbWVudDtcbiAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2lzU25vdycpKSB7XG4gICAgICBpc1Nub3cgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdpc1Nub3cnKSBhcyBzdHJpbmcpO1xuICAgIH1cbiAgICBpZiAoaXNTbm93ID09PSB0cnVlKSB7XG4gICAgICBzbm93Q29udHJvbC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgIGdldFNub3dJbnRlcnZhbCgpO1xuICAgIH1cbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnaXNTbm93JywgSlNPTi5zdHJpbmdpZnkoaXNTbm93KSk7XG4gICAgc25vd0NvbnRyb2wuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBzbm93Q29udHJvbC5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKTtcbiAgICAgIGlzU25vdyA9IHNub3dDb250cm9sLmNsYXNzTGlzdC5jb250YWlucygnYWN0aXZlJykgPyB0cnVlIDogZmFsc2U7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnaXNTbm93JywgSlNPTi5zdHJpbmdpZnkoaXNTbm93KSk7XG4gICAgICBnZXRTbm93SW50ZXJ2YWwoKTtcbiAgICB9KTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3RvcmFnZS1zZXR0aW5nJyk/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgbG9jYWxTdG9yYWdlLmNsZWFyKCk7XG4gICAgfSk7XG4gICAgLy9jaG9pY2UgdHJlZVxuICAgIGdldFRyZWVzU3RhcnQoKTtcbiAgICAvL2JhY2tncm91bmRcbiAgICBnZXRCZ0ltYWdlcygpO1xuICAgIC8vIGdhcmxhbmRzXG4gICAgZ2V0R2FybGFuZCgpO1xuICAgIC8vZ2V0VG95c1xuICAgIGNvbnN0IGxvYWRlciA9IG5ldyBMb2FkZXIoKTtcbiAgICBjb25zdCBsaXN0ID0gYXdhaXQgbG9hZGVyLmdldFRveUxpc3QoKTtcbiAgICBsZXQgYXJyYXlUb3lzID0gbGlzdC5zbGljZSgwLCAyMCk7XG4gICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhcnJheUZhdm9yaXRlJykpIHtcbiAgICAgIGFycmF5VG95cyA9XG4gICAgICAgIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FycmF5RmF2b3JpdGUnKSBhcyBzdHJpbmcpLmxlbmd0aCA+IDBcbiAgICAgICAgICA/IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FycmF5RmF2b3JpdGUnKSBhcyBzdHJpbmcpXG4gICAgICAgICAgOiBhcnJheVRveXM7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRhaW5lclRveXNGYXZvcml0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jaG9pY2UtZmF2b3JpdGUtdG95cycpO1xuICAgIGFycmF5VG95cy5mb3JFYWNoKChpdGVtLCBpbmQpID0+IHtcbiAgICAgIGNvbnN0IGNob2ljZVRveSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpIGFzIEhUTUxFbGVtZW50O1xuICAgICAgY2hvaWNlVG95LmNsYXNzTmFtZSA9ICdjaG9pY2UtdG95JztcbiAgICAgIGNob2ljZVRveS5kYXRhc2V0Lm51bSA9IGAke2luZH1gO1xuICAgICAgY29uc3QgY2hvaWNlTnVtYmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgY2hvaWNlTnVtYmVyLmNsYXNzTmFtZSA9ICdjaG9pY2UtbnVtYmVyLWltZyc7XG4gICAgICBjaG9pY2VOdW1iZXIuaW5uZXJUZXh0ID0gaXRlbS5jb3VudDtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IFtdIGFzIEhUTUxFbGVtZW50W107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8ICtpdGVtLmNvdW50OyBpKyspIHtcbiAgICAgICAgY29uc3QgY2hvaWNlSW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJykgYXMgSFRNTEltYWdlRWxlbWVudDtcbiAgICAgICAgY2hvaWNlSW1nLmNsYXNzTmFtZSA9ICdjaG9pY2UtaW1nJztcbiAgICAgICAgY2hvaWNlSW1nLmFsdCA9ICd0b3knO1xuICAgICAgICBjaG9pY2VJbWcuZHJhZ2dhYmxlID0gdHJ1ZTtcbiAgICAgICAgY2hvaWNlSW1nLmRhdGFzZXQubnVtYmVyID0gYCR7aW5kfWA7XG4gICAgICAgIGNob2ljZUltZy5pZCA9IGAke2l0ZW0ubnVtfS0ke2l9YDtcbiAgICAgICAgY2hvaWNlSW1nLnNyYyA9IGAuLi8uLi9hc3NldHMvdG95cy8ke2l0ZW0ubnVtfS5wbmdgO1xuICAgICAgICByZXN1bHQucHVzaChjaG9pY2VJbWcpO1xuICAgICAgfVxuICAgICAgY2hvaWNlVG95LmFwcGVuZChjaG9pY2VOdW1iZXIpO1xuICAgICAgY2hvaWNlVG95LmFwcGVuZCguLi5yZXN1bHQpO1xuICAgICAgY29udGFpbmVyVG95c0Zhdm9yaXRlPy5hcHBlbmQoY2hvaWNlVG95KTtcbiAgICB9KTtcbiAgICBoYW5kbGVEcmFnZ2xlKCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVHJlZVJlbmRlcjtcbiIsImltcG9ydCBQYWdlTWFpbiBmcm9tICcuL21haW5QYWdlL3JlbmRlci9yZW5kZXInO1xuaW1wb3J0IFBhZ2VGaXJzdCBmcm9tICcuL2ZpcnN0UGFnZS9yZW5kZXIvcmVuZGVyJztcbmltcG9ydCBQYWdlU2Vjb25kIGZyb20gJy4vc2Vjb25kUGFnZS9yZW5kZXIvcmVuZGVyJztcbmltcG9ydCBDYXJkUmVuZGVyIGZyb20gJy4vZmlyc3RQYWdlL2NvbnRyb2xsZXJGaWx0ZXJzL0NvbnRyb2xsZXJGaWx0ZXJzJztcbmltcG9ydCBUcmVlUmVuZGVyIGZyb20gJy4vc2Vjb25kUGFnZS90cmVlUmVuZGVyL3RyZWVSZW5kZXInO1xuY29uc3QgYnV0dG9uVHJlZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wYWdlLW1haW4nKSBhcyBIVE1MRWxlbWVudDtcbmNvbnN0IGJ1dHRvblBhZ2VGaXJzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wYWdlLWZpcnN0JykgYXMgSFRNTEVsZW1lbnQ7XG5jb25zdCBidXR0b25QYWdlU2Vjb25kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBhZ2Utc2Vjb25kJykgYXMgSFRNTEVsZW1lbnQ7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjaG9pY2VQYWdlKCkge1xuICBsZXQgYXBwID0gbmV3IFBhZ2VNYWluKCk7XG4gIGxldCBjb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gcmVuZGVyc0NhcmQoKSB7XG4gICAgY29uc3QgY2FyZCA9IG5ldyBDYXJkUmVuZGVyKCk7XG4gICAgY2FyZC5nZXRDYXJkKCk7XG4gIH1cbiAgZnVuY3Rpb24gcmVuZGVyc1RyZWUoKSB7XG4gICAgY29uc3QgY2FyZCA9IG5ldyBUcmVlUmVuZGVyKCk7XG4gICAgY2FyZC5nZXRQYWdlVHJlZSgpO1xuICB9XG4gIGZ1bmN0aW9uIHJlbmRlck1haW4oKSB7XG4gICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjb3VudCcpKSB7XG4gICAgICBjb3VudCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2NvdW50JykgYXMgc3RyaW5nKTtcbiAgICB9XG4gICAgc3dpdGNoIChjb3VudCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICBhcHAgPSBuZXcgUGFnZU1haW4oKTtcbiAgICAgICAgYXBwLm1haW5SZW5kZXIoKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcl9fY29udHJvbHMnKT8uc2V0QXR0cmlidXRlKCdpZCcsICdoaWRkZW4nKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGFwcCA9IG5ldyBQYWdlRmlyc3QoKTtcbiAgICAgICAgYXBwLm1haW5SZW5kZXIoKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcl9fY29udHJvbHMnKT8ucmVtb3ZlQXR0cmlidXRlKCdpZCcpO1xuICAgICAgICByZW5kZXJzQ2FyZCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgYXBwID0gbmV3IFBhZ2VTZWNvbmQoKTtcbiAgICAgICAgYXBwLm1haW5SZW5kZXIoKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcl9fY29udHJvbHMnKT8uc2V0QXR0cmlidXRlKCdpZCcsICdoaWRkZW4nKTtcbiAgICAgICAgcmVuZGVyc1RyZWUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNvbnN0IHN0YXJ0R2FtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5maXJzdF9fc3RhcnQtZ2FtZScpIGFzIEhUTUxFbGVtZW50O1xuICAgIHN0YXJ0R2FtZT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBjb3VudCA9IDE7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnY291bnQnLCBKU09OLnN0cmluZ2lmeShjb3VudCkpO1xuICAgICAgcmVuZGVyTWFpbigpO1xuICAgIH0pO1xuICB9XG4gIGNvbnN0IHN0YXJ0R2FtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5maXJzdF9fc3RhcnQtZ2FtZScpIGFzIEhUTUxFbGVtZW50O1xuICBzdGFydEdhbWU/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGNvdW50ID0gMTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnY291bnQnLCBKU09OLnN0cmluZ2lmeShjb3VudCkpO1xuICAgIHJlbmRlck1haW4oKTtcbiAgfSk7XG5cbiAgYnV0dG9uVHJlZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBjb3VudCA9IDA7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2NvdW50JywgSlNPTi5zdHJpbmdpZnkoY291bnQpKTtcbiAgICByZW5kZXJNYWluKCk7XG4gIH0pO1xuXG4gIGJ1dHRvblBhZ2VGaXJzdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBjb3VudCA9IDE7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2NvdW50JywgSlNPTi5zdHJpbmdpZnkoY291bnQpKTtcbiAgICByZW5kZXJNYWluKCk7XG4gIH0pO1xuICBidXR0b25QYWdlU2Vjb25kLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGNvdW50ID0gMjtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnY291bnQnLCBKU09OLnN0cmluZ2lmeShjb3VudCkpO1xuICAgIHJlbmRlck1haW4oKTtcbiAgfSk7XG4gIHJlbmRlck1haW4oKTtcbn1cbiIsImltcG9ydCAnLi9yZW5kZXIuc2Nzcyc7XHJcbmNsYXNzIFBhZ2VGaXJzdCB7XHJcbiAgYXN5bmMgbWFpblJlbmRlcigpIHtcclxuICAgIGNvbnN0IG1haW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbicpIGFzIEhUTUxUZW1wbGF0ZUVsZW1lbnQ7XHJcbiAgICBtYWluLmlubmVySFRNTCA9ICcnO1xyXG4gICAgY29uc3QgYmFja2dyb3VuZEJsdXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGNvbnN0IG1haW5Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGNvbnN0IGNhcmRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGJhY2tncm91bmRCbHVyLmNsYXNzTmFtZSA9ICdiYWNrZ3JvdW5kLWJsdXInO1xyXG4gICAgbWFpbkNvbnRhaW5lci5jbGFzc05hbWUgPSAnbWFpbl9fY29udGFpbmVyJztcclxuICAgIGNhcmRDb250YWluZXIuY2xhc3NOYW1lID0gJ2NhcmRfX2NvbnRhaW5lcic7XHJcbiAgICBtYWluQ29udGFpbmVyLmlubmVySFRNTCA9IGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbHMtcGFuZWxcIj4gICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmaWx0ZXJzLW1lYW5pbmdcIj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbHMtdGl0bGVcIj7QpNC40LvRjNGC0YDRiyDQv9C+INC30L3QsNGH0LXQvdC40Y48L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGRhdGEtZmlsdGVyID1cInNoYXBlXCIgY2xhc3M9XCJzaGFwZVwiPtCk0L7RgNC80LA6ICBcclxuICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBkYXRhLWZpbHRlcj1cItGI0LDRgFwiPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIGRhdGEtZmlsdGVyPVwi0LrQvtC70L7QutC+0LvRjNGH0LjQulwiPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIGRhdGEtZmlsdGVyPVwi0YjQuNGI0LrQsFwiPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIGRhdGEtZmlsdGVyPVwi0YHQvdC10LbQuNC90LrQsFwiPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIGRhdGEtZmlsdGVyPVwi0YTQuNCz0YPRgNC60LBcIj48L2J1dHRvbj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGRhdGEtZmlsdGVyID1cImNvbG9yXCIgY2xhc3M9XCJjb2xvclwiPtCm0LLQtdGCOiAgIFxyXG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIGRhdGEtZmlsdGVyPVwi0LHQtdC70YvQuVwiPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIGRhdGEtZmlsdGVyPVwi0LbQtdC70YLRi9C5XCI+PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgIDxidXR0b24gZGF0YS1maWx0ZXI9XCLQutGA0LDRgdC90YvQuVwiPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIGRhdGEtZmlsdGVyPVwi0YHQuNC90LjQuVwiPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIGRhdGEtZmlsdGVyPVwi0LfQtdC70ZHQvdGL0LlcIj48L2J1dHRvbj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGRhdGEtZmlsdGVyID1cInNpemVcIiBjbGFzcz1cInNpemVcIj7QoNCw0LfQvNC10YA6IFxyXG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIGRhdGEtZmlsdGVyPVwi0LHQvtC70YzRiNC+0LlcIj48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBkYXRhLWZpbHRlcj1cItGB0YDQtdC00L3QuNC5XCI+PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgIDxidXR0b24gZGF0YS1maWx0ZXI9XCLQvNCw0LvRi9C5XCI+PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZhdm9yaXRlX190b3lzXCI+0KLQvtC70YzQutC+INC70Y7QsdC40LzRi9C1OlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtZmlsdGVyID1cImZhdm9yaXRlc1wiY2xhc3M9XCJmYXZvcml0ZV9fZm9ybSBmYXZvcml0ZXNcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgZGF0YS1maWx0ZXIgPVwiZmF2b3JpdGVcIiBjbGFzcz1cImZhdm9yaXRlX19pbnB1dFwiIGlkPVwiY2hlY2tib3hcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImNoZWNrYm94XCIgY2xhc3M9XCJmYXZvcml0ZV9faW5wdXQtbGFiZWxcIj48L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj4gICBcclxuICAgICAgICAgICAgICA8L2Rpdj4gXHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmaWx0ZXJzLXJhbmdlXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbHMtdGl0bGVcIj7QpNC40LvRjNGC0YDRiyDQv9C+INC00LjQsNC/0LDQt9C+0L3RgzwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvdW50LXRveXNcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNvbnRyb2wtc3BhblwiPtCa0L7Qu9C40YfQtdGB0YLQstC+INGN0LrQt9C10LzQv9C70Y/RgNC+0LI6PC9zcGFuPiBcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtZmlsdGVyID1cImNvdW50LXNsaWRlclwiIGNsYXNzPVwiY291bnQtdG95cy1jb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG91dHB1dCBjbGFzcz1cInRveXMtb3V0cHV0XCI+MTwvb3V0cHV0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY291bnQtc2xpZGVyXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxvdXRwdXQgY2xhc3M9XCJ0b3lzLW91dHB1dFwiPjEyPC9vdXRwdXQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwieWVhclwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjb250cm9sLXNwYW5cIj7Qk9C+0LQg0L/RgNC40L7QsdGA0LXRgtC10L3QuNGPOjwvc3Bhbj4gXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWZpbHRlciA9XCJ5ZWFycy1zbGlkZXJcIiBjbGFzcz1cInllYXItdG95cy1jb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG91dHB1dCBjbGFzcz1cInRveXMtb3V0cHV0XCI+MTk0MDwvb3V0cHV0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwieWVhci1zbGlkZXJcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG91dHB1dCBjbGFzcz1cInRveXMtb3V0cHV0XCI+MjAyMDwvb3V0cHV0PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmlsdGVycy1zb3J0XCI+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRyb2xzLXRpdGxlXCI+0KHQvtGA0YLQuNGA0L7QstC60LA8L2Rpdj5cclxuICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVwic29ydC1zZWxlY3RcIj5cclxuICAgICAgICAgICAgICAgIDxvcHRpb24gc2VsZWN0ZWQgdmFsdWU9XCJzb3J0LW5hbWUtbWF4XCI+0J/QviDQvdCw0LfQstCw0L3QuNGOINC+0YIgwqvQkMK7INC00L4gwqvQr8K7PC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwic29ydC1uYW1lLW1pblwiPtCf0L4g0L3QsNC30LLQsNC90LjRjiDQvtGCIMKr0K/CuyDQtNC+IMKr0JDCuzwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInNvcnQteWVhci1tYXhcIj7Qn9C+INCz0L7QtNGDINC/0YDQuNC+0LHRgNC10YLQtdC90LjRjyDQv9C10YDQstGL0LU8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJzb3J0LXllYXItbWluXCI+0J/QviDQs9C+0LTRgyDQv9GA0LjQvtCx0YDQtdGC0LXQvdC40Y8g0L/QvtGB0LvQtdC00L3QuNC1PC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInJlc2V0U2V0dGluZ3NcIj7QodCx0YDQvtGBINC90LDRgdGC0YDQvtC10Lo8L2J1dHRvbj5cclxuICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicmVzZXRcIj7QodCx0YDQvtGBINGE0LjQu9GM0YLRgNC+0LI8L2J1dHRvbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PiBgO1xyXG4gICAgbWFpbi5hcHBlbmQoYmFja2dyb3VuZEJsdXIpO1xyXG4gICAgYmFja2dyb3VuZEJsdXIuYXBwZW5kKG1haW5Db250YWluZXIpO1xyXG4gICAgYmFja2dyb3VuZEJsdXIuYXBwZW5kKGNhcmRDb250YWluZXIpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGFnZUZpcnN0O1xyXG4iLCJpbXBvcnQgeyB0YXJnZXQgfSBmcm9tICcuLi8uLi9ub3Vpc2xpZGVyJztcclxuaW1wb3J0IExvYWRlciBmcm9tICcuLi8uLi9sb2FkZXIvbG9hZGVyJztcclxuaW1wb3J0IFNsaWRlclJlbmRlciBmcm9tICcuLi9zbGlkZXIvc2xpZGVyc1JlbmRlcic7XHJcbmltcG9ydCBGaWx0ZXJGaXJzdCBmcm9tICcuLi9maWx0ZXJzL2NoYW5nZU9iamVjdCc7XHJcbmltcG9ydCB7IElEYXRhIH0gZnJvbSAnLi4vLi4vdHlwZXMvdHlwZXMnO1xyXG5pbXBvcnQgeyBnZXRTb3J0UmFuZ2UsIGdldEZpbHRlclBhZ2UsIGdldFNvcnREYXRhLCBnZXRGaWx0ZXJTZWFyY2ggfSBmcm9tICcuLi9maWx0ZXJzL290aGVyRmlsdGVyJztcclxuaW1wb3J0IHsgcmVuZGVyUGFnZSwgU2hvd1BvcHVwIH0gZnJvbSAnLi4vcmVuZGVyQ2FyZC9yZW5kZXJDYXJkJztcclxuaW1wb3J0IHsgcmVzZXRGaWx0ZXJzIH0gZnJvbSAnLi4vcmVzZXQvcmVzZXQnO1xyXG5pbXBvcnQgeyBPYmplY3RGbGFnIH0gZnJvbSAnLi92YXJpYWJsZXMvb2JqZWN0JztcclxuXHJcbmNsYXNzIENhcmRSZW5kZXIge1xyXG4gIGFzeW5jIGdldENhcmQoKSB7XHJcbiAgICBjb25zdCBjaGVja2JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mYXZvcml0ZV9faW5wdXQnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgY29uc3Qgb3V0cHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50b3lzLW91dHB1dCcpIGFzIE5vZGVMaXN0T2Y8SFRNTE91dHB1dEVsZW1lbnQ+O1xyXG4gICAgY29uc3Qgc2xpZGVyQ291bnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY291bnQtc2xpZGVyJykgYXMgdGFyZ2V0O1xyXG4gICAgY29uc3Qgc2xpZGVyWWVhcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcueWVhci1zbGlkZXInKSBhcyB0YXJnZXQ7XHJcbiAgICBjb25zdCBzZWFyY2ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VhcmNoJykgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICAgIGNvbnN0IHNlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zb3J0LXNlbGVjdCcpIGFzIEhUTUxTZWxlY3RFbGVtZW50O1xyXG5cclxuICAgIGNvbnN0IHNsaWRlclJlbmRlciA9IG5ldyBTbGlkZXJSZW5kZXIoKTtcclxuICAgIHNsaWRlclJlbmRlci5zbGlkZXJzUmVuZGVyQ291bnQoKTtcclxuICAgIHNsaWRlclJlbmRlci5zbGlkZXJzUmVuZGVyWWVhcnMoKTtcclxuXHJcbiAgICBjb25zdCBsb2FkZXIgPSBuZXcgTG9hZGVyKCk7XHJcbiAgICBjb25zdCBsaXN0ID0gYXdhaXQgbG9hZGVyLmdldFRveUxpc3QoKTtcclxuXHJcbiAgICBsZXQgaXNDb3VudFNvcnQgPSBmYWxzZTtcclxuICAgIGxldCBmaWx0ZXJlcnM6IElEYXRhW10gPSBbXTtcclxuICAgIGNvbnN0IGZpbHRlcnNEYXRhID0gbGlzdDtcclxuICAgIGxldCBpc1NlYXJjaCA9IGZhbHNlO1xyXG5cclxuICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaXNDb3VudFNvcnQnKSkge1xyXG4gICAgICBpc0NvdW50U29ydCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2lzQ291bnRTb3J0JykgYXMgc3RyaW5nKTtcclxuICAgIH1cclxuICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZmxhZ1NlYXJjaCcpKSB7XHJcbiAgICAgIGlzU2VhcmNoID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZmxhZ1NlYXJjaCcpIGFzIHN0cmluZyk7XHJcbiAgICB9XHJcbiAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ1NvcnREYXRhJykpIHtcclxuICAgICAgc2VsZWN0LnZhbHVlID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnU29ydERhdGEnKSBhcyBzdHJpbmcpO1xyXG4gICAgfVxyXG4gICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdTb3J0U2VhcmNoJykpIHtcclxuICAgICAgc2VhcmNoLnZhbHVlID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnU29ydFNlYXJjaCcpIGFzIHN0cmluZyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9yZW5kZXIgY2FyZFxyXG4gICAgZnVuY3Rpb24gbG9hZFJlbmRlcihhcnI6IElEYXRhW10pIHtcclxuICAgICAgbGV0IHJlbmRlciA9IGdldEZpbHRlclBhZ2UoaXNTZWFyY2ggPyBnZXRGaWx0ZXJTZWFyY2goZmlsdGVyc0RhdGEsIHNlYXJjaC52YWx1ZSkgOiBhcnIsIE9iamVjdEZsYWcpO1xyXG4gICAgICBpZiAoaXNDb3VudFNvcnQgIT09IGZhbHNlKSByZW5kZXIgPSBnZXRTb3J0RGF0YShyZW5kZXIpO1xyXG4gICAgICByZW5kZXJQYWdlKHJlbmRlcik7XHJcbiAgICAgIGlmIChyZW5kZXIubGVuZ3RoID09PSAwKSBTaG93UG9wdXAoJ9CY0LfQstC40L3QuNGC0LUsINGB0L7QstC/0LDQtNC10L3QuNC5INC90LUg0L7QsdC90LDRgNGD0LbQtdC90L4nKTtcclxuICAgIH1cclxuICAgIGxvYWRSZW5kZXIoZmlsdGVyc0RhdGEpO1xyXG5cclxuICAgIC8vIGZpbHRlciBmb3JtLCBjb2xvciwgZmF2b3JpdGVcclxuICAgIGNvbnN0IGVsZW1lbnRMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcclxuICAgICAgJy5maWx0ZXJzLW1lYW5pbmcgYnV0dG9uLCAuZmF2b3JpdGVfX2lucHV0J1xyXG4gICAgKSBhcyBOb2RlTGlzdE9mPEhUTUxFbGVtZW50PjtcclxuXHJcbiAgICBmdW5jdGlvbiBvYmpGaWx0ZXIoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBJRGF0YVtdIHtcclxuICAgICAgY29uc3QgZmlsdGVyID0gbmV3IEZpbHRlckZpcnN0KGZpbHRlcnNEYXRhLCBlbGVtZW50TGlzdCwgZWxlbWVudCwgT2JqZWN0RmxhZyk7XHJcbiAgICAgIGZpbHRlci5nZXRPYmpGaWx0ZXJzKCk7XHJcbiAgICAgIGZpbHRlcmVycyA9IGZpbHRlci5nZXRGaWx0ZXJQcm9wZXJ0eSgpO1xyXG4gICAgICByZXR1cm4gZmlsdGVyZXJzO1xyXG4gICAgfVxyXG4gICAgZWxlbWVudExpc3QuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIGZpbHRlcmVycyA9IG9iakZpbHRlcihlbGVtZW50KTtcclxuICAgICAgICBsb2FkUmVuZGVyKGZpbHRlcmVycyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy9maWx0ZXIgcmFuZ2Ugc2xpZGVyXHJcbiAgICBjb25zdCBhcnJheUNvdW50OiBudW1iZXJbXSA9IFtdO1xyXG4gICAgY29uc3QgYXJyYXlZZWFyczogbnVtYmVyW10gPSBbXTtcclxuICAgIGlmIChzbGlkZXJDb3VudCAhPT0gbnVsbCkge1xyXG4gICAgICBzbGlkZXJDb3VudC5ub1VpU2xpZGVyPy5vbigndXBkYXRlJywgKHZhbHVlcykgPT4ge1xyXG4gICAgICAgIGFycmF5Q291bnQubGVuZ3RoID0gMDtcclxuICAgICAgICBjb25zdCBhID0gdmFsdWVzLm1hcCgoaXRlbSkgPT4gKCtpdGVtKS50b0ZpeGVkKDApKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gK2FbMF07IGkgPD0gK2FbMV07IGkrKykge1xyXG4gICAgICAgICAgYXJyYXlDb3VudC5wdXNoKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaWx0ZXJlcnMgPSBnZXRTb3J0UmFuZ2UoZmlsdGVyc0RhdGEsIGFycmF5Q291bnQsICdjb3VudCcsIE9iamVjdEZsYWcpO1xyXG4gICAgICAgIGxvYWRSZW5kZXIoZmlsdGVyZXJzKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoc2xpZGVyWWVhcnMgIT09IG51bGwpIHtcclxuICAgICAgc2xpZGVyWWVhcnMubm9VaVNsaWRlcj8ub24oJ3VwZGF0ZScsICh2YWx1ZXMpID0+IHtcclxuICAgICAgICBhcnJheVllYXJzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgY29uc3QgYSA9IHZhbHVlcy5tYXAoKGl0ZW0pID0+ICgraXRlbSkudG9GaXhlZCgwKSk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9ICthWzBdOyBpIDw9ICthWzFdOyApIHtcclxuICAgICAgICAgIGFycmF5WWVhcnMucHVzaChpKTtcclxuICAgICAgICAgIGkgKz0gMTA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbHRlcmVycyA9IGdldFNvcnRSYW5nZShmaWx0ZXJzRGF0YSwgYXJyYXlZZWFycywgJ3llYXInLCBPYmplY3RGbGFnKTtcclxuICAgICAgICBsb2FkUmVuZGVyKGZpbHRlcmVycyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vc29ydCBzZWxlY3RlZFxyXG4gICAgaWYgKHNlbGVjdCAhPT0gbnVsbCkge1xyXG4gICAgICBzZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XHJcbiAgICAgICAgaXNDb3VudFNvcnQgPSB0cnVlO1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdTb3J0RGF0YScsIEpTT04uc3RyaW5naWZ5KHNlbGVjdC52YWx1ZSkpO1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdpc0NvdW50U29ydCcsIEpTT04uc3RyaW5naWZ5KGlzQ291bnRTb3J0KSk7XHJcbiAgICAgICAgZmlsdGVyZXJzID0gZ2V0RmlsdGVyUGFnZShmaWx0ZXJzRGF0YSwgT2JqZWN0RmxhZyk7XHJcbiAgICAgICAgZmlsdGVyZXJzID0gZ2V0U29ydERhdGEoZmlsdGVyZXJzKTtcclxuICAgICAgICBsb2FkUmVuZGVyKGZpbHRlcmVycyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vc29ydCBzZWFyY2hcclxuICAgIHNlYXJjaC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdTb3J0U2VhcmNoJywgSlNPTi5zdHJpbmdpZnkoc2VhcmNoLnZhbHVlKSk7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdmbGFnU2VhcmNoJywgSlNPTi5zdHJpbmdpZnkoaXNTZWFyY2gpKTtcclxuICAgICAgaWYgKHNlYXJjaC52YWx1ZS5sZW5ndGggPiAwKSBpc1NlYXJjaCA9IHRydWU7XHJcbiAgICAgIGxvYWRSZW5kZXIoZ2V0RmlsdGVyU2VhcmNoKGZpbHRlcnNEYXRhLCBzZWFyY2gudmFsdWUpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIHJlc2V0XHJcbiAgICBjb25zdCByZXNldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yZXNldCcpO1xyXG4gICAgcmVzZXQ/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICBpc1NlYXJjaCA9IGZhbHNlO1xyXG4gICAgICByZXNldEZpbHRlcnMoT2JqZWN0RmxhZywgZWxlbWVudExpc3QsIHNlYXJjaCwgY2hlY2tib3gpO1xyXG4gICAgICBzbGlkZXJDb3VudC5ub1VpU2xpZGVyPy5zZXQoWzEsIDEyXSk7XHJcbiAgICAgIHNsaWRlclllYXJzLm5vVWlTbGlkZXI/LnNldChbMTk0MCwgMjAyMF0pO1xyXG4gICAgICAob3V0cHV0c1swXSBhcyBIVE1MT3V0cHV0RWxlbWVudCkuaW5uZXJIVE1MID0gJzEnO1xyXG4gICAgICAob3V0cHV0c1sxXSBhcyBIVE1MT3V0cHV0RWxlbWVudCkuaW5uZXJIVE1MID0gJzEyJztcclxuICAgICAgKG91dHB1dHNbMl0gYXMgSFRNTE91dHB1dEVsZW1lbnQpLmlubmVySFRNTCA9ICcxOTQwJztcclxuICAgICAgKG91dHB1dHNbM10gYXMgSFRNTE91dHB1dEVsZW1lbnQpLmlubmVySFRNTCA9ICcyMDIwJztcclxuICAgICAgbG9hZFJlbmRlcihmaWx0ZXJzRGF0YSk7XHJcbiAgICB9KTtcclxuICAgIC8vY2xlYXIgc3RvcmFnZVxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJlc2V0U2V0dGluZ3MnKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDYXJkUmVuZGVyO1xyXG4iLCJpbXBvcnQgeyBJT2JqIH0gZnJvbSAnLi4vLi4vdHlwZXMvdHlwZXMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0RmlsdGVycyhcclxuICBvYmo6IElPYmosXHJcbiAgY29sbGVjdGlvbjogTm9kZUxpc3RPZjxIVE1MRWxlbWVudD4sXHJcbiAgc2VhcmNoOiBIVE1MSW5wdXRFbGVtZW50LFxyXG4gIGVsZW1lbnRDaGVjazogSFRNTElucHV0RWxlbWVudFxyXG4pIHtcclxuICBmb3IgKGNvbnN0IGtleXMgaW4gb2JqKSB7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmpba2V5c10pIHtcclxuICAgICAgb2JqW2tleXNdW2tleV0gPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ29iamVjdCcsIEpTT04uc3RyaW5naWZ5KG9iaikpO1xyXG4gIGNvbGxlY3Rpb24uZm9yRWFjaCgoZWwpID0+IHtcclxuICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xyXG4gIH0pO1xyXG4gIGVsZW1lbnRDaGVjay5jaGVja2VkID0gZmFsc2U7XHJcbiAgc2VhcmNoLnZhbHVlID0gJyc7XHJcbn1cclxuIiwiaW1wb3J0ICcuL3JlbmRlci5zY3NzJztcbmNsYXNzIFBhZ2VTZWNvbmQge1xuICBhc3luYyBtYWluUmVuZGVyKCkge1xuICAgIGNvbnN0IG1haW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbicpIGFzIEhUTUxUZW1wbGF0ZUVsZW1lbnQ7XG4gICAgbWFpbi5pbm5lckhUTUwgPSAnJztcbiAgICBjb25zdCBiYWNrZ3JvdW5kQmx1ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGJhY2tncm91bmRCbHVyLmNsYXNzTmFtZSA9ICdiYWNrZ3JvdW5kLWJsdXInO1xuICAgIGJhY2tncm91bmRCbHVyLmlubmVySFRNTCA9IGBcbiAgICAgICAgICA8ZGl2IGNsYXNzID0gXCJzZWNvbmQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2V0dGluZ3MtbWVudVwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic25vdy1hdWRpby1zZXR0aW5nc1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhdWRpby1zZXR0aW5nXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNub3ctc2V0dGluZ1wiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdG9yYWdlLXNldHRpbmdcIj7QodCx0YDQvtGBINC90LDRgdGC0YDQvtC10Lo8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0cmVlLXNldHRpbmdzXCI+XG4gICAgICAgICAgICAgICAgPGgyIGNsYXNzPVwidGl0bGUtdHJlZS1zZXR0aW5nc1wiPtCS0KvQkdCV0KDQmNCi0JUg0IHQm9Ca0KM8L2gyPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0cmVlLXNldHRpbmdzLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdyZWVuLXRyZWUgdHJlZS1pdGVtXCIgZGF0YS10cmVlPVwiMVwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdyZWVuLXRyZWUgdHJlZS1pdGVtXCIgZGF0YS10cmVlPVwiMlwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdyZWVuLXRyZWUgdHJlZS1pdGVtXCIgZGF0YS10cmVlPVwiM1wiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdyZWVuLXRyZWUgdHJlZS1pdGVtXCIgZGF0YS10cmVlPVwiNFwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdyZWVuLXRyZWUgdHJlZS1pdGVtXCIgZGF0YS10cmVlPVwiNVwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdyZWVuLXRyZWUgdHJlZS1pdGVtXCIgZGF0YS10cmVlPVwiNlwiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJnLXNldHRpbmdzXCI+XG4gICAgICAgICAgICAgICAgPGgyIGNsYXNzPVwidGl0bGUtYmctc2V0dGluZ3NcIj7QktCr0JHQldCg0JjQotCVINCk0J7QnTwvaDI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJnLWl0ZW1zXCI+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmctaXRlbVwiIGRhdGEtYmc9XCIxXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmctaXRlbVwiIGRhdGEtYmc9XCIyXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmctaXRlbVwiIGRhdGEtYmc9XCIzXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmctaXRlbVwiIGRhdGEtYmc9XCI0XCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmctaXRlbVwiIGRhdGEtYmc9XCI1XCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmctaXRlbVwiIGRhdGEtYmc9XCI2XCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmctaXRlbVwiIGRhdGEtYmc9XCI3XCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmctaXRlbVwiIGRhdGEtYmc9XCI4XCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+ICBcbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsaWdodHMtc2V0dGluZ3NcIj5cbiAgICAgICAgICAgICAgICA8aDIgY2xhc3M9XCJ0aXRsZS1saWdodHMtc2V0dGluZ3NcIj7Qk9CY0KDQm9Cv0J3QlNCQPC9oMj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibGlnaHRzXCI+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibGlnaHRzLWJ0blwiPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuLWNvbG9yIG11bHRpY29sb3ItYnRuXCIgZGF0YS1jb2xvcj1cIm11bHRpY29sb3JcIj48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0bi1jb2xvciByZWQtYnRuXCIgZGF0YS1jb2xvcj1cInJlZFwiPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuLWNvbG9yIGJsdWUtYnRuXCIgZGF0YS1jb2xvcj1cImJsdWVcIj48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0bi1jb2xvciB5ZWxsb3ctYnRuXCIgZGF0YS1jb2xvcj1cInllbGxvd1wiPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuLWNvbG9yIGdyZWVuLWJ0blwiIGRhdGEtY29sb3I9XCJncmVlblwiPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidHVybi1saWdodHNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJ0dXJuLWxpZ2h0c1wiIGNsYXNzPVwidHVybi1saWdodHMtY2hlY2tib3hcIiBpZD1cInR1cm4tbGlnaHRzLWlkXCI+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cInR1cm4tbGlnaHRzLWxhYmVsXCIgZm9yPVwidHVybi1saWdodHMtaWRcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidHVybi1saWdodHMtaW5uZXJcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidHVybi1saWdodHMtc3dpdGNoXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0cmVlLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidHJlZS1zbm93LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRyZWUtbGlnaHRzLWNvbnRhaW5lclwiPjwvZGl2PlxuICAgICAgICAgICAgICA8bWFwIG5hbWU9XCJ0cmVlLW1hcFwiPlxuICAgICAgICAgICAgICAgIDxhcmVhIGNvb3Jkcz1cIjM2NSw2OTksMTg5LDcwNiwxMTMsNjgzLDMxLDYwOCwyLDU1NSwyLDUzOSwxOCw0MzcsNzMsMzUxLDEwNiwyMjQsMTYxLDEzNCwyNDMsLTEsMzA2LDc1LDM1MywxNDQsMzk5LDIyMSw0MjQsMzU5LDQ1Miw0NTksNDk2LDU1MCw0NDQsNjY0XCIgc2hhcGU9XCJwb2x5XCI+XG4gICAgICAgICAgICAgIDwvbWFwPlxuICAgICAgICAgICAgICA8bWFwIG5hbWU9XCJ0cmVlLW1hcFwiIGNsYXNzPVwibWFwXCI+PC9tYXA+XG4gICAgICAgICAgICAgIDxpbWcgc3JjPVwiXCIgY2xhc3M9XCJtYWluLXRyZWVcIiB1c2VtYXA9XCIjdHJlZS1tYXBcIiBhbHQ9XCJ0cmVlXCI+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjaG9pY2UtbWVudVwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2hvaWNlLWZhdm9yaXRlXCI+XG4gICAgICAgICAgICAgICAgPGgyIGNsYXNzPVwiY2hvaWNlLWZhdm9yaXRlLXRpdGxlXCI+0JjQk9Cg0KPQqNCa0Jg8L2gyPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjaG9pY2UtZmF2b3JpdGUtdG95c1wiPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNob2ljZS10cmVlXCI+XG4gICAgICAgICAgICAgICAgPGgyIGNsYXNzPVwidHJlZS1kZWNvcmF0ZS10aXRsZVwiPtCS0Ksg0J3QkNCg0K/QlNCY0JvQmDwvaDI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRyZWUtZGVjb3JhdGUtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidHJlZS1kZWNvcmF0ZVwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRyZWUtZGVjb3JhdGVcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0cmVlLWRlY29yYXRlXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidHJlZS1kZWNvcmF0ZVwiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PmA7XG4gICAgbWFpbi5hcHBlbmQoYmFja2dyb3VuZEJsdXIpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBhZ2VTZWNvbmQ7XG4iLCJleHBvcnQgZnVuY3Rpb24gYXVkaW9QbGF5KCkge1xuICBsZXQgaXNQbGF5ID0gZmFsc2U7XG4gIGNvbnN0IHBsYXlBdWRpbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hdWRpby1zZXR0aW5nJykgYXMgSFRNTEVsZW1lbnQ7XG4gIGNvbnN0IGF1ZGlvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmF1ZGlvJykgYXMgSFRNTEF1ZGlvRWxlbWVudDtcblxuICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2lzUGxheScpKSB7XG4gICAgaXNQbGF5ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaXNQbGF5JykgYXMgc3RyaW5nKTtcbiAgfVxuICBmdW5jdGlvbiBsb2QoKSB7XG4gICAgcGxheUF1ZGlvLmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScpO1xuICAgIGF1ZGlvLnZvbHVtZSA9IDAuNDtcbiAgICBhdWRpby5wbGF5KCk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgbG9kKTtcbiAgfVxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcbiAgICBpZiAoaXNQbGF5KSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBsb2QpO1xuICAgIH1cbiAgfSk7XG4gIHBsYXlBdWRpby5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHBsYXlBdWRpby5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKTtcbiAgICBpZiAocGxheUF1ZGlvLmNsYXNzTGlzdC5jb250YWlucygnYWN0aXZlJykpIHtcbiAgICAgIGF1ZGlvLnZvbHVtZSA9IDAuNDtcbiAgICAgIGF1ZGlvLnBsYXkoKTtcbiAgICAgIGlzUGxheSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF1ZGlvLnBhdXNlKCk7XG4gICAgICBpc1BsYXkgPSBmYWxzZTtcbiAgICB9XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2lzUGxheScsIEpTT04uc3RyaW5naWZ5KGlzUGxheSkpO1xuICB9KTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBnZXRUcmVlc1N0YXJ0KCkge1xuICBjb25zdCBncmVlblRyZWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZ3JlZW4tdHJlZScpIGFzIE5vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+O1xuICBjb25zdCBtYWluVHJlZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluLXRyZWUnKSBhcyBIVE1MSW1hZ2VFbGVtZW50O1xuICBsZXQgaXNUcmVlID0gJzEnO1xuICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2lzVHJlZScpKSB7XG4gICAgaXNUcmVlID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaXNUcmVlJykgYXMgc3RyaW5nKTtcbiAgfVxuICBtYWluVHJlZS5zcmMgPSBgLi4vLi4vYXNzZXRzL3RyZWUvLSR7aXNUcmVlfS5wbmdgO1xuICBncmVlblRyZWUuZm9yRWFjaCgoZWwpID0+IHtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhlLmN1cnJlbnRUYXJnZXQpO1xuICAgICAgbWFpblRyZWUuc3JjID0gYC4uLy4uL2Fzc2V0cy90cmVlLy0ke2VsLmRhdGFzZXQudHJlZX0ucG5nYDtcbiAgICAgIGlzVHJlZSA9IGVsLmRhdGFzZXQudHJlZSBhcyBzdHJpbmc7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnaXNUcmVlJywgSlNPTi5zdHJpbmdpZnkoaXNUcmVlKSk7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGdldEJnSW1hZ2VzKCkge1xuICBsZXQgaXNCZ051bWJlciA9ICcxJztcbiAgY29uc3QgdHJlZUNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50cmVlLWNvbnRhaW5lcicpIGFzIEhUTUxFbGVtZW50O1xuICBjb25zdCBiZ0l0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJnLWl0ZW1zJykgYXMgTm9kZUxpc3RPZjxIVE1MRWxlbWVudD47XG4gIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaXNCZ051bWJlcicpKSB7XG4gICAgaXNCZ051bWJlciA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2lzQmdOdW1iZXInKSBhcyBzdHJpbmcpO1xuICB9XG4gIHRyZWVDb250YWluZXIuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybCguLi8uLi9hc3NldHMvYmcvJHtpc0JnTnVtYmVyfS5qcGcpYDtcbiAgYmdJdGVtcy5mb3JFYWNoKChpdCkgPT4ge1xuICAgIGl0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB0cmVlQ29udGFpbmVyLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IGB1cmwoLi4vLi4vYXNzZXRzL2JnLyR7KGUudGFyZ2V0IGFzIEhUTUxFbGVtZW50KS5kYXRhc2V0LmJnfS5qcGcpYDtcbiAgICAgIGlzQmdOdW1iZXIgPSAoZS50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLmRhdGFzZXQuYmcgYXMgc3RyaW5nO1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2lzQmdOdW1iZXInLCBKU09OLnN0cmluZ2lmeShpc0JnTnVtYmVyKSk7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiaW1wb3J0ICcuL2dhcmxhbmQuc2Nzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0R2FybGFuZCgpIHtcbiAgLy8gY29uc3QgdXJsQmFja2dyb3VuZCA9IGdldFVybEJhY2tncm91bmQoYmFja2dyb3VuZCk7XG5cbiAgLy8gY29uc3QgdWxMaXN0ID0gbmV3IEFycmF5KDIwKS5maWxsKFwibGluZVwiKTtcbiAgLy8gY29uc3QgbGlzdEl0ZW1zPSBuZXcgQXJyYXkoMjQpLmZpbGwoXCJsaS1lbGVtZW50XCIpO1xuICAvLyBjb25zdCBjb2xvcnMgPSBbXCJyZWRcIiwgXCJ5ZWxsb3dcIiwgXCJibHVlXCIsIFwiZ3JlZW5cIl07XG5cbiAgLy8gZnVuY3Rpb24gZ2V0R2FybGFuZENvbG9yKGdhcmxhbmRTZWxlY3RlZDogc3RyaW5nKSB7XG4gIC8vICAgc3dpdGNoIChnYXJsYW5kU2VsZWN0ZWQpIHtcbiAgLy8gICAgIGNhc2UgJ2dhcmxhbmQtcmVkJzogcmV0dXJuICdyZWQnO1xuICAvLyAgICAgY2FzZSAnZ2FybGFuZC1ncmVlbic6IHJldHVybiAnZ3JlZW4nO1xuICAvLyAgICAgY2FzZSAnZ2FybGFuZC1ibHVlJzogcmV0dXJuICdibHVlJztcbiAgLy8gICAgIGNhc2UgJ2dhcmxhbmQteWVsbG93JzogcmV0dXJuICd5ZWxsb3cnO1xuICAvLyAgICAgY2FzZSAnZ2FybGFuZC1tdWx0aWNvbG9yJzogcmV0dXJuIGNvbG9yc1soTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNCkpXTtcbiAgLy8gICAgIGRlZmF1bHQ6IHJldHVybiAnb2ZmLWxpZ2h0JztcbiAgLy8gICB9XG4gIC8vIH1cblxuICAvLyBjb25zdCByb3QgPSAzMjtcbiAgLy8gY29uc3QgYW5nbGUgPSA1O1xuICAvLyBjb25zdCBjaXJjbGVTaXplID0gNTAwO1xuXG4gIC8vICgoKGluZGV4KSA+PSAoMSArIHVsSW5kZXggLyAyKSkgJiYgKChpbmRleCkgPD0gKDIyIC0gdWxJbmRleCAvIDIpKSlcblxuICBjb25zdCB0dXJuR2FybGFuZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0dXJuLWxpZ2h0cy1pZCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gIGNvbnN0IHRyZWVHYXJsYW5kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRyZWUtbGlnaHRzLWNvbnRhaW5lcicpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gIHR1cm5HYXJsYW5kLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGNvbnN0IG4gPSBbXG4gICAgICBbODgsIDVdLFxuICAgICAgWzgwLCA5XSxcbiAgICAgIFs4NiwgMTNdLFxuICAgICAgWzgwLCAxOF0sXG4gICAgICBbODIsIDE4XSxcbiAgICAgIFs3OCwgMjBdLFxuICAgICAgWzcwLCAyOF0sXG4gICAgICBbNzQsIDM4XSxcbiAgICBdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgODsgaSsrKSB7XG4gICAgICBjb25zdCBsaXN0TGlnaHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgICAgbGlzdExpZ2h0LmNsYXNzTGlzdC5hZGQoJ2NoYWluLWdhcmxhbmQnKTtcbiAgICAgIGNvbnN0IHdpZHRoID0gMTIwICsgKDEyMCAvIDIpICogaTtcbiAgICAgIGNvbnN0IGhlaWdodCA9IDEyMCArICgxMjAgLyAyKSAqIGk7XG4gICAgICBsaXN0TGlnaHQuc3R5bGUuaGVpZ2h0ID0gYCR7aGVpZ2h0fXB4YDtcbiAgICAgIGxpc3RMaWdodC5zdHlsZS53aWR0aCA9IGAke3dpZHRofXB4YDtcbiAgICAgIGxldCByb3RhdGUgPSBuW2ldWzBdO1xuICAgICAgZm9yIChsZXQgYSA9IDA7IGEgPCBuW2ldWzFdOyBhKyspIHtcbiAgICAgICAgY29uc3QgbGlnaHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICBsaWdodC5zdHlsZS50cmFuc2Zvcm0gPSBgcm90YXRlKCR7cm90YXRlfWRlZykgdHJhbnNsYXRlKCR7aGVpZ2h0IC0gNTB9cHgpIHJvdGF0ZSgtJHtyb3RhdGV9ZGVnKWA7XG4gICAgICAgIGxpZ2h0LmNsYXNzTGlzdC5hZGQoJ2xpJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKHJvdGF0ZSk7XG4gICAgICAgIHJvdGF0ZSArPSAyO1xuICAgICAgICBsaXN0TGlnaHQuYXBwZW5kKGxpZ2h0KTtcbiAgICAgIH1cbiAgICAgIHRyZWVHYXJsYW5kLmFwcGVuZChsaXN0TGlnaHQpO1xuICAgIH1cbiAgfSk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gaGFuZGxlRHJhZ2dsZSgpIHtcbiAgY29uc3Qgem9uZVRyZWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdhcmVhJykgYXMgSFRNTEFyZWFFbGVtZW50O1xuICBjb25zdCBkcmFnZ2FibGU6IE5vZGVMaXN0T2Y8SFRNTEltYWdlRWxlbWVudD4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY2hvaWNlLWltZycpO1xuICBjb25zdCBjaG9pY2VUb3kgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY2hvaWNlLXRveScpO1xuICBsZXQgY29vcmRYOiBudW1iZXI7XG4gIGxldCBjb29yZFk6IG51bWJlcjtcbiAgZnVuY3Rpb24gaGFuZGxlRHJhZ1N0YXJ0KGU6IERyYWdFdmVudCkge1xuICAgIGNvb3JkWCA9IGUub2Zmc2V0WDtcbiAgICBjb29yZFkgPSBlLm9mZnNldFk7XG4gICAgZS5kYXRhVHJhbnNmZXI/LnNldERhdGEoJ3RleHQnLCAoZS50YXJnZXQgYXMgSFRNTEltYWdlRWxlbWVudCkuaWQpO1xuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZURyYWdFbmQoZTogRHJhZ0V2ZW50KSB7XG4gICAgY29uc3QgaW5kZXggPSAoZS50YXJnZXQgYXMgSFRNTEltYWdlRWxlbWVudCkuZGF0YXNldC5udW1iZXIgYXMgc3RyaW5nO1xuICAgIGlmIChjb29yZFggIT09IGUub2Zmc2V0WCAmJiBjb29yZFkgIT09IGUub2Zmc2V0WSkge1xuICAgICAgY2hvaWNlVG95WytpbmRleF0uYXBwZW5kKGUudGFyZ2V0IGFzIEhUTUxJbWFnZUVsZW1lbnQpO1xuICAgICAgKGUudGFyZ2V0IGFzIEhUTUxJbWFnZUVsZW1lbnQpLnN0eWxlLmxlZnQgPSAnJztcbiAgICAgIChlLnRhcmdldCBhcyBIVE1MSW1hZ2VFbGVtZW50KS5zdHlsZS50b3AgPSAnJztcbiAgICB9XG4gICAgY29uc29sZS5sb2coY2hvaWNlVG95WytpbmRleF0pO1xuICAgIGNvbnNvbGUubG9nKGNob2ljZVRveVsraW5kZXhdLmZpcnN0Q2hpbGQpO1xuICAgIGNvbnNvbGUubG9nKGUudGFyZ2V0KTtcbiAgICAoY2hvaWNlVG95WytpbmRleF0uZmlyc3RDaGlsZCBhcyBIVE1MRWxlbWVudCkuaW5uZXJIVE1MID0gYCR7XG4gICAgICBjaG9pY2VUb3lbK2luZGV4XS5xdWVyeVNlbGVjdG9yQWxsKCcuY2hvaWNlLWltZycpLmxlbmd0aFxuICAgIH1gO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlT3ZlckRyb3AoZTogRHJhZ0V2ZW50KSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChlLnR5cGUgIT0gJ2Ryb3AnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGRyYWdnZWRJZCA9IGUuZGF0YVRyYW5zZmVyPy5nZXREYXRhKCd0ZXh0JykgYXMgc3RyaW5nO1xuICAgIGNvbnN0IGRyYWdnZWRFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRyYWdnZWRJZCkgYXMgSFRNTEltYWdlRWxlbWVudDtcbiAgICBkcmFnZ2VkRWwuc3R5bGUubGVmdCA9IGAke2UucGFnZVggLSBjb29yZFh9cHhgO1xuICAgIGRyYWdnZWRFbC5zdHlsZS50b3AgPSBgJHtlLnBhZ2VZIC0gY29vcmRZIC0gNzB9cHhgO1xuICAgIGlmICh6b25lVHJlZSA9PSAoZS50YXJnZXQgYXMgSFRNTEVsZW1lbnQpKSB7XG4gICAgICAoZHJhZ2dlZEVsLnBhcmVudE5vZGUgYXMgSFRNTEVsZW1lbnQpLnJlbW92ZUNoaWxkKGRyYWdnZWRFbCk7XG4gICAgICAoZS50YXJnZXQgYXMgSFRNTEVsZW1lbnQpPy5hcHBlbmRDaGlsZChkcmFnZ2VkRWwpO1xuICAgIH1cbiAgfVxuICBkcmFnZ2FibGUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgaGFuZGxlRHJhZ1N0YXJ0KTtcbiAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdlbmQnLCBoYW5kbGVEcmFnRW5kKTtcbiAgfSk7XG4gIHpvbmVUcmVlLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgaGFuZGxlT3ZlckRyb3ApO1xuICB6b25lVHJlZS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgaGFuZGxlT3ZlckRyb3ApO1xufVxuIiwiaW1wb3J0IGNob2ljZVBhZ2UgZnJvbSAnLi90dXJuZXInO1xyXG5pbXBvcnQgJy4vc3R5bGUvc3R5bGUuc2Nzcyc7XHJcbmNob2ljZVBhZ2UoKTtcclxuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJpc1ZhbGlkUGFydGlhbEZvcm1hdHRlciIsImVudHJ5IiwidG8iLCJyZW1vdmVFbGVtZW50IiwiZWwiLCJwYXJlbnRFbGVtZW50IiwicmVtb3ZlQ2hpbGQiLCJpc1NldCIsInZhbHVlIiwicHJldmVudERlZmF1bHQiLCJlIiwiaXNOdW1lcmljIiwiYSIsImlzTmFOIiwiaXNGaW5pdGUiLCJhZGRDbGFzc0ZvciIsImVsZW1lbnQiLCJjbGFzc05hbWUiLCJkdXJhdGlvbiIsImFkZENsYXNzIiwic2V0VGltZW91dCIsInJlbW92ZUNsYXNzIiwibGltaXQiLCJNYXRoIiwibWF4IiwibWluIiwiYXNBcnJheSIsIkFycmF5IiwiaXNBcnJheSIsImNvdW50RGVjaW1hbHMiLCJudW1TdHIiLCJwaWVjZXMiLCJTdHJpbmciLCJzcGxpdCIsImxlbmd0aCIsImNsYXNzTGlzdCIsInRlc3QiLCJhZGQiLCJyZW1vdmUiLCJyZXBsYWNlIiwiUmVnRXhwIiwiam9pbiIsImdldFBhZ2VPZmZzZXQiLCJkb2MiLCJzdXBwb3J0UGFnZU9mZnNldCIsInVuZGVmaW5lZCIsIndpbmRvdyIsInBhZ2VYT2Zmc2V0IiwiaXNDU1MxQ29tcGF0IiwiY29tcGF0TW9kZSIsIngiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JvbGxMZWZ0IiwiYm9keSIsInkiLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvcCIsInN1YlJhbmdlUmF0aW8iLCJwYSIsInBiIiwiZnJvbVBlcmNlbnRhZ2UiLCJyYW5nZSIsInN0YXJ0UmFuZ2UiLCJnZXRKIiwiYXJyIiwiaiIsInRvU3RlcHBpbmciLCJ4VmFsIiwieFBjdCIsInNsaWNlIiwidmEiLCJ2YiIsImFicyIsInRvUGVyY2VudGFnZSIsImdldFN0ZXAiLCJ4U3RlcHMiLCJzbmFwIiwiYiIsInJvdW5kIiwiY2xvc2VzdCIsIlBpcHNUeXBlIiwiUGlwc01vZGUiLCJTcGVjdHJ1bSIsInNpbmdsZVN0ZXAiLCJpbmRleCIsInRoaXMiLCJ4TnVtU3RlcHMiLCJ4SGlnaGVzdENvbXBsZXRlU3RlcCIsIm9yZGVyZWQiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsInB1c2giLCJzb3J0IiwiaGFuZGxlRW50cnlQb2ludCIsImhhbmRsZVN0ZXBQb2ludCIsInByb3RvdHlwZSIsImdldERpc3RhbmNlIiwiZGlzdGFuY2VzIiwiZ2V0QWJzb2x1dGVEaXN0YW5jZSIsImRpcmVjdGlvbiIsInN0YXJ0X2ZhY3RvciIsInhQY3RfaW5kZXgiLCJyZXN0X2ZhY3RvciIsInJlc3RfcmVsX2Rpc3RhbmNlIiwicmFuZ2VfcGN0IiwicmVsX3JhbmdlX2Rpc3RhbmNlIiwiYWJzX2Rpc3RhbmNlX2NvdW50ZXIiLCJyYW5nZV9jb3VudGVyIiwiZnJvbVN0ZXBwaW5nIiwiaXNQZXJjZW50YWdlIiwiZ2V0RGVmYXVsdFN0ZXAiLCJpc0Rvd24iLCJzaXplIiwiZ2V0TmVhcmJ5U3RlcHMiLCJzdGVwQmVmb3JlIiwic3RhcnRWYWx1ZSIsInN0ZXAiLCJoaWdoZXN0U3RlcCIsInRoaXNTdGVwIiwic3RlcEFmdGVyIiwiY291bnRTdGVwRGVjaW1hbHMiLCJzdGVwRGVjaW1hbHMiLCJtYXAiLCJhcHBseSIsImhhc05vU2l6ZSIsImNvbnZlcnQiLCJwZXJjZW50YWdlIiwicGFyc2VGbG9hdCIsIkVycm9yIiwidmFsdWUxIiwiTnVtYmVyIiwiaSIsIm4iLCJ0b3RhbFN0ZXBzIiwiY2VpbCIsInRvRml4ZWQiLCJkZWZhdWx0Rm9ybWF0dGVyIiwiZnJvbSIsImNzc0NsYXNzZXMiLCJ0YXJnZXQiLCJiYXNlIiwib3JpZ2luIiwiaGFuZGxlIiwiaGFuZGxlTG93ZXIiLCJoYW5kbGVVcHBlciIsInRvdWNoQXJlYSIsImhvcml6b250YWwiLCJ2ZXJ0aWNhbCIsImJhY2tncm91bmQiLCJjb25uZWN0IiwiY29ubmVjdHMiLCJsdHIiLCJydGwiLCJ0ZXh0RGlyZWN0aW9uTHRyIiwidGV4dERpcmVjdGlvblJ0bCIsImRyYWdnYWJsZSIsImRyYWciLCJ0YXAiLCJhY3RpdmUiLCJ0b29sdGlwIiwicGlwcyIsInBpcHNIb3Jpem9udGFsIiwicGlwc1ZlcnRpY2FsIiwibWFya2VyIiwibWFya2VySG9yaXpvbnRhbCIsIm1hcmtlclZlcnRpY2FsIiwibWFya2VyTm9ybWFsIiwibWFya2VyTGFyZ2UiLCJtYXJrZXJTdWIiLCJ2YWx1ZUhvcml6b250YWwiLCJ2YWx1ZVZlcnRpY2FsIiwidmFsdWVOb3JtYWwiLCJ2YWx1ZUxhcmdlIiwidmFsdWVTdWIiLCJJTlRFUk5BTF9FVkVOVF9OUyIsInRlc3RTdGVwIiwicGFyc2VkIiwidGVzdEtleWJvYXJkUGFnZU11bHRpcGxpZXIiLCJrZXlib2FyZFBhZ2VNdWx0aXBsaWVyIiwidGVzdEtleWJvYXJkTXVsdGlwbGllciIsImtleWJvYXJkTXVsdGlwbGllciIsInRlc3RLZXlib2FyZERlZmF1bHRTdGVwIiwia2V5Ym9hcmREZWZhdWx0U3RlcCIsInRlc3RSYW5nZSIsInNwZWN0cnVtIiwidGVzdFN0YXJ0IiwiaGFuZGxlcyIsInN0YXJ0IiwidGVzdFNuYXAiLCJ0ZXN0QW5pbWF0ZSIsImFuaW1hdGUiLCJ0ZXN0QW5pbWF0aW9uRHVyYXRpb24iLCJhbmltYXRpb25EdXJhdGlvbiIsInRlc3RDb25uZWN0IiwidGVzdE9yaWVudGF0aW9uIiwib3J0IiwidGVzdE1hcmdpbiIsIm1hcmdpbiIsInRlc3RMaW1pdCIsInRlc3RQYWRkaW5nIiwicGFkZGluZyIsInRvdGFsUGFkZGluZyIsImZpcnN0VmFsdWUiLCJ0ZXN0RGlyZWN0aW9uIiwiZGlyIiwidGVzdEJlaGF2aW91ciIsImluZGV4T2YiLCJmaXhlZCIsImhvdmVyIiwidW5jb25zdHJhaW5lZCIsImRyYWdBbGwiLCJldmVudHMiLCJ0ZXN0VG9vbHRpcHMiLCJ0b29sdGlwcyIsImZvcm1hdHRlciIsInRlc3RIYW5kbGVBdHRyaWJ1dGVzIiwiaGFuZGxlQXR0cmlidXRlcyIsInRlc3RBcmlhRm9ybWF0IiwiYXJpYUZvcm1hdCIsInRlc3RGb3JtYXQiLCJpc1ZhbGlkRm9ybWF0dGVyIiwiZm9ybWF0IiwidGVzdEtleWJvYXJkU3VwcG9ydCIsImtleWJvYXJkU3VwcG9ydCIsInRlc3REb2N1bWVudEVsZW1lbnQiLCJ0ZXN0Q3NzUHJlZml4IiwiY3NzUHJlZml4IiwidGVzdENzc0NsYXNzZXMiLCJrZXkiLCJ0ZXN0T3B0aW9ucyIsIm9wdGlvbnMiLCJ0ZXN0cyIsInIiLCJ0Iiwib3JpZW50YXRpb24iLCJiZWhhdmlvdXIiLCJkZWZhdWx0cyIsIm5hbWUiLCJkIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwibXNQcmVmaXgiLCJzdHlsZSIsIm1zVHJhbnNmb3JtIiwibm9QcmVmaXgiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2Zvcm1SdWxlIiwic2NvcGUiLCJvcmlnaW5hbE9wdGlvbnMiLCJzY29wZV9CYXNlIiwic2NvcGVfSGFuZGxlcyIsInNjb3BlX0Nvbm5lY3RzIiwic2NvcGVfUGlwcyIsInNjb3BlX1Rvb2x0aXBzIiwiYWRkVGFyZ2V0IiwiYWN0aW9ucyIsIm5hdmlnYXRvciIsInBvaW50ZXJFbmFibGVkIiwibW92ZSIsImVuZCIsIm1zUG9pbnRlckVuYWJsZWQiLCJzdXBwb3J0c1Bhc3NpdmUiLCJDU1MiLCJzdXBwb3J0cyIsIm9wdHMiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsImFkZEV2ZW50TGlzdGVuZXIiLCJnZXRTdXBwb3J0c1Bhc3NpdmUiLCJzY29wZV9UYXJnZXQiLCJzY29wZV9TcGVjdHJ1bSIsInNjb3BlX1ZhbHVlcyIsInNjb3BlX0xvY2F0aW9ucyIsInNjb3BlX0hhbmRsZU51bWJlcnMiLCJzY29wZV9BY3RpdmVIYW5kbGVzQ291bnQiLCJzY29wZV9FdmVudHMiLCJzY29wZV9Eb2N1bWVudCIsIm93bmVyRG9jdW1lbnQiLCJzY29wZV9Eb2N1bWVudEVsZW1lbnQiLCJzY29wZV9Cb2R5Iiwic2NvcGVfRGlyT2Zmc2V0IiwiYWRkTm9kZVRvIiwiZGl2IiwiYXBwZW5kQ2hpbGQiLCJhZGRPcmlnaW4iLCJoYW5kbGVOdW1iZXIiLCJzZXRBdHRyaWJ1dGUiLCJldmVudCIsImlzU2xpZGVyRGlzYWJsZWQiLCJpc0hhbmRsZURpc2FibGVkIiwiaG9yaXpvbnRhbEtleXMiLCJ2ZXJ0aWNhbEtleXMiLCJsYXJnZVN0ZXBLZXlzIiwiZWRnZUtleXMiLCJyZXZlcnNlIiwiaXNMYXJnZURvd24iLCJpc0xhcmdlVXAiLCJpc1VwIiwiaXNNaW4iLCJpc01heCIsImdldE5leHRTdGVwc0ZvckhhbmRsZSIsInNldEhhbmRsZSIsImZpcmVFdmVudCIsImV2ZW50S2V5ZG93biIsImF0dHJpYnV0ZXNfMSIsImF0dHJpYnV0ZSIsImFkZENvbm5lY3QiLCJhZGRUb29sdGlwIiwiZmlyc3RDaGlsZCIsImhhc0F0dHJpYnV0ZSIsInJlbW92ZVRvb2x0aXBzIiwicmVtb3ZlRXZlbnQiLCJiaW5kRXZlbnQiLCJ2YWx1ZXMiLCJ1bmVuY29kZWQiLCJmb3JtYXR0ZWRWYWx1ZSIsImlubmVySFRNTCIsIm1hcFRvUmFuZ2UiLCJzdGVwcGVkIiwiZ2VuZXJhdGVTcHJlYWQiLCJhcnJheSIsImdyb3VwIiwibW9kZSIsIlJhbmdlIiwiU3RlcHMiLCJDb3VudCIsImludGVydmFsIiwic3ByZWFkIiwiUG9zaXRpb25zIiwiVmFsdWVzIiwiZ2V0R3JvdXAiLCJpbmRleGVzIiwiZmlyc3RJblJhbmdlIiwibGFzdEluUmFuZ2UiLCJpZ25vcmVGaXJzdCIsImlnbm9yZUxhc3QiLCJwcmV2UGN0IiwiZmlsdGVyIiwidW5zaGlmdCIsImN1cnJlbnQiLCJxIiwibmV3UGN0IiwicGN0RGlmZmVyZW5jZSIsInBjdFBvcyIsInR5cGUiLCJzdGVwcyIsInJlYWxTdGVwcyIsInN0ZXBTaXplIiwibG93IiwiaGlnaCIsImlzU3RlcHMiLCJkZW5zaXR5IiwiTGFyZ2VWYWx1ZSIsIlNtYWxsVmFsdWUiLCJOb1ZhbHVlIiwiYWRkTWFya2luZyIsImZpbHRlckZ1bmMiLCJfYSIsIl9iIiwidmFsdWVTaXplQ2xhc3NlcyIsIk5vbmUiLCJtYXJrZXJTaXplQ2xhc3NlcyIsInZhbHVlT3JpZW50YXRpb25DbGFzc2VzIiwibWFya2VyT3JpZW50YXRpb25DbGFzc2VzIiwiZ2V0Q2xhc3NlcyIsInNvdXJjZSIsInNpemVDbGFzc2VzIiwib2Zmc2V0Iiwibm9kZSIsImFkZFNwcmVhZCIsInJlbW92ZVBpcHMiLCJiYXNlU2l6ZSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJhbHQiLCJ3aWR0aCIsImhlaWdodCIsImF0dGFjaEV2ZW50IiwiY2FsbGJhY2siLCJkYXRhIiwibWV0aG9kIiwicGFnZU9mZnNldCIsImV2ZW50VGFyZ2V0IiwidG91Y2giLCJtb3VzZSIsInBvaW50ZXIiLCJidXR0b25zIiwidG91Y2hlcyIsImlzVG91Y2hPblRhcmdldCIsImNoZWNrVG91Y2giLCJjb250YWlucyIsImNvbXBvc2VkIiwiY29tcG9zZWRQYXRoIiwic2hpZnQiLCJ0YXJnZXRUb3VjaGVzIiwiY2FsbCIsInBhZ2VYIiwicGFnZVkiLCJ0YXJnZXRUb3VjaCIsImZpbmQiLCJjaGFuZ2VkVG91Y2hlcyIsImNsaWVudFgiLCJjbGllbnRZIiwicG9pbnRzIiwiY3Vyc29yIiwiZml4RXZlbnQiLCJkb05vdFJlamVjdCIsImNhbGNQb2ludCIsIm1ldGhvZHMiLCJldmVudE5hbWUiLCJwYXNzaXZlIiwiY2FsY1BvaW50VG9QZXJjZW50YWdlIiwiZWxlbSIsImRvY0VsZW0iLCJwcm9wb3NhbCIsInVzZXJBZ2VudCIsInRvcCIsImNsaWVudFRvcCIsImxlZnQiLCJjbGllbnRMZWZ0IiwiZG9jdW1lbnRMZWF2ZSIsIm5vZGVOYW1lIiwicmVsYXRlZFRhcmdldCIsImV2ZW50RW5kIiwiZXZlbnRNb3ZlIiwiYXBwVmVyc2lvbiIsImJ1dHRvbnNQcm9wZXJ0eSIsIm1vdmVtZW50Iiwic3RhcnRDYWxjUG9pbnQiLCJtb3ZlSGFuZGxlcyIsImxvY2F0aW9ucyIsImhhbmRsZU51bWJlcnMiLCJsaXN0ZW5lcnMiLCJjIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldFppbmRleCIsImV2ZW50U3RhcnQiLCJzb21lIiwiY2hpbGRyZW4iLCJzdG9wUHJvcGFnYXRpb24iLCJtb3ZlRXZlbnQiLCJlbmRFdmVudCIsIm91dEV2ZW50IiwiY29uY2F0IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImV2ZW50VGFwIiwiY2xpY2tlZFBvc2l0aW9uIiwic21hbGxlc3REaWZmZXJlbmNlIiwiaGFuZGxlUG9zaXRpb24iLCJkaWZmZXJlbmNlV2l0aFRoaXNIYW5kbGUiLCJnZXRDbG9zZXN0SGFuZGxlIiwiZXZlbnRIb3ZlciIsInRhcmdldEV2ZW50Iiwic2NvcGVfU2VsZiIsIm5hbWVzcGFjZWRFdmVudCIsIm5hbWVzcGFjZSIsInN1YnN0cmluZyIsImJpbmQiLCJ0RXZlbnQiLCJ0TmFtZXNwYWNlIiwiaXNJbnRlcm5hbE5hbWVzcGFjZSIsImV2ZW50VHlwZSIsImNoZWNrSGFuZGxlUG9zaXRpb24iLCJyZWZlcmVuY2UiLCJsb29rQmFja3dhcmQiLCJsb29rRm9yd2FyZCIsImdldFZhbHVlIiwiZGlzdGFuY2UiLCJpblJ1bGVPcmRlciIsInYiLCJvIiwidXB3YXJkIiwicHJvcG9zYWxzIiwiZmlyc3RIYW5kbGUiLCJmIiwic3RhdGUiLCJ0cmFuc2Zvcm1EaXJlY3Rpb24iLCJ6SW5kZXgiLCJleGFjdElucHV0IiwidHJhbnNsYXRlUnVsZSIsInVwZGF0ZUNvbm5lY3QiLCJ1cGRhdGVIYW5kbGVQb3NpdGlvbiIsImwiLCJoIiwiY29ubmVjdFdpZHRoIiwic2NhbGVSdWxlIiwicmVzb2x2ZVRvVmFsdWUiLCJ2YWx1ZVNldCIsImlucHV0IiwiZmlyZVNldEV2ZW50IiwiaXNJbml0Iiwic3BhY2VfMSIsInZhbHVlR2V0IiwibG9jYXRpb24iLCJuZWFyYnlTdGVwcyIsImluY3JlbWVudCIsImRlY3JlbWVudCIsImNvbm5lY3RPcHRpb25zIiwiY29ubmVjdEJhc2UiLCJhZGRFbGVtZW50cyIsImhhbmRsZUJlZm9yZSIsImhhbmRsZUFmdGVyIiwiZXZlbnRIb2xkZXJzIiwiaGFuZGxlc1RvRHJhZyIsImhhbmRsZU51bWJlcnNUb0RyYWciLCJldmVudEhvbGRlciIsInBvc2l0aW9ucyIsIm5vdyIsInRleHQiLCJkZXN0cm95Iiwibm9VaVNsaWRlciIsIm9uIiwib2ZmIiwic2V0IiwicmVzZXQiLCJfX21vdmVIYW5kbGVzIiwidXBkYXRlT3B0aW9ucyIsIm9wdGlvbnNUb1VwZGF0ZSIsInVwZGF0ZUFibGUiLCJuZXdPcHRpb25zIiwiZ2V0UG9zaXRpb25zIiwiZ2V0VG9vbHRpcHMiLCJnZXRPcmlnaW5zIiwiaW5pdGlhbGl6ZSIsImFwaSIsIm5vdWlzbGlkZXIiLCJfX3NwZWN0cnVtIiwiY3JlYXRlIiwiZmFjdG9yeSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsImVudW1lcmFibGUiLCJvYmoiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJtYWluUmVuZGVyIiwicXVlcnlTZWxlY3RvciIsImdldFRveUxpc3QiLCJyZXMiLCJmZXRjaCIsImpzb24iLCJTbGlkZXJSZW5kZXIiLCJzbGlkZXJzUmVuZGVyQ291bnQiLCJzbGlkZXJDb3VudCIsIm91dHB1dHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwidmFsdWVDb3VudCIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJKU09OIiwicGFyc2UiLCJzZXRJdGVtIiwic3RyaW5naWZ5Iiwic2xpZGVyc1JlbmRlclllYXJzIiwic2xpZGVyWWVhcnMiLCJ2YWx1ZVllYXIiLCJGaWx0ZXIiLCJjb25zdHJ1Y3RvciIsIk9iamVjdEZsYWciLCJnZXRGaWx0ZXJQcm9wZXJ0eSIsImFyIiwiaW5wdXRDaGVja2JveCIsImZhdm9yaXRlIiwiY2hlY2tlZCIsImtleUZpbHRlciIsIkZpbHRlckZpcnN0Iiwibm9kZUxpc3QiLCJzdXBlciIsImdldE9iakZpbHRlcnMiLCJkYXRhUGFyZW50IiwicGFyZW50Tm9kZSIsImRhdGFzZXQiLCJkYXRhSXRlbSIsInRvZ2dsZSIsInllYXIiLCJjb3VudCIsImdldEZpbHRlclBhZ2UiLCJhcnJheUZpbHRlclByb3AiLCJhcnJheVNsaWQiLCJpdGVtIiwiZ2V0U29ydFJhbmdlIiwiY3VycmVudEFyciIsImFyZWEiLCJnZXRTb3J0RGF0YSIsImdldEZpbHRlclNlYXJjaCIsInRvTG93ZXJDYXNlIiwicG9wdXBBY3RpdmUiLCJTaG93UG9wdXAiLCJvdmVybGF5IiwicG9wdXAiLCJjbG9zZSIsImFwcGVuZCIsImFycmF5RmF2b3JpdGUiLCJzaGFwZSIsImNvbG9yIiwiZmF2b3JpdGVzIiwiZ2V0U25vd0ludGVydmFsIiwic25vd0NvbnRyb2wiLCJzbm93Zmxha2VzSW50ZXJ2YWxJZCIsInNldEludGVydmFsIiwic25vd1dpbmRvdyIsInNub3dGbGFrZSIsInJhbmRvbSIsImNsaWVudFdpZHRoIiwib3BhY2l0eSIsImNyZWF0ZVNub3dGbGFrZSIsImNsZWFySW50ZXJ2YWwiLCJidXR0b25UcmVlIiwiYnV0dG9uUGFnZUZpcnN0IiwiYnV0dG9uUGFnZVNlY29uZCIsImFwcCIsInJlbmRlck1haW4iLCJtYWluIiwiYmFja2dyb3VuZEJsdXIiLCJtYWluQ29udGFpbmVyIiwiY2FyZENvbnRhaW5lciIsInJlbW92ZUF0dHJpYnV0ZSIsImdldENhcmQiLCJjaGVja2JveCIsInNlYXJjaCIsInNlbGVjdCIsInNsaWRlclJlbmRlciIsImxvYWRlciIsImxpc3QiLCJpc0NvdW50U29ydCIsImZpbHRlcmVycyIsImZpbHRlcnNEYXRhIiwiaXNTZWFyY2giLCJsb2FkUmVuZGVyIiwicmVuZGVyIiwiY2FyZCIsIm51bSIsImxhc3RDaGlsZCIsImZhdm9yaXRlQ2hlY2siLCJyZW5kZXJQYWdlIiwiZWxlbWVudExpc3QiLCJvYmpGaWx0ZXIiLCJhcnJheUNvdW50IiwiYXJyYXlZZWFycyIsImNvbGxlY3Rpb24iLCJlbGVtZW50Q2hlY2siLCJyZXNldEZpbHRlcnMiLCJjbGVhciIsImdldFBhZ2VUcmVlIiwiaXNQbGF5IiwicGxheUF1ZGlvIiwiYXVkaW8iLCJsb2QiLCJ2b2x1bWUiLCJwbGF5IiwicGF1c2UiLCJhdWRpb1BsYXkiLCJpc1Nub3ciLCJncmVlblRyZWUiLCJtYWluVHJlZSIsImlzVHJlZSIsInNyYyIsImNvbnNvbGUiLCJsb2ciLCJjdXJyZW50VGFyZ2V0IiwidHJlZSIsImdldFRyZWVzU3RhcnQiLCJpc0JnTnVtYmVyIiwidHJlZUNvbnRhaW5lciIsImJnSXRlbXMiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJpdCIsImJnIiwiZ2V0QmdJbWFnZXMiLCJ0dXJuR2FybGFuZCIsInRyZWVHYXJsYW5kIiwibGlzdExpZ2h0Iiwicm90YXRlIiwibGlnaHQiLCJnZXRHYXJsYW5kIiwiYXJyYXlUb3lzIiwiY29udGFpbmVyVG95c0Zhdm9yaXRlIiwiaW5kIiwiY2hvaWNlVG95IiwiY2hvaWNlTnVtYmVyIiwiaW5uZXJUZXh0IiwicmVzdWx0IiwiY2hvaWNlSW1nIiwibnVtYmVyIiwiaWQiLCJ6b25lVHJlZSIsImNvb3JkWCIsImNvb3JkWSIsImhhbmRsZURyYWdTdGFydCIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZGF0YVRyYW5zZmVyIiwic2V0RGF0YSIsImhhbmRsZURyYWdFbmQiLCJoYW5kbGVPdmVyRHJvcCIsImRyYWdnZWRJZCIsImdldERhdGEiLCJkcmFnZ2VkRWwiLCJnZXRFbGVtZW50QnlJZCIsImhhbmRsZURyYWdnbGUiLCJzdGFydEdhbWUiLCJjaG9pY2VQYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==